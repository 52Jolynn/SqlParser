// Generated from D:/Work/Code/Intelij IDEA/SqlParser/src/main/resources\Sql92.g4 by ANTLR 4.x
package com.laudandjolynn.sqlparser;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class Sql92Parser extends Parser {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__238=1, T__237=2, T__236=3, T__235=4, T__234=5, T__233=6, T__232=7, 
		T__231=8, T__230=9, T__229=10, T__228=11, T__227=12, T__226=13, T__225=14, 
		T__224=15, T__223=16, T__222=17, T__221=18, T__220=19, T__219=20, T__218=21, 
		T__217=22, T__216=23, T__215=24, T__214=25, T__213=26, T__212=27, T__211=28, 
		T__210=29, T__209=30, T__208=31, T__207=32, T__206=33, T__205=34, T__204=35, 
		T__203=36, T__202=37, T__201=38, T__200=39, T__199=40, T__198=41, T__197=42, 
		T__196=43, T__195=44, T__194=45, T__193=46, T__192=47, T__191=48, T__190=49, 
		T__189=50, T__188=51, T__187=52, T__186=53, T__185=54, T__184=55, T__183=56, 
		T__182=57, T__181=58, T__180=59, T__179=60, T__178=61, T__177=62, T__176=63, 
		T__175=64, T__174=65, T__173=66, T__172=67, T__171=68, T__170=69, T__169=70, 
		T__168=71, T__167=72, T__166=73, T__165=74, T__164=75, T__163=76, T__162=77, 
		T__161=78, T__160=79, T__159=80, T__158=81, T__157=82, T__156=83, T__155=84, 
		T__154=85, T__153=86, T__152=87, T__151=88, T__150=89, T__149=90, T__148=91, 
		T__147=92, T__146=93, T__145=94, T__144=95, T__143=96, T__142=97, T__141=98, 
		T__140=99, T__139=100, T__138=101, T__137=102, T__136=103, T__135=104, 
		T__134=105, T__133=106, T__132=107, T__131=108, T__130=109, T__129=110, 
		T__128=111, T__127=112, T__126=113, T__125=114, T__124=115, T__123=116, 
		T__122=117, T__121=118, T__120=119, T__119=120, T__118=121, T__117=122, 
		T__116=123, T__115=124, T__114=125, T__113=126, T__112=127, T__111=128, 
		T__110=129, T__109=130, T__108=131, T__107=132, T__106=133, T__105=134, 
		T__104=135, T__103=136, T__102=137, T__101=138, T__100=139, T__99=140, 
		T__98=141, T__97=142, T__96=143, T__95=144, T__94=145, T__93=146, T__92=147, 
		T__91=148, T__90=149, T__89=150, T__88=151, T__87=152, T__86=153, T__85=154, 
		T__84=155, T__83=156, T__82=157, T__81=158, T__80=159, T__79=160, T__78=161, 
		T__77=162, T__76=163, T__75=164, T__74=165, T__73=166, T__72=167, T__71=168, 
		T__70=169, T__69=170, T__68=171, T__67=172, T__66=173, T__65=174, T__64=175, 
		T__63=176, T__62=177, T__61=178, T__60=179, T__59=180, T__58=181, T__57=182, 
		T__56=183, T__55=184, T__54=185, T__53=186, T__52=187, T__51=188, T__50=189, 
		T__49=190, T__48=191, T__47=192, T__46=193, T__45=194, T__44=195, T__43=196, 
		T__42=197, T__41=198, T__40=199, T__39=200, T__38=201, T__37=202, T__36=203, 
		T__35=204, T__34=205, T__33=206, T__32=207, T__31=208, T__30=209, T__29=210, 
		T__28=211, T__27=212, T__26=213, T__25=214, T__24=215, T__23=216, T__22=217, 
		T__21=218, T__20=219, T__19=220, T__18=221, T__17=222, T__16=223, T__15=224, 
		T__14=225, T__13=226, T__12=227, T__11=228, T__10=229, T__9=230, T__8=231, 
		T__7=232, T__6=233, T__5=234, T__4=235, T__3=236, T__2=237, T__1=238, 
		T__0=239, WHITE_SPACE=240, TAB=241, NEWLINE=242, PLUS_SIGN=243, MINUS_SIGN=244, 
		DOUBLE_QUOTE=245, PERCENT=246, AMPERSAND=247, QUOTE=248, LEFT_PAREN=249, 
		RIGHT_PAREN=250, ASTERISK=251, COMMA=252, PERIOD=253, SOLIDUS=254, COLON=255, 
		SEMICOLON=256, LESS_THAN=257, LESS_THAN_OR_EQ=258, EQ=259, NOT_EQ=260, 
		GREATER_THAN=261, GREATER_THAN_OR_EQ=262, QUESTION_MARK=263, UNDERSCORE=264, 
		VERTICAL_BAR=265, LEFT_BRACKET=266, RIGHT_BRACKET=267, CONCATENATION=268, 
		DOUBLE_PERIOD=269, NULL=270, DEFAULT=271, SOME=272, ANY=273, ALL=274, 
		DISTINCT=275, AVG=276, SUM=277, MIN=278, MAX=279, COUNT=280, SIGNED_INTEGER=281, 
		UNSIGNED_INTEGER=282, DECIMAL_LITERAL=283, APPROXIMATE_NUMERIC_LITERAL=284, 
		TIMESTAMP_STRING=285, DATE_STRING=286, DATE_VALUE=287, TIME_STRING=288, 
		TIME_VALUE=289, INTERVAL_STRING=290, DIGIT=291, ALPHA=292, COMMENT=293, 
		QUOTE_BIT=294, QUOTE_HEX=295, LANGUAGE_NAME=296, QUOTE_STRING=297, SQL_LANGUAGE_IDENTIFIER=298, 
		IDENTIFIER=299;
	public static final String[] tokenNames = {
		"<INVALID>", "'OF'", "'DELETE'", "'SQLSTATE'", "'CURRENT_TIME'", "'IN'", 
		"'LEADING'", "'AND'", "'RETURNED'", "'TABLE'", "'OPEN'", "'X'", "'OVERLAPS'", 
		"'DESC'", "'TRANSLATION'", "'CONDITION'", "'DEFERRED'", "'TEXT'", "'INSERT'", 
		"'INTERSECT'", "'CHECK'", "'CORRESPONDING'", "'DOMAIN'", "'PRIOR'", "'THEN'", 
		"'ALLOCATE'", "'BIT_LENGTH'", "'CROSS'", "'CHARACTER_LENGTH'", "'EXCEPT'", 
		"'FIRST'", "'DECLARE'", "'FOR'", "'IMMEDIATE'", "'USING'", "'BIT'", "'DAY'", 
		"'SCHEMA'", "'COLUMN'", "'SQL'", "'ALTER'", "'UNKNOWN'", "'NUMBER'", "'NULLIF'", 
		"'SCROLL'", "'ISOLATION'", "'OCTET_LENGTH'", "'WHEN'", "'REAL'", "'DESCRIBE'", 
		"'WITH'", "'PREPARE'", "'OCTET'", "'GROUP'", "'MINUTE'", "'TRIM'", "'AUTHORIZATION'", 
		"'SERIALIZABLE'", "'TIMEZONE_MINUTE'", "'WHERE'", "'COMMITTED'", "'WORK'", 
		"'CONSTRAINT'", "'DEFERRABLE'", "'AS'", "'SECOND'", "'ELSE'", "'EXECUTE'", 
		"'SET'", "'HOUR'", "'DECIMAL'", "'COMMAND'", "'ABSOLUTE'", "'DIAGNOSTICS'", 
		"'IS'", "'GET'", "'PRECISION'", "'ESCAPE'", "'NOT'", "'VALUES table_value_constructor_list'", 
		"'INTEGER'", "'TEMPORARY'", "'CATALOG'", "'MATCH'", "'HAVING'", "'VIEW'", 
		"'COLLATE'", "'OR'", "'CLASS'", "'SIZE'", "'DEALLOCATE'", "'SESSION'", 
		"'VALUES'", "'UNNAMED'", "'INTO'", "'DATA'", "'ASSERTION'", "'UPDATE'", 
		"'NULLABLE'", "'ONLY'", "'FUNCTION'", "'OUTPUT'", "'TRANSACTION'", "'REVOKE'", 
		"'MODULE'", "'AT'", "'LANGUAGE'", "'UNIQUE'", "'RESTRICT'", "'PAD'", "'CODE'", 
		"'UNION'", "'END'", "'GLOBAL'", "'N'", "'BETWEEN'", "'CHAR_LENGTH'", "'COALESCE'", 
		"'VALUE'", "'CURRENT'", "'TRUE'", "'CASE'", "'REPEATABLE'", "'DEC'", "'YEAR'", 
		"'INNER'", "'CHARACTER'", "'CHAR'", "'MONTH'", "'ADD'", "'CASCADE'", "'EXTERNAL'", 
		"'DATETIME'", "'REFERENCES'", "'SQLCODE'", "'OUTER'", "'SCALE'", "'CURRENT_USER'", 
		"'\"\"'", "'DROP'", "'FROM'", "'SYSTEM_USER'", "'CAST'", "'BOTH'", "'SESSION_USER'", 
		"'TO'", "'BY'", "'MESSAGE'", "'READ'", "'TIME'", "'FOREIGN'", "'UPPER'", 
		"'DATE'", "'EXTRACT'", "'JOIN'", "'FALSE'", "'VARCHAR'", "'NO'", "'NATURAL'", 
		"'PROCEDURE'", "'POSITION'", "'INPUT'", "'LEFT'", "'SMALLINT'", "'PRIVILEGES'", 
		"'OPTION'", "'CREATE'", "'USAGE'", "'ON'", "'ROWS'", "'INTERVAL'", "'DOUBLE'", 
		"'PRESERVE'", "'NAMES'", "'TRANSLATE'", "'SERVER'", "'DISCONNECT'", "'RIGHT'", 
		"'DESCRIPTOR'", "'COLLATION'", "'NATIONAL'", "'GLOABL'", "'CONNECTION'", 
		"'ROLLBACK'", "'PRIMARY'", "'UNCOMMITTED'", "'CURRENT_DATE'", "'TRAILING'", 
		"'ORDER'", "'PARTIAL'", "'MORE'", "'TIMESTAMP'", "'IMMEDATE'", "'NCHAR'", 
		"'DYNAMIC'", "'INITIALLY'", "'ORIGIN'", "'LOWWER'", "'ROW'", "'NEXT'", 
		"'COMMIT'", "'INSENSITIVE'", "'CURRENT_TIMESTAMP'", "'FLOAT'", "'LIKE'", 
		"'CASCADED'", "'SELECT'", "'INT'", "'TYPE'", "'EXISTS'", "'EXCEPTION'", 
		"'ASC'", "'NUMERIC'", "'TIMEZONE_HOUR'", "'GRANT'", "'CLOSE'", "'ACTION'", 
		"'FULL'", "'LOCAL'", "'USER'", "'VARYING'", "'ZONE'", "'INDICATOR'", "'ARE'", 
		"'LENGTH'", "'WRITE'", "'LAST'", "'NAME'", "'CONNECT'", "'SPACE'", "'SUBCLASS'", 
		"'LEVEL'", "'B'", "'RELATIVE'", "'KEY'", "'SUBSTRING'", "'IDENTITY'", 
		"'FETCH'", "'CURSOR'", "'PUBLIC'", "' '", "'\t'", "NEWLINE", "'+'", "'-'", 
		"'\"'", "'%'", "'&'", "'''", "'('", "')'", "'*'", "','", "'.'", "'/'", 
		"':'", "';'", "'<'", "'<='", "'='", "NOT_EQ", "'>'", "'>='", "'?'", "'_'", 
		"'|'", "'['", "']'", "'||'", "'..'", "'NULL'", "'DEFAULT'", "'SOME'", 
		"'ANY'", "'ALL'", "'DISTINCT'", "'AVG'", "'SUM'", "'MIN'", "'MAX'", "'COUNT'", 
		"SIGNED_INTEGER", "UNSIGNED_INTEGER", "DECIMAL_LITERAL", "APPROXIMATE_NUMERIC_LITERAL", 
		"TIMESTAMP_STRING", "DATE_STRING", "DATE_VALUE", "TIME_STRING", "TIME_VALUE", 
		"INTERVAL_STRING", "DIGIT", "ALPHA", "COMMENT", "QUOTE_BIT", "QUOTE_HEX", 
		"LANGUAGE_NAME", "QUOTE_STRING", "SQL_LANGUAGE_IDENTIFIER", "IDENTIFIER"
	};
	public static final int
		RULE_prog = 0, RULE_statement = 1, RULE_sql_schema_statement = 2, RULE_sql_schema_definition_statement = 3, 
		RULE_schema_definition = 4, RULE_schema_name_clause = 5, RULE_schema_authorization_identifier = 6, 
		RULE_schema_character_set_specification = 7, RULE_schema_character_set_name = 8, 
		RULE_schema_element = 9, RULE_table_definition = 10, RULE_view_definition = 11, 
		RULE_view_column_list = 12, RULE_levels_clause = 13, RULE_domain_definition = 14, 
		RULE_domain_constraint = 15, RULE_assertion_definition = 16, RULE_assertion_check = 17, 
		RULE_character_set_definition = 18, RULE_character_set_source = 19, RULE_existing_character_set_name = 20, 
		RULE_grant_definition = 21, RULE_privileges = 22, RULE_action_list = 23, 
		RULE_action = 24, RULE_privileges_column_list = 25, RULE_object_name = 26, 
		RULE_grantee = 27, RULE_collation_definition = 28, RULE_collation_source = 29, 
		RULE_collation_sequence_definition = 30, RULE_external_collation = 31, 
		RULE_external_collation_name = 32, RULE_standard_collation_name = 33, 
		RULE_implementation_defined_collation_name = 34, RULE_schema_collation_name = 35, 
		RULE_translation_collation = 36, RULE_limited_collation_definition = 37, 
		RULE_pad_attribute = 38, RULE_translation_definition = 39, RULE_source_character_set_specification = 40, 
		RULE_target_character_set_specification = 41, RULE_translation_source = 42, 
		RULE_translation_specification = 43, RULE_external_translation = 44, RULE_external_translation_name = 45, 
		RULE_standard_translation_name = 46, RULE_implementation_defined_translation_name = 47, 
		RULE_schema_translation_name = 48, RULE_sql_schema_manipulation_statement = 49, 
		RULE_drop_schema_statement = 50, RULE_drop_behaviour = 51, RULE_alter_table_statement = 52, 
		RULE_alter_table_action = 53, RULE_add_column_definition = 54, RULE_add_table_constraint_definition = 55, 
		RULE_alter_column_definition = 56, RULE_alter_column_action = 57, RULE_set_column_default_clause = 58, 
		RULE_drop_column_default_clause = 59, RULE_drop_column_definition = 60, 
		RULE_drop_table_constraint_definition = 61, RULE_drop_table_statement = 62, 
		RULE_drop_view_statement = 63, RULE_revoke_statement = 64, RULE_drop_domain_statement = 65, 
		RULE_drop_character_set_statement = 66, RULE_drop_collation_statement = 67, 
		RULE_drop_translation_statement = 68, RULE_drop_assertion_statement = 69, 
		RULE_alter_domain_statement = 70, RULE_alter_domain_action = 71, RULE_set_domain_default_clause = 72, 
		RULE_drop_domain_default_clause = 73, RULE_add_domain_constraint_definition = 74, 
		RULE_drop_domain_constraint_definition = 75, RULE_sql_data_statement = 76, 
		RULE_open_statement = 77, RULE_fetch_statement = 78, RULE_fetch_orientation = 79, 
		RULE_simple_value_specification = 80, RULE_fetch_target_list = 81, RULE_target_specification = 82, 
		RULE_close_statement = 83, RULE_select_into_statement = 84, RULE_select_statement = 85, 
		RULE_select_list = 86, RULE_select_sublists = 87, RULE_select_sublist = 88, 
		RULE_derived_column = 89, RULE_select_target_list = 90, RULE_table_expression = 91, 
		RULE_from_clause = 92, RULE_table_reference = 93, RULE_normal_table = 94, 
		RULE_joined_table = 95, RULE_correlation_specification = 96, RULE_derived_column_list = 97, 
		RULE_derived_table = 98, RULE_join_type = 99, RULE_outer_join_type = 100, 
		RULE_join_specification = 101, RULE_join_condition = 102, RULE_named_columns_join = 103, 
		RULE_join_column_list = 104, RULE_where_clause = 105, RULE_having_clause = 106, 
		RULE_sql_data_change_statement = 107, RULE_delete_statement_positioned = 108, 
		RULE_delete_statement_searched = 109, RULE_insert_statement = 110, RULE_insert_columns_and_source = 111, 
		RULE_insert_column_list = 112, RULE_update_statement_position = 113, RULE_set_clause_list = 114, 
		RULE_set_clause = 115, RULE_object_column = 116, RULE_update_source = 117, 
		RULE_update_statement_searched = 118, RULE_sql_transaction_statement = 119, 
		RULE_set_transaction_statement = 120, RULE_trasaction_mode = 121, RULE_isolation_level = 122, 
		RULE_level_of_isolation = 123, RULE_transaction_access_mode = 124, RULE_diagnostics_size = 125, 
		RULE_number_of_conditions = 126, RULE_set_constraints_mode_statement = 127, 
		RULE_constraint_name_list = 128, RULE_commit_statement = 129, RULE_rollback_statement = 130, 
		RULE_sql_connection_statement = 131, RULE_connect_statement = 132, RULE_connection_target = 133, 
		RULE_sql_server_name = 134, RULE_connection_name = 135, RULE_user_name = 136, 
		RULE_set_connection_statement = 137, RULE_connection_object = 138, RULE_disconnect_statement = 139, 
		RULE_disconnect_object = 140, RULE_sql_session_statement = 141, RULE_set_catalog_statement = 142, 
		RULE_value_specification = 143, RULE_set_schema_statement = 144, RULE_set_names_statement = 145, 
		RULE_set_session_authorization_identifier_statement = 146, RULE_set_local_time_zone_statement = 147, 
		RULE_set_time_zone_value = 148, RULE_sql_dynamic_statement = 149, RULE_system_descriptor_statement = 150, 
		RULE_allocate_descriptor_statement = 151, RULE_descriptor_name = 152, 
		RULE_scope_option = 153, RULE_occurences = 154, RULE_deallocate_descriptor_statement = 155, 
		RULE_set_descriptor_statement = 156, RULE_set_descriptor_information = 157, 
		RULE_set_count = 158, RULE_simple_value_specification_1 = 159, RULE_item_number = 160, 
		RULE_set_item_information = 161, RULE_descriptor_item_name = 162, RULE_simple_value_specification_2 = 163, 
		RULE_get_descriptor_statement = 164, RULE_get_descriptor_information = 165, 
		RULE_get_count = 166, RULE_simple_target_specification_1 = 167, RULE_get_item_information = 168, 
		RULE_simple_target_specification_2 = 169, RULE_prepare_statement = 170, 
		RULE_sql_statement_name = 171, RULE_extended_statement_name = 172, RULE_sql_statement_variable = 173, 
		RULE_deallocate_prepared_statement = 174, RULE_describe_statement = 175, 
		RULE_describe_input_statement = 176, RULE_using_descriptor = 177, RULE_describe_output_statement = 178, 
		RULE_execute_statement = 179, RULE_result_using_clause = 180, RULE_parameter_using_clause = 181, 
		RULE_using_clause = 182, RULE_using_arguments = 183, RULE_argument = 184, 
		RULE_execute_immediate_statemnet = 185, RULE_sql_dynamic_data_statement = 186, 
		RULE_allocate_cursor_statement = 187, RULE_extended_cursor_name = 188, 
		RULE_dynamic_open_statement = 189, RULE_dynamic_cursor_name = 190, RULE_dynamic_close_statement = 191, 
		RULE_dynamic_fetch_statement = 192, RULE_dynamic_delete_statement_positioned = 193, 
		RULE_dynamic_update_statement_positioned = 194, RULE_sql_diagnostics_statement = 195, 
		RULE_get_diagnostics_statement = 196, RULE_sql_diagnostics_information = 197, 
		RULE_statement_information = 198, RULE_statement_information_item = 199, 
		RULE_statement_information_item_name = 200, RULE_condition_information = 201, 
		RULE_condition_number = 202, RULE_condition_information_item = 203, RULE_condition_information_item_name = 204, 
		RULE_subquery = 205, RULE_query_expression = 206, RULE_non_join_query_expression = 207, 
		RULE_query_set_rel = 208, RULE_query_primary = 209, RULE_query_term = 210, 
		RULE_query_intersect_rel = 211, RULE_corresponding_spec = 212, RULE_corresponding_column_list = 213, 
		RULE_simple_table = 214, RULE_query_specification = 215, RULE_table_value_constructor = 216, 
		RULE_table_value_constructor_list = 217, RULE_explicit_table = 218, RULE_table_element_list = 219, 
		RULE_table_element = 220, RULE_column_definition = 221, RULE_column_constraint_definition = 222, 
		RULE_column_constraint = 223, RULE_check_constraint_definition = 224, 
		RULE_table_constraint_definition = 225, RULE_table_constraint = 226, RULE_search_condition = 227, 
		RULE_predicate = 228, RULE_comparision_predicate = 229, RULE_between_predicate = 230, 
		RULE_in_predicate = 231, RULE_in_predicate_value = 232, RULE_in_value_list = 233, 
		RULE_like_predicate = 234, RULE_match_value = 235, RULE_pattern = 236, 
		RULE_escape_character = 237, RULE_null_predicate = 238, RULE_quantified_comparision_predicate = 239, 
		RULE_exists_predicate = 240, RULE_table_subquery = 241, RULE_match_predicate = 242, 
		RULE_overlaps_predicate = 243, RULE_row_value_constructor = 244, RULE_row_value_constructor_element = 245, 
		RULE_row_value_constructor_list = 246, RULE_row_subquery = 247, RULE_value_expression = 248, 
		RULE_numeric_value_expression = 249, RULE_term = 250, RULE_factor = 251, 
		RULE_numeric_primary = 252, RULE_value_expression_primary = 253, RULE_set_function_specification = 254, 
		RULE_general_set_function = 255, RULE_scalar_subquery = 256, RULE_case_expression = 257, 
		RULE_cast_specification = 258, RULE_string_value_expression = 259, RULE_datetime_value_expression = 260, 
		RULE_interval_value_expression = 261, RULE_datetime_term = 262, RULE_datetime_factor = 263, 
		RULE_datetime_primary = 264, RULE_time_zone = 265, RULE_time_zone_specifier = 266, 
		RULE_interval_term = 267, RULE_interval_factor = 268, RULE_interval_primary = 269, 
		RULE_case_abbreviation = 270, RULE_case_specification = 271, RULE_simple_case = 272, 
		RULE_searched_case = 273, RULE_case_operand = 274, RULE_simple_when_clause = 275, 
		RULE_else_clause = 276, RULE_when_operand = 277, RULE_result = 278, RULE_result_expression = 279, 
		RULE_searched_when_clause = 280, RULE_cast_operand = 281, RULE_numeric_value_function = 282, 
		RULE_position_expression = 283, RULE_extract_expression = 284, RULE_extract_source = 285, 
		RULE_length_expression = 286, RULE_char_length_expression = 287, RULE_octet_length_expression = 288, 
		RULE_bit_length_expression = 289, RULE_character_value_expression = 290, 
		RULE_character_factor = 291, RULE_character_primary = 292, RULE_string_value_function = 293, 
		RULE_character_value_function = 294, RULE_bit_value_function = 295, RULE_character_substring_function = 296, 
		RULE_start_position = 297, RULE_string_length = 298, RULE_fold = 299, 
		RULE_character_translation = 300, RULE_trim_function = 301, RULE_trim_operands = 302, 
		RULE_trim_character = 303, RULE_trim_source = 304, RULE_bit_substring_function = 305, 
		RULE_bit_value_expression = 306, RULE_bit_factor = 307, RULE_bit_primary = 308, 
		RULE_procedure = 309, RULE_procedure_name = 310, RULE_parameter_declaration_list = 311, 
		RULE_parameter_declaration = 312, RULE_status_parameter = 313, RULE_sql_procedure_statement = 314, 
		RULE_module = 315, RULE_module_contents = 316, RULE_module_name_clause = 317, 
		RULE_module_name = 318, RULE_module_character_set_specification = 319, 
		RULE_module_authorization_clause = 320, RULE_module_authorization_identifier = 321, 
		RULE_temporary_table_declaration = 322, RULE_declare_cursor = 323, RULE_cursor_specification = 324, 
		RULE_dynamic_declare_cursor = 325, RULE_identifier = 326, RULE_actual_identifier = 327, 
		RULE_regular_identifier = 328, RULE_identifier_body = 329, RULE_identifier_start = 330, 
		RULE_identifier_part = 331, RULE_delimited_identifier = 332, RULE_delimited_identifier_body = 333, 
		RULE_delimited_identifier_part = 334, RULE_schema_name = 335, RULE_catalog_name = 336, 
		RULE_unqualified_schema_name = 337, RULE_character_string_literal = 338, 
		RULE_character_set_name = 339, RULE_character_set_specification = 340, 
		RULE_standard_character_repertoire_name = 341, RULE_implementation_defined_character_repertoire_name = 342, 
		RULE_user_defined_character_repertoire_name = 343, RULE_standard_universal_character_form_of_use_name = 344, 
		RULE_implementation_defined_universal_character_form_of_use_name = 345, 
		RULE_table_name = 346, RULE_constraint_name_definition = 347, RULE_constraint_name = 348, 
		RULE_unique_specification = 349, RULE_references_specification = 350, 
		RULE_referenced_table_and_columns = 351, RULE_reference_column_list = 352, 
		RULE_match_type = 353, RULE_referential_triggered_action = 354, RULE_update_rule = 355, 
		RULE_delete_rule = 356, RULE_referential_action = 357, RULE_constraint_attributes = 358, 
		RULE_constraint_check_time = 359, RULE_unique_constraint_definition = 360, 
		RULE_unique_column_list = 361, RULE_referential_constraint_definition = 362, 
		RULE_referencing_columns = 363, RULE_collate_clause = 364, RULE_collation_name = 365, 
		RULE_as_clause = 366, RULE_group_by_clause = 367, RULE_grouping_column_reference_list = 368, 
		RULE_grouping_column_reference = 369, RULE_order_by_clause = 370, RULE_sort_specification_list = 371, 
		RULE_sort_specification = 372, RULE_sort_key = 373, RULE_ordering_specification = 374, 
		RULE_updatability_clause = 375, RULE_default_clause = 376, RULE_default_option = 377, 
		RULE_literal = 378, RULE_unsigned_literal = 379, RULE_general_literal = 380, 
		RULE_national_character_string_literal = 381, RULE_bit_string_literal = 382, 
		RULE_hex_string_literal = 383, RULE_datetime_literal = 384, RULE_date_literal = 385, 
		RULE_time_literal = 386, RULE_timestamp_literal = 387, RULE_interval_literal = 388, 
		RULE_datetime_value_function = 389, RULE_current_date_value_function = 390, 
		RULE_current_time_value_function = 391, RULE_current_timestamp_value_function = 392, 
		RULE_column_name = 393, RULE_column_name_list = 394, RULE_data_type = 395, 
		RULE_character_string_type = 396, RULE_national_character_string_type = 397, 
		RULE_bit_string_type = 398, RULE_numeric_type = 399, RULE_exact_numeric_type = 400, 
		RULE_approximate_numeric_type = 401, RULE_datetime_type = 402, RULE_time_fractional_seconds_precision = 403, 
		RULE_time_precision = 404, RULE_timestamp_precision = 405, RULE_interval_type = 406, 
		RULE_interval_qualifier = 407, RULE_start_field = 408, RULE_non_second_datetime_field = 409, 
		RULE_interval_leading_field_precision = 410, RULE_end_field = 411, RULE_interval_fractional_seconds_precision = 412, 
		RULE_sigle_datetime_field = 413, RULE_general_value_specification = 414, 
		RULE_parameter_specification = 415, RULE_indicator_parameter = 416, RULE_dynamic_parameter_specification = 417, 
		RULE_variable_specification = 418, RULE_indicator_variable = 419, RULE_embedded_variable_name = 420, 
		RULE_host_identifier = 421, RULE_general_identifier = 422, RULE_ada_host_identifier = 423, 
		RULE_c_host_identifier = 424, RULE_cobol_host_identifier = 425, RULE_fortran_host_identifier = 426, 
		RULE_mumps_host_identifier = 427, RULE_pascal_host_identifier = 428, RULE_pli_host_identifier = 429, 
		RULE_simple_target_specification = 430, RULE_unsigned_value_specification = 431, 
		RULE_language_clause = 432, RULE_extract_field = 433, RULE_datetime_field = 434, 
		RULE_time_zone_field = 435, RULE_cast_target = 436, RULE_trim_specification = 437, 
		RULE_truth_value = 438, RULE_null_specification = 439, RULE_default_specification = 440, 
		RULE_comp_op = 441, RULE_set_function_type = 442, RULE_set_qualifier = 443, 
		RULE_quantifier = 444, RULE_all = 445, RULE_some = 446, RULE_length = 447, 
		RULE_precision = 448, RULE_scale = 449, RULE_authorization_identifier = 450, 
		RULE_cursor_name = 451, RULE_correlation_name = 452, RULE_statement_name = 453, 
		RULE_qualified_identifier = 454, RULE_local_table_name = 455, RULE_qualifier = 456, 
		RULE_qualified_local_table_name = 457, RULE_column_reference = 458, RULE_domain_name = 459, 
		RULE_qualified_name = 460, RULE_parameter_name = 461, RULE_form_of_use_conversion = 462, 
		RULE_translation_name = 463, RULE_nondoublequote_character = 464, RULE_doublequote_symbol = 465, 
		RULE_sign = 466, RULE_seperator = 467;
	public static final String[] ruleNames = {
		"prog", "statement", "sql_schema_statement", "sql_schema_definition_statement", 
		"schema_definition", "schema_name_clause", "schema_authorization_identifier", 
		"schema_character_set_specification", "schema_character_set_name", "schema_element", 
		"table_definition", "view_definition", "view_column_list", "levels_clause", 
		"domain_definition", "domain_constraint", "assertion_definition", "assertion_check", 
		"character_set_definition", "character_set_source", "existing_character_set_name", 
		"grant_definition", "privileges", "action_list", "action", "privileges_column_list", 
		"object_name", "grantee", "collation_definition", "collation_source", 
		"collation_sequence_definition", "external_collation", "external_collation_name", 
		"standard_collation_name", "implementation_defined_collation_name", "schema_collation_name", 
		"translation_collation", "limited_collation_definition", "pad_attribute", 
		"translation_definition", "source_character_set_specification", "target_character_set_specification", 
		"translation_source", "translation_specification", "external_translation", 
		"external_translation_name", "standard_translation_name", "implementation_defined_translation_name", 
		"schema_translation_name", "sql_schema_manipulation_statement", "drop_schema_statement", 
		"drop_behaviour", "alter_table_statement", "alter_table_action", "add_column_definition", 
		"add_table_constraint_definition", "alter_column_definition", "alter_column_action", 
		"set_column_default_clause", "drop_column_default_clause", "drop_column_definition", 
		"drop_table_constraint_definition", "drop_table_statement", "drop_view_statement", 
		"revoke_statement", "drop_domain_statement", "drop_character_set_statement", 
		"drop_collation_statement", "drop_translation_statement", "drop_assertion_statement", 
		"alter_domain_statement", "alter_domain_action", "set_domain_default_clause", 
		"drop_domain_default_clause", "add_domain_constraint_definition", "drop_domain_constraint_definition", 
		"sql_data_statement", "open_statement", "fetch_statement", "fetch_orientation", 
		"simple_value_specification", "fetch_target_list", "target_specification", 
		"close_statement", "select_into_statement", "select_statement", "select_list", 
		"select_sublists", "select_sublist", "derived_column", "select_target_list", 
		"table_expression", "from_clause", "table_reference", "normal_table", 
		"joined_table", "correlation_specification", "derived_column_list", "derived_table", 
		"join_type", "outer_join_type", "join_specification", "join_condition", 
		"named_columns_join", "join_column_list", "where_clause", "having_clause", 
		"sql_data_change_statement", "delete_statement_positioned", "delete_statement_searched", 
		"insert_statement", "insert_columns_and_source", "insert_column_list", 
		"update_statement_position", "set_clause_list", "set_clause", "object_column", 
		"update_source", "update_statement_searched", "sql_transaction_statement", 
		"set_transaction_statement", "trasaction_mode", "isolation_level", "level_of_isolation", 
		"transaction_access_mode", "diagnostics_size", "number_of_conditions", 
		"set_constraints_mode_statement", "constraint_name_list", "commit_statement", 
		"rollback_statement", "sql_connection_statement", "connect_statement", 
		"connection_target", "sql_server_name", "connection_name", "user_name", 
		"set_connection_statement", "connection_object", "disconnect_statement", 
		"disconnect_object", "sql_session_statement", "set_catalog_statement", 
		"value_specification", "set_schema_statement", "set_names_statement", 
		"set_session_authorization_identifier_statement", "set_local_time_zone_statement", 
		"set_time_zone_value", "sql_dynamic_statement", "system_descriptor_statement", 
		"allocate_descriptor_statement", "descriptor_name", "scope_option", "occurences", 
		"deallocate_descriptor_statement", "set_descriptor_statement", "set_descriptor_information", 
		"set_count", "simple_value_specification_1", "item_number", "set_item_information", 
		"descriptor_item_name", "simple_value_specification_2", "get_descriptor_statement", 
		"get_descriptor_information", "get_count", "simple_target_specification_1", 
		"get_item_information", "simple_target_specification_2", "prepare_statement", 
		"sql_statement_name", "extended_statement_name", "sql_statement_variable", 
		"deallocate_prepared_statement", "describe_statement", "describe_input_statement", 
		"using_descriptor", "describe_output_statement", "execute_statement", 
		"result_using_clause", "parameter_using_clause", "using_clause", "using_arguments", 
		"argument", "execute_immediate_statemnet", "sql_dynamic_data_statement", 
		"allocate_cursor_statement", "extended_cursor_name", "dynamic_open_statement", 
		"dynamic_cursor_name", "dynamic_close_statement", "dynamic_fetch_statement", 
		"dynamic_delete_statement_positioned", "dynamic_update_statement_positioned", 
		"sql_diagnostics_statement", "get_diagnostics_statement", "sql_diagnostics_information", 
		"statement_information", "statement_information_item", "statement_information_item_name", 
		"condition_information", "condition_number", "condition_information_item", 
		"condition_information_item_name", "subquery", "query_expression", "non_join_query_expression", 
		"query_set_rel", "query_primary", "query_term", "query_intersect_rel", 
		"corresponding_spec", "corresponding_column_list", "simple_table", "query_specification", 
		"table_value_constructor", "table_value_constructor_list", "explicit_table", 
		"table_element_list", "table_element", "column_definition", "column_constraint_definition", 
		"column_constraint", "check_constraint_definition", "table_constraint_definition", 
		"table_constraint", "search_condition", "predicate", "comparision_predicate", 
		"between_predicate", "in_predicate", "in_predicate_value", "in_value_list", 
		"like_predicate", "match_value", "pattern", "escape_character", "null_predicate", 
		"quantified_comparision_predicate", "exists_predicate", "table_subquery", 
		"match_predicate", "overlaps_predicate", "row_value_constructor", "row_value_constructor_element", 
		"row_value_constructor_list", "row_subquery", "value_expression", "numeric_value_expression", 
		"term", "factor", "numeric_primary", "value_expression_primary", "set_function_specification", 
		"general_set_function", "scalar_subquery", "case_expression", "cast_specification", 
		"string_value_expression", "datetime_value_expression", "interval_value_expression", 
		"datetime_term", "datetime_factor", "datetime_primary", "time_zone", "time_zone_specifier", 
		"interval_term", "interval_factor", "interval_primary", "case_abbreviation", 
		"case_specification", "simple_case", "searched_case", "case_operand", 
		"simple_when_clause", "else_clause", "when_operand", "result", "result_expression", 
		"searched_when_clause", "cast_operand", "numeric_value_function", "position_expression", 
		"extract_expression", "extract_source", "length_expression", "char_length_expression", 
		"octet_length_expression", "bit_length_expression", "character_value_expression", 
		"character_factor", "character_primary", "string_value_function", "character_value_function", 
		"bit_value_function", "character_substring_function", "start_position", 
		"string_length", "fold", "character_translation", "trim_function", "trim_operands", 
		"trim_character", "trim_source", "bit_substring_function", "bit_value_expression", 
		"bit_factor", "bit_primary", "procedure", "procedure_name", "parameter_declaration_list", 
		"parameter_declaration", "status_parameter", "sql_procedure_statement", 
		"module", "module_contents", "module_name_clause", "module_name", "module_character_set_specification", 
		"module_authorization_clause", "module_authorization_identifier", "temporary_table_declaration", 
		"declare_cursor", "cursor_specification", "dynamic_declare_cursor", "identifier", 
		"actual_identifier", "regular_identifier", "identifier_body", "identifier_start", 
		"identifier_part", "delimited_identifier", "delimited_identifier_body", 
		"delimited_identifier_part", "schema_name", "catalog_name", "unqualified_schema_name", 
		"character_string_literal", "character_set_name", "character_set_specification", 
		"standard_character_repertoire_name", "implementation_defined_character_repertoire_name", 
		"user_defined_character_repertoire_name", "standard_universal_character_form_of_use_name", 
		"implementation_defined_universal_character_form_of_use_name", "table_name", 
		"constraint_name_definition", "constraint_name", "unique_specification", 
		"references_specification", "referenced_table_and_columns", "reference_column_list", 
		"match_type", "referential_triggered_action", "update_rule", "delete_rule", 
		"referential_action", "constraint_attributes", "constraint_check_time", 
		"unique_constraint_definition", "unique_column_list", "referential_constraint_definition", 
		"referencing_columns", "collate_clause", "collation_name", "as_clause", 
		"group_by_clause", "grouping_column_reference_list", "grouping_column_reference", 
		"order_by_clause", "sort_specification_list", "sort_specification", "sort_key", 
		"ordering_specification", "updatability_clause", "default_clause", "default_option", 
		"literal", "unsigned_literal", "general_literal", "national_character_string_literal", 
		"bit_string_literal", "hex_string_literal", "datetime_literal", "date_literal", 
		"time_literal", "timestamp_literal", "interval_literal", "datetime_value_function", 
		"current_date_value_function", "current_time_value_function", "current_timestamp_value_function", 
		"column_name", "column_name_list", "data_type", "character_string_type", 
		"national_character_string_type", "bit_string_type", "numeric_type", "exact_numeric_type", 
		"approximate_numeric_type", "datetime_type", "time_fractional_seconds_precision", 
		"time_precision", "timestamp_precision", "interval_type", "interval_qualifier", 
		"start_field", "non_second_datetime_field", "interval_leading_field_precision", 
		"end_field", "interval_fractional_seconds_precision", "sigle_datetime_field", 
		"general_value_specification", "parameter_specification", "indicator_parameter", 
		"dynamic_parameter_specification", "variable_specification", "indicator_variable", 
		"embedded_variable_name", "host_identifier", "general_identifier", "ada_host_identifier", 
		"c_host_identifier", "cobol_host_identifier", "fortran_host_identifier", 
		"mumps_host_identifier", "pascal_host_identifier", "pli_host_identifier", 
		"simple_target_specification", "unsigned_value_specification", "language_clause", 
		"extract_field", "datetime_field", "time_zone_field", "cast_target", "trim_specification", 
		"truth_value", "null_specification", "default_specification", "comp_op", 
		"set_function_type", "set_qualifier", "quantifier", "all", "some", "length", 
		"precision", "scale", "authorization_identifier", "cursor_name", "correlation_name", 
		"statement_name", "qualified_identifier", "local_table_name", "qualifier", 
		"qualified_local_table_name", "column_reference", "domain_name", "qualified_name", 
		"parameter_name", "form_of_use_conversion", "translation_name", "nondoublequote_character", 
		"doublequote_symbol", "sign", "seperator"
	};

	@Override
	public String getGrammarFileName() { return "Sql92.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public Sql92Parser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ProgContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode EOF() { return getToken(Sql92Parser.EOF, 0); }
		public List<TerminalNode> SEMICOLON() { return getTokens(Sql92Parser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(Sql92Parser.SEMICOLON, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterProg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitProg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitProg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgContext prog() throws RecognitionException {
		ProgContext _localctx = new ProgContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(936); statement();
			setState(940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				setState(937); match(SEMICOLON);
				}
				}
				setState(942);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(943); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Sql_schema_statementContext sql_schema_statement() {
			return getRuleContext(Sql_schema_statementContext.class,0);
		}
		public Sql_dynamic_statementContext sql_dynamic_statement() {
			return getRuleContext(Sql_dynamic_statementContext.class,0);
		}
		public Sql_transaction_statementContext sql_transaction_statement() {
			return getRuleContext(Sql_transaction_statementContext.class,0);
		}
		public Sql_session_statementContext sql_session_statement() {
			return getRuleContext(Sql_session_statementContext.class,0);
		}
		public Sql_connection_statementContext sql_connection_statement() {
			return getRuleContext(Sql_connection_statementContext.class,0);
		}
		public Sql_diagnostics_statementContext sql_diagnostics_statement() {
			return getRuleContext(Sql_diagnostics_statementContext.class,0);
		}
		public Sql_data_statementContext sql_data_statement() {
			return getRuleContext(Sql_data_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			setState(952);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(945); sql_schema_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(946); sql_data_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(947); sql_transaction_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(948); sql_connection_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(949); sql_session_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(950); sql_dynamic_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(951); sql_diagnostics_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_schema_statementContext extends ParserRuleContext {
		public Sql_schema_manipulation_statementContext sql_schema_manipulation_statement() {
			return getRuleContext(Sql_schema_manipulation_statementContext.class,0);
		}
		public Sql_schema_definition_statementContext sql_schema_definition_statement() {
			return getRuleContext(Sql_schema_definition_statementContext.class,0);
		}
		public Sql_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_schema_statementContext sql_schema_statement() throws RecognitionException {
		Sql_schema_statementContext _localctx = new Sql_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_schema_statement);
		try {
			setState(956);
			switch (_input.LA(1)) {
			case T__73:
			case T__25:
				enterOuterAlt(_localctx, 1);
				{
				setState(954); sql_schema_definition_statement();
				}
				break;
			case T__199:
			case T__136:
			case T__100:
				enterOuterAlt(_localctx, 2);
				{
				setState(955); sql_schema_manipulation_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_schema_definition_statementContext extends ParserRuleContext {
		public Domain_definitionContext domain_definition() {
			return getRuleContext(Domain_definitionContext.class,0);
		}
		public Table_definitionContext table_definition() {
			return getRuleContext(Table_definitionContext.class,0);
		}
		public Collation_definitionContext collation_definition() {
			return getRuleContext(Collation_definitionContext.class,0);
		}
		public View_definitionContext view_definition() {
			return getRuleContext(View_definitionContext.class,0);
		}
		public Translation_definitionContext translation_definition() {
			return getRuleContext(Translation_definitionContext.class,0);
		}
		public Character_set_definitionContext character_set_definition() {
			return getRuleContext(Character_set_definitionContext.class,0);
		}
		public Grant_definitionContext grant_definition() {
			return getRuleContext(Grant_definitionContext.class,0);
		}
		public Assertion_definitionContext assertion_definition() {
			return getRuleContext(Assertion_definitionContext.class,0);
		}
		public Schema_definitionContext schema_definition() {
			return getRuleContext(Schema_definitionContext.class,0);
		}
		public Sql_schema_definition_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_schema_definition_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_schema_definition_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_schema_definition_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_schema_definition_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_schema_definition_statementContext sql_schema_definition_statement() throws RecognitionException {
		Sql_schema_definition_statementContext _localctx = new Sql_schema_definition_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_schema_definition_statement);
		try {
			setState(967);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(958); schema_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(959); table_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(960); view_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(961); grant_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(962); domain_definition();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(963); character_set_definition();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(964); collation_definition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(965); translation_definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(966); assertion_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_definitionContext extends ParserRuleContext {
		public Schema_elementContext schema_element(int i) {
			return getRuleContext(Schema_elementContext.class,i);
		}
		public List<Schema_elementContext> schema_element() {
			return getRuleContexts(Schema_elementContext.class);
		}
		public Schema_character_set_specificationContext schema_character_set_specification() {
			return getRuleContext(Schema_character_set_specificationContext.class,0);
		}
		public Schema_name_clauseContext schema_name_clause() {
			return getRuleContext(Schema_name_clauseContext.class,0);
		}
		public Schema_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_definitionContext schema_definition() throws RecognitionException {
		Schema_definitionContext _localctx = new Schema_definitionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_schema_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(969); match(T__73);
			setState(970); match(T__202);
			setState(971); schema_name_clause();
			setState(973);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(972); schema_character_set_specification();
				}
			}

			setState(976); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(975); schema_element();
				}
				}
				setState(978); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__73 || _la==T__25 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_name_clauseContext extends ParserRuleContext {
		public Schema_authorization_identifierContext schema_authorization_identifier() {
			return getRuleContext(Schema_authorization_identifierContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Schema_name_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_name_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_name_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_name_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_name_clauseContext schema_name_clause() throws RecognitionException {
		Schema_name_clauseContext _localctx = new Schema_name_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_schema_name_clause);
		try {
			setState(987);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(980); schema_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(981); match(T__183);
				setState(982); schema_authorization_identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(983); schema_name();
				setState(984); match(T__183);
				setState(985); schema_authorization_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_authorization_identifierContext extends ParserRuleContext {
		public Authorization_identifierContext authorization_identifier() {
			return getRuleContext(Authorization_identifierContext.class,0);
		}
		public Schema_authorization_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_authorization_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_authorization_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_authorization_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_authorization_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_authorization_identifierContext schema_authorization_identifier() throws RecognitionException {
		Schema_authorization_identifierContext _localctx = new Schema_authorization_identifierContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_schema_authorization_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(989); authorization_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_character_set_specificationContext extends ParserRuleContext {
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Schema_character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_character_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_character_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_character_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_character_set_specificationContext schema_character_set_specification() throws RecognitionException {
		Schema_character_set_specificationContext _localctx = new Schema_character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_schema_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(991); match(DEFAULT);
			setState(992); match(T__113);
			setState(993); match(T__171);
			setState(994); character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_character_set_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Schema_character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_character_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_character_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_character_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_character_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_character_set_nameContext schema_character_set_name() throws RecognitionException {
		Schema_character_set_nameContext _localctx = new Schema_character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_schema_character_set_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(996); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_elementContext extends ParserRuleContext {
		public Table_definitionContext table_definition() {
			return getRuleContext(Table_definitionContext.class,0);
		}
		public Domain_definitionContext domain_definition() {
			return getRuleContext(Domain_definitionContext.class,0);
		}
		public Collation_definitionContext collation_definition() {
			return getRuleContext(Collation_definitionContext.class,0);
		}
		public View_definitionContext view_definition() {
			return getRuleContext(View_definitionContext.class,0);
		}
		public Translation_definitionContext translation_definition() {
			return getRuleContext(Translation_definitionContext.class,0);
		}
		public Character_set_definitionContext character_set_definition() {
			return getRuleContext(Character_set_definitionContext.class,0);
		}
		public Grant_definitionContext grant_definition() {
			return getRuleContext(Grant_definitionContext.class,0);
		}
		public Assertion_definitionContext assertion_definition() {
			return getRuleContext(Assertion_definitionContext.class,0);
		}
		public Schema_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_elementContext schema_element() throws RecognitionException {
		Schema_elementContext _localctx = new Schema_elementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_schema_element);
		try {
			setState(1006);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(998); domain_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(999); table_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1000); view_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1001); grant_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1002); assertion_definition();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1003); character_set_definition();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1004); collation_definition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1005); translation_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_definitionContext extends ParserRuleContext {
		public Table_element_listContext table_element_list() {
			return getRuleContext(Table_element_listContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Table_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_definitionContext table_definition() throws RecognitionException {
		Table_definitionContext _localctx = new Table_definitionContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_table_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1008); match(T__73);
			setState(1011);
			_la = _input.LA(1);
			if (_la==T__126 || _la==T__21) {
				{
				setState(1009);
				_la = _input.LA(1);
				if ( !(_la==T__126 || _la==T__21) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1010); match(T__158);
				}
			}

			setState(1013); match(T__230);
			setState(1014); table_name();
			setState(1015); table_element_list();
			setState(1020);
			_la = _input.LA(1);
			if (_la==T__71) {
				{
				setState(1016); match(T__71);
				setState(1017); match(T__39);
				setState(1018);
				_la = _input.LA(1);
				if ( !(_la==T__237 || _la==T__67) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1019); match(T__70);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_definitionContext extends ParserRuleContext {
		public Levels_clauseContext levels_clause() {
			return getRuleContext(Levels_clauseContext.class,0);
		}
		public View_column_listContext view_column_list() {
			return getRuleContext(View_column_listContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public View_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterView_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitView_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitView_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_definitionContext view_definition() throws RecognitionException {
		View_definitionContext _localctx = new View_definitionContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_view_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1022); match(T__73);
			setState(1023); match(T__154);
			setState(1024); table_name();
			setState(1029);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1025); match(LEFT_PAREN);
				setState(1026); view_column_list();
				setState(1027); match(RIGHT_PAREN);
				}
			}

			setState(1031); match(T__175);
			setState(1032); query_expression();
			setState(1039);
			_la = _input.LA(1);
			if (_la==T__189) {
				{
				setState(1033); match(T__189);
				setState(1035);
				_la = _input.LA(1);
				if (_la==T__34 || _la==T__21) {
					{
					setState(1034); levels_clause();
					}
				}

				setState(1037); match(T__219);
				setState(1038); match(T__74);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public View_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterView_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitView_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitView_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_column_listContext view_column_list() throws RecognitionException {
		View_column_listContext _localctx = new View_column_listContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_view_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1041); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Levels_clauseContext extends ParserRuleContext {
		public Levels_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levels_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLevels_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLevels_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLevels_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Levels_clauseContext levels_clause() throws RecognitionException {
		Levels_clauseContext _localctx = new Levels_clauseContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_levels_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1043);
			_la = _input.LA(1);
			if ( !(_la==T__34 || _la==T__21) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_definitionContext extends ParserRuleContext {
		public Default_clauseContext default_clause() {
			return getRuleContext(Default_clauseContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Domain_constraintContext domain_constraint() {
			return getRuleContext(Domain_constraintContext.class,0);
		}
		public Domain_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDomain_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDomain_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDomain_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_definitionContext domain_definition() throws RecognitionException {
		Domain_definitionContext _localctx = new Domain_definitionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_domain_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1045); match(T__73);
			setState(1046); match(T__217);
			setState(1048);
			_la = _input.LA(1);
			if (_la==T__175) {
				{
				setState(1047); match(T__175);
				}
			}

			setState(1050); data_type();
			setState(1052);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(1051); default_clause();
				}
			}

			setState(1055);
			_la = _input.LA(1);
			if (_la==T__219 || _la==T__177) {
				{
				setState(1054); domain_constraint();
				}
			}

			setState(1058);
			_la = _input.LA(1);
			if (_la==T__153) {
				{
				setState(1057); collate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_constraintContext extends ParserRuleContext {
		public Constraint_name_definitionContext constraint_name_definition() {
			return getRuleContext(Constraint_name_definitionContext.class,0);
		}
		public Constraint_attributesContext constraint_attributes() {
			return getRuleContext(Constraint_attributesContext.class,0);
		}
		public Check_constraint_definitionContext check_constraint_definition() {
			return getRuleContext(Check_constraint_definitionContext.class,0);
		}
		public Domain_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDomain_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDomain_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDomain_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_constraintContext domain_constraint() throws RecognitionException {
		Domain_constraintContext _localctx = new Domain_constraintContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_domain_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1061);
			_la = _input.LA(1);
			if (_la==T__177) {
				{
				setState(1060); constraint_name_definition();
				}
			}

			setState(1063); check_constraint_definition();
			setState(1064); constraint_attributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assertion_definitionContext extends ParserRuleContext {
		public Assertion_checkContext assertion_check() {
			return getRuleContext(Assertion_checkContext.class,0);
		}
		public Constraint_attributesContext constraint_attributes() {
			return getRuleContext(Constraint_attributesContext.class,0);
		}
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Assertion_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assertion_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAssertion_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAssertion_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAssertion_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assertion_definitionContext assertion_definition() throws RecognitionException {
		Assertion_definitionContext _localctx = new Assertion_definitionContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_assertion_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1066); match(T__73);
			setState(1067); match(T__143);
			setState(1068); constraint_name();
			setState(1069); assertion_check();
			setState(1071);
			_la = _input.LA(1);
			if (_la==T__176 || _la==T__161 || _la==T__44) {
				{
				setState(1070); constraint_attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assertion_checkContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Assertion_checkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assertion_check; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAssertion_check(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAssertion_check(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAssertion_check(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assertion_checkContext assertion_check() throws RecognitionException {
		Assertion_checkContext _localctx = new Assertion_checkContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_assertion_check);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1073); match(T__219);
			setState(1074); match(LEFT_PAREN);
			setState(1075); search_condition(0);
			setState(1076); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_definitionContext extends ParserRuleContext {
		public Limited_collation_definitionContext limited_collation_definition() {
			return getRuleContext(Limited_collation_definitionContext.class,0);
		}
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Character_set_sourceContext character_set_source() {
			return getRuleContext(Character_set_sourceContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Character_set_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_set_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_set_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_set_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_set_definitionContext character_set_definition() throws RecognitionException {
		Character_set_definitionContext _localctx = new Character_set_definitionContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_character_set_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1078); match(T__73);
			setState(1079); match(T__113);
			setState(1080); match(T__171);
			setState(1081); character_set_name();
			setState(1083);
			_la = _input.LA(1);
			if (_la==T__175) {
				{
				setState(1082); match(T__175);
				}
			}

			setState(1085); character_set_source();
			setState(1088);
			switch (_input.LA(1)) {
			case T__153:
				{
				setState(1086); collate_clause();
				}
				break;
			case T__60:
				{
				setState(1087); limited_collation_definition();
				}
				break;
			case EOF:
			case T__73:
			case T__25:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_sourceContext extends ParserRuleContext {
		public Existing_character_set_nameContext existing_character_set_name() {
			return getRuleContext(Existing_character_set_nameContext.class,0);
		}
		public Character_set_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_set_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_set_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_set_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_set_sourceContext character_set_source() throws RecognitionException {
		Character_set_sourceContext _localctx = new Character_set_sourceContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_character_set_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1090); match(T__164);
			setState(1091); existing_character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_character_set_nameContext extends ParserRuleContext {
		public Implementation_defined_character_repertoire_nameContext implementation_defined_character_repertoire_name() {
			return getRuleContext(Implementation_defined_character_repertoire_nameContext.class,0);
		}
		public Schema_character_set_nameContext schema_character_set_name() {
			return getRuleContext(Schema_character_set_nameContext.class,0);
		}
		public Standard_character_repertoire_nameContext standard_character_repertoire_name() {
			return getRuleContext(Standard_character_repertoire_nameContext.class,0);
		}
		public Existing_character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_character_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExisting_character_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExisting_character_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExisting_character_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Existing_character_set_nameContext existing_character_set_name() throws RecognitionException {
		Existing_character_set_nameContext _localctx = new Existing_character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_existing_character_set_name);
		try {
			setState(1096);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1093); standard_character_repertoire_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1094); implementation_defined_character_repertoire_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1095); schema_character_set_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_definitionContext extends ParserRuleContext {
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Grant_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGrant_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGrant_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGrant_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_definitionContext grant_definition() throws RecognitionException {
		Grant_definitionContext _localctx = new Grant_definitionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_grant_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1098); match(T__25);
			setState(1099); privileges();
			setState(1100); match(T__71);
			setState(1101); object_name();
			setState(1102); match(T__94);
			setState(1103); grantee();
			setState(1108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1104); match(COMMA);
				setState(1105); grantee();
				}
				}
				setState(1110);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1114);
			_la = _input.LA(1);
			if (_la==T__189) {
				{
				setState(1111); match(T__189);
				setState(1112); match(T__25);
				setState(1113); match(T__74);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public Action_listContext action_list() {
			return getRuleContext(Action_listContext.class,0);
		}
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_privileges);
		try {
			setState(1119);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1116); match(ALL);
				setState(1117); match(T__75);
				}
				break;
			case T__237:
			case T__221:
			case T__142:
			case T__106:
			case T__72:
			case T__33:
				enterOuterAlt(_localctx, 2);
				{
				setState(1118); action_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Action_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public Action_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAction_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAction_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAction_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Action_listContext action_list() throws RecognitionException {
		Action_listContext _localctx = new Action_listContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_action_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1121); action();
			setState(1126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1122); match(COMMA);
				setState(1123); action();
				}
				}
				setState(1128);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public Privileges_column_listContext privileges_column_list() {
			return getRuleContext(Privileges_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_action);
		int _la;
		try {
			setState(1139);
			switch (_input.LA(1)) {
			case T__33:
				enterOuterAlt(_localctx, 1);
				{
				setState(1129); match(T__33);
				}
				break;
			case T__237:
				enterOuterAlt(_localctx, 2);
				{
				setState(1130); match(T__237);
				}
				break;
			case T__221:
			case T__142:
			case T__106:
				enterOuterAlt(_localctx, 3);
				{
				setState(1131);
				_la = _input.LA(1);
				if ( !(_la==T__221 || _la==T__142 || _la==T__106) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1136);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1132); match(LEFT_PAREN);
					setState(1133); privileges_column_list();
					setState(1134); match(RIGHT_PAREN);
					}
				}

				}
				break;
			case T__72:
				enterOuterAlt(_localctx, 4);
				{
				setState(1138); match(T__72);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privileges_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Privileges_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrivileges_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrivileges_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrivileges_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privileges_column_listContext privileges_column_list() throws RecognitionException {
		Privileges_column_listContext _localctx = new Privileges_column_listContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_privileges_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1141); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterObject_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitObject_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitObject_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_nameContext object_name() throws RecognitionException {
		Object_nameContext _localctx = new Object_nameContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_object_name);
		int _la;
		try {
			setState(1156);
			switch (_input.LA(1)) {
			case T__230:
			case T__135:
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(1144);
				_la = _input.LA(1);
				if (_la==T__230) {
					{
					setState(1143); match(T__230);
					}
				}

				setState(1146); table_name();
				}
				break;
			case T__217:
				enterOuterAlt(_localctx, 2);
				{
				setState(1147); match(T__217);
				setState(1148); domain_name();
				}
				break;
			case T__60:
				enterOuterAlt(_localctx, 3);
				{
				setState(1149); match(T__60);
				setState(1150); collation_name();
				}
				break;
			case T__113:
				enterOuterAlt(_localctx, 4);
				{
				setState(1151); match(T__113);
				setState(1152); match(T__171);
				setState(1153); character_set_name();
				}
				break;
			case T__225:
				enterOuterAlt(_localctx, 5);
				{
				setState(1154); match(T__225);
				setState(1155); translation_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public Authorization_identifierContext authorization_identifier() {
			return getRuleContext(Authorization_identifierContext.class,0);
		}
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_grantee);
		try {
			setState(1160);
			switch (_input.LA(1)) {
			case T__0:
				enterOuterAlt(_localctx, 1);
				{
				setState(1158); match(T__0);
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1159); authorization_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_definitionContext extends ParserRuleContext {
		public Pad_attributeContext pad_attribute() {
			return getRuleContext(Pad_attributeContext.class,0);
		}
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Collation_sourceContext collation_source() {
			return getRuleContext(Collation_sourceContext.class,0);
		}
		public Collation_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollation_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollation_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollation_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_definitionContext collation_definition() throws RecognitionException {
		Collation_definitionContext _localctx = new Collation_definitionContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_collation_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1162); match(T__73);
			setState(1163); match(T__60);
			setState(1164); collation_name();
			setState(1165); match(T__207);
			setState(1166); character_set_specification();
			setState(1167); match(T__99);
			setState(1168); collation_source();
			setState(1170);
			_la = _input.LA(1);
			if (_la==T__130 || _la==T__82) {
				{
				setState(1169); pad_attribute();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_sourceContext extends ParserRuleContext {
		public Collation_sequence_definitionContext collation_sequence_definition() {
			return getRuleContext(Collation_sequence_definitionContext.class,0);
		}
		public Translation_collationContext translation_collation() {
			return getRuleContext(Translation_collationContext.class,0);
		}
		public Collation_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollation_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollation_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollation_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_sourceContext collation_source() throws RecognitionException {
		Collation_sourceContext _localctx = new Collation_sourceContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_collation_source);
		try {
			setState(1174);
			switch (_input.LA(1)) {
			case T__226:
			case T__108:
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case DEFAULT:
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(1172); collation_sequence_definition();
				}
				break;
			case T__225:
				enterOuterAlt(_localctx, 2);
				{
				setState(1173); translation_collation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_sequence_definitionContext extends ParserRuleContext {
		public External_collationContext external_collation() {
			return getRuleContext(External_collationContext.class,0);
		}
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Schema_collation_nameContext schema_collation_name() {
			return getRuleContext(Schema_collation_nameContext.class,0);
		}
		public Collation_sequence_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_sequence_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollation_sequence_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollation_sequence_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollation_sequence_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_sequence_definitionContext collation_sequence_definition() throws RecognitionException {
		Collation_sequence_definitionContext _localctx = new Collation_sequence_definitionContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_collation_sequence_definition);
		try {
			setState(1184);
			switch (_input.LA(1)) {
			case T__108:
				enterOuterAlt(_localctx, 1);
				{
				setState(1176); external_collation();
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1177); schema_collation_name();
				}
				break;
			case T__226:
				enterOuterAlt(_localctx, 3);
				{
				setState(1178); match(T__226);
				setState(1179); match(LEFT_PAREN);
				setState(1180); collation_name();
				setState(1181); match(RIGHT_PAREN);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1183); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_collationContext extends ParserRuleContext {
		public TerminalNode QUOTE(int i) {
			return getToken(Sql92Parser.QUOTE, i);
		}
		public List<TerminalNode> QUOTE() { return getTokens(Sql92Parser.QUOTE); }
		public External_collation_nameContext external_collation_name() {
			return getRuleContext(External_collation_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public External_collationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_collation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExternal_collation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExternal_collation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExternal_collation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_collationContext external_collation() throws RecognitionException {
		External_collationContext _localctx = new External_collationContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_external_collation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1186); match(T__108);
			setState(1187); match(LEFT_PAREN);
			setState(1188); match(QUOTE);
			setState(1189); external_collation_name();
			setState(1190); match(QUOTE);
			setState(1191); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_collation_nameContext extends ParserRuleContext {
		public Standard_collation_nameContext standard_collation_name() {
			return getRuleContext(Standard_collation_nameContext.class,0);
		}
		public Implementation_defined_collation_nameContext implementation_defined_collation_name() {
			return getRuleContext(Implementation_defined_collation_nameContext.class,0);
		}
		public External_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExternal_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExternal_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExternal_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_collation_nameContext external_collation_name() throws RecognitionException {
		External_collation_nameContext _localctx = new External_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_external_collation_name);
		try {
			setState(1195);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1193); standard_collation_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1194); implementation_defined_collation_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_collation_nameContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Standard_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStandard_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStandard_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStandard_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_collation_nameContext standard_collation_name() throws RecognitionException {
		Standard_collation_nameContext _localctx = new Standard_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_standard_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1197); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_defined_collation_nameContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Implementation_defined_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_defined_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterImplementation_defined_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitImplementation_defined_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitImplementation_defined_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_defined_collation_nameContext implementation_defined_collation_name() throws RecognitionException {
		Implementation_defined_collation_nameContext _localctx = new Implementation_defined_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_implementation_defined_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1199); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_collation_nameContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Schema_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_collation_nameContext schema_collation_name() throws RecognitionException {
		Schema_collation_nameContext _localctx = new Schema_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_schema_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1201); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_collationContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Translation_collationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_collation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_collation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_collation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_collation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_collationContext translation_collation() throws RecognitionException {
		Translation_collationContext _localctx = new Translation_collationContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_translation_collation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1203); match(T__225);
			setState(1204); translation_name();
			setState(1208);
			_la = _input.LA(1);
			if (_la==T__215) {
				{
				setState(1205); match(T__215);
				setState(1206); match(T__60);
				setState(1207); collation_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limited_collation_definitionContext extends ParserRuleContext {
		public Collation_sourceContext collation_source() {
			return getRuleContext(Collation_sourceContext.class,0);
		}
		public Limited_collation_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limited_collation_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLimited_collation_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLimited_collation_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLimited_collation_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limited_collation_definitionContext limited_collation_definition() throws RecognitionException {
		Limited_collation_definitionContext _localctx = new Limited_collation_definitionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_limited_collation_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1210); match(T__60);
			setState(1211); match(T__99);
			setState(1212); collation_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pad_attributeContext extends ParserRuleContext {
		public Pad_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pad_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPad_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPad_attribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPad_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pad_attributeContext pad_attribute() throws RecognitionException {
		Pad_attributeContext _localctx = new Pad_attributeContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_pad_attribute);
		try {
			setState(1218);
			switch (_input.LA(1)) {
			case T__82:
				enterOuterAlt(_localctx, 1);
				{
				setState(1214); match(T__82);
				setState(1215); match(T__130);
				}
				break;
			case T__130:
				enterOuterAlt(_localctx, 2);
				{
				setState(1216); match(T__130);
				setState(1217); match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_definitionContext extends ParserRuleContext {
		public Source_character_set_specificationContext source_character_set_specification() {
			return getRuleContext(Source_character_set_specificationContext.class,0);
		}
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Translation_sourceContext translation_source() {
			return getRuleContext(Translation_sourceContext.class,0);
		}
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Translation_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_definitionContext translation_definition() throws RecognitionException {
		Translation_definitionContext _localctx = new Translation_definitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_translation_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1220); match(T__73);
			setState(1221); match(T__225);
			setState(1222); translation_name();
			setState(1223); match(T__207);
			setState(1224); source_character_set_specification();
			setState(1225); match(T__94);
			setState(1226); character_set_specification();
			setState(1227); match(T__99);
			setState(1228); translation_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Source_character_set_specificationContext extends ParserRuleContext {
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Source_character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSource_character_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSource_character_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSource_character_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Source_character_set_specificationContext source_character_set_specification() throws RecognitionException {
		Source_character_set_specificationContext _localctx = new Source_character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_source_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1230); character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_character_set_specificationContext extends ParserRuleContext {
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Target_character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTarget_character_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTarget_character_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTarget_character_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_character_set_specificationContext target_character_set_specification() throws RecognitionException {
		Target_character_set_specificationContext _localctx = new Target_character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_target_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1232); character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_sourceContext extends ParserRuleContext {
		public Translation_specificationContext translation_specification() {
			return getRuleContext(Translation_specificationContext.class,0);
		}
		public Translation_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_sourceContext translation_source() throws RecognitionException {
		Translation_sourceContext _localctx = new Translation_sourceContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_translation_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1234); translation_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_specificationContext extends ParserRuleContext {
		public Schema_translation_nameContext schema_translation_name() {
			return getRuleContext(Schema_translation_nameContext.class,0);
		}
		public External_translationContext external_translation() {
			return getRuleContext(External_translationContext.class,0);
		}
		public Translation_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_specificationContext translation_specification() throws RecognitionException {
		Translation_specificationContext _localctx = new Translation_specificationContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_translation_specification);
		try {
			setState(1239);
			switch (_input.LA(1)) {
			case T__108:
				enterOuterAlt(_localctx, 1);
				{
				setState(1236); external_translation();
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				setState(1237); match(T__3);
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 3);
				{
				setState(1238); schema_translation_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_translationContext extends ParserRuleContext {
		public TerminalNode QUOTE(int i) {
			return getToken(Sql92Parser.QUOTE, i);
		}
		public List<TerminalNode> QUOTE() { return getTokens(Sql92Parser.QUOTE); }
		public External_translation_nameContext external_translation_name() {
			return getRuleContext(External_translation_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public External_translationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_translation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExternal_translation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExternal_translation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExternal_translation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_translationContext external_translation() throws RecognitionException {
		External_translationContext _localctx = new External_translationContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_external_translation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1241); match(T__108);
			setState(1242); match(LEFT_PAREN);
			setState(1243); match(QUOTE);
			setState(1244); external_translation_name();
			setState(1245); match(QUOTE);
			setState(1246); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_translation_nameContext extends ParserRuleContext {
		public Implementation_defined_translation_nameContext implementation_defined_translation_name() {
			return getRuleContext(Implementation_defined_translation_nameContext.class,0);
		}
		public Standard_translation_nameContext standard_translation_name() {
			return getRuleContext(Standard_translation_nameContext.class,0);
		}
		public External_translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExternal_translation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExternal_translation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExternal_translation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_translation_nameContext external_translation_name() throws RecognitionException {
		External_translation_nameContext _localctx = new External_translation_nameContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_external_translation_name);
		try {
			setState(1250);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1248); standard_translation_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1249); implementation_defined_translation_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_translation_nameContext extends ParserRuleContext {
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Standard_translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStandard_translation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStandard_translation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStandard_translation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_translation_nameContext standard_translation_name() throws RecognitionException {
		Standard_translation_nameContext _localctx = new Standard_translation_nameContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_standard_translation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1252); translation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_defined_translation_nameContext extends ParserRuleContext {
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Implementation_defined_translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_defined_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterImplementation_defined_translation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitImplementation_defined_translation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitImplementation_defined_translation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_defined_translation_nameContext implementation_defined_translation_name() throws RecognitionException {
		Implementation_defined_translation_nameContext _localctx = new Implementation_defined_translation_nameContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_implementation_defined_translation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1254); translation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_translation_nameContext extends ParserRuleContext {
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Schema_translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_translation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_translation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_translation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_translation_nameContext schema_translation_name() throws RecognitionException {
		Schema_translation_nameContext _localctx = new Schema_translation_nameContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_schema_translation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1256); translation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_schema_manipulation_statementContext extends ParserRuleContext {
		public Drop_view_statementContext drop_view_statement() {
			return getRuleContext(Drop_view_statementContext.class,0);
		}
		public Drop_translation_statementContext drop_translation_statement() {
			return getRuleContext(Drop_translation_statementContext.class,0);
		}
		public Alter_domain_statementContext alter_domain_statement() {
			return getRuleContext(Alter_domain_statementContext.class,0);
		}
		public Drop_table_statementContext drop_table_statement() {
			return getRuleContext(Drop_table_statementContext.class,0);
		}
		public Drop_assertion_statementContext drop_assertion_statement() {
			return getRuleContext(Drop_assertion_statementContext.class,0);
		}
		public Drop_character_set_statementContext drop_character_set_statement() {
			return getRuleContext(Drop_character_set_statementContext.class,0);
		}
		public Drop_schema_statementContext drop_schema_statement() {
			return getRuleContext(Drop_schema_statementContext.class,0);
		}
		public Revoke_statementContext revoke_statement() {
			return getRuleContext(Revoke_statementContext.class,0);
		}
		public Alter_table_statementContext alter_table_statement() {
			return getRuleContext(Alter_table_statementContext.class,0);
		}
		public Drop_domain_statementContext drop_domain_statement() {
			return getRuleContext(Drop_domain_statementContext.class,0);
		}
		public Drop_collation_statementContext drop_collation_statement() {
			return getRuleContext(Drop_collation_statementContext.class,0);
		}
		public Sql_schema_manipulation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_schema_manipulation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_schema_manipulation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_schema_manipulation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_schema_manipulation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_schema_manipulation_statementContext sql_schema_manipulation_statement() throws RecognitionException {
		Sql_schema_manipulation_statementContext _localctx = new Sql_schema_manipulation_statementContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_sql_schema_manipulation_statement);
		try {
			setState(1269);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1258); drop_schema_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1259); alter_table_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1260); drop_table_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1261); drop_view_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1262); revoke_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1263); alter_domain_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1264); drop_domain_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1265); drop_character_set_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1266); drop_collation_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1267); drop_translation_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1268); drop_assertion_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schema_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Drop_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schema_statementContext drop_schema_statement() throws RecognitionException {
		Drop_schema_statementContext _localctx = new Drop_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_drop_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1271); match(T__100);
			setState(1272); match(T__202);
			setState(1273); schema_name();
			setState(1274); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_behaviourContext extends ParserRuleContext {
		public Drop_behaviourContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_behaviour; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_behaviour(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_behaviour(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_behaviour(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_behaviourContext drop_behaviour() throws RecognitionException {
		Drop_behaviourContext _localctx = new Drop_behaviourContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_drop_behaviour);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1276);
			_la = _input.LA(1);
			if ( !(_la==T__131 || _la==T__109) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_statementContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Alter_table_actionContext alter_table_action() {
			return getRuleContext(Alter_table_actionContext.class,0);
		}
		public Alter_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_statementContext alter_table_statement() throws RecognitionException {
		Alter_table_statementContext _localctx = new Alter_table_statementContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_alter_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1278); match(T__199);
			setState(1279); match(T__230);
			setState(1280); table_name();
			setState(1281); alter_table_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_actionContext extends ParserRuleContext {
		public Drop_column_definitionContext drop_column_definition() {
			return getRuleContext(Drop_column_definitionContext.class,0);
		}
		public Drop_table_constraint_definitionContext drop_table_constraint_definition() {
			return getRuleContext(Drop_table_constraint_definitionContext.class,0);
		}
		public Alter_column_definitionContext alter_column_definition() {
			return getRuleContext(Alter_column_definitionContext.class,0);
		}
		public Add_table_constraint_definitionContext add_table_constraint_definition() {
			return getRuleContext(Add_table_constraint_definitionContext.class,0);
		}
		public Add_column_definitionContext add_column_definition() {
			return getRuleContext(Add_column_definitionContext.class,0);
		}
		public Alter_table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_table_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_table_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_table_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_actionContext alter_table_action() throws RecognitionException {
		Alter_table_actionContext _localctx = new Alter_table_actionContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_table_action);
		try {
			setState(1288);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1283); add_column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1284); alter_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1285); drop_column_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1286); add_table_constraint_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1287); drop_table_constraint_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_column_definitionContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Add_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAdd_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAdd_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAdd_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_column_definitionContext add_column_definition() throws RecognitionException {
		Add_column_definitionContext _localctx = new Add_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_add_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1290); match(T__110);
			setState(1292);
			_la = _input.LA(1);
			if (_la==T__201) {
				{
				setState(1291); match(T__201);
				}
			}

			setState(1294); column_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_table_constraint_definitionContext extends ParserRuleContext {
		public Table_constraint_definitionContext table_constraint_definition() {
			return getRuleContext(Table_constraint_definitionContext.class,0);
		}
		public Add_table_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_table_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAdd_table_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAdd_table_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAdd_table_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_table_constraint_definitionContext add_table_constraint_definition() throws RecognitionException {
		Add_table_constraint_definitionContext _localctx = new Add_table_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_add_table_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1296); match(T__110);
			setState(1297); table_constraint_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_definitionContext extends ParserRuleContext {
		public Alter_column_actionContext alter_column_action() {
			return getRuleContext(Alter_column_actionContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Alter_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_definitionContext alter_column_definition() throws RecognitionException {
		Alter_column_definitionContext _localctx = new Alter_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alter_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1299); match(T__199);
			setState(1301);
			_la = _input.LA(1);
			if (_la==T__201) {
				{
				setState(1300); match(T__201);
				}
			}

			setState(1303); column_name();
			setState(1304); alter_column_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_actionContext extends ParserRuleContext {
		public Set_column_default_clauseContext set_column_default_clause() {
			return getRuleContext(Set_column_default_clauseContext.class,0);
		}
		public Drop_column_default_clauseContext drop_column_default_clause() {
			return getRuleContext(Drop_column_default_clauseContext.class,0);
		}
		public Alter_column_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_column_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_column_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_column_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_actionContext alter_column_action() throws RecognitionException {
		Alter_column_actionContext _localctx = new Alter_column_actionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alter_column_action);
		try {
			setState(1308);
			switch (_input.LA(1)) {
			case T__171:
				enterOuterAlt(_localctx, 1);
				{
				setState(1306); set_column_default_clause();
				}
				break;
			case T__100:
				enterOuterAlt(_localctx, 2);
				{
				setState(1307); drop_column_default_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_column_default_clauseContext extends ParserRuleContext {
		public Default_clauseContext default_clause() {
			return getRuleContext(Default_clauseContext.class,0);
		}
		public Set_column_default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_column_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_column_default_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_column_default_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_column_default_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_column_default_clauseContext set_column_default_clause() throws RecognitionException {
		Set_column_default_clauseContext _localctx = new Set_column_default_clauseContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_set_column_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1310); match(T__171);
			setState(1311); default_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_default_clauseContext extends ParserRuleContext {
		public Drop_column_default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_column_default_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_column_default_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_column_default_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_default_clauseContext drop_column_default_clause() throws RecognitionException {
		Drop_column_default_clauseContext _localctx = new Drop_column_default_clauseContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_drop_column_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1313); match(T__100);
			setState(1314); match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_definitionContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Drop_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_definitionContext drop_column_definition() throws RecognitionException {
		Drop_column_definitionContext _localctx = new Drop_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_drop_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1316); match(T__100);
			setState(1318);
			_la = _input.LA(1);
			if (_la==T__201) {
				{
				setState(1317); match(T__201);
				}
			}

			setState(1320); column_name();
			setState(1321); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_constraint_definitionContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_table_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_table_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_table_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_table_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_constraint_definitionContext drop_table_constraint_definition() throws RecognitionException {
		Drop_table_constraint_definitionContext _localctx = new Drop_table_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_drop_table_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1323); match(T__100);
			setState(1324); match(T__177);
			setState(1325); constraint_name();
			setState(1326); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_statementContext drop_table_statement() throws RecognitionException {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_drop_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1328); match(T__100);
			setState(1329); match(T__230);
			setState(1330); table_name();
			setState(1331); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_view_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Drop_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_view_statementContext drop_view_statement() throws RecognitionException {
		Drop_view_statementContext _localctx = new Drop_view_statementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_drop_view_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1333); match(T__100);
			setState(1334); match(T__154);
			setState(1335); table_name();
			setState(1336); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_statementContext extends ParserRuleContext {
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Revoke_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRevoke_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRevoke_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRevoke_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_statementContext revoke_statement() throws RecognitionException {
		Revoke_statementContext _localctx = new Revoke_statementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_revoke_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1338); match(T__136);
			setState(1342);
			_la = _input.LA(1);
			if (_la==T__25) {
				{
				setState(1339); match(T__25);
				setState(1340); match(T__74);
				setState(1341); match(T__207);
				}
			}

			setState(1344); privileges();
			setState(1345); match(T__71);
			setState(1346); object_name();
			setState(1347); match(T__99);
			setState(1348); grantee();
			setState(1353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1349); match(COMMA);
				setState(1350); grantee();
				}
				}
				setState(1355);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1356); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_domain_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Drop_domain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_domain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_domain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_domain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_domain_statementContext drop_domain_statement() throws RecognitionException {
		Drop_domain_statementContext _localctx = new Drop_domain_statementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_drop_domain_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1358); match(T__100);
			setState(1359); match(T__217);
			setState(1360); domain_name();
			setState(1361); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_character_set_statementContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Drop_character_set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_character_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_character_set_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_character_set_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_character_set_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_character_set_statementContext drop_character_set_statement() throws RecognitionException {
		Drop_character_set_statementContext _localctx = new Drop_character_set_statementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_drop_character_set_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1363); match(T__100);
			setState(1364); match(T__113);
			setState(1365); match(T__171);
			setState(1366); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_collation_statementContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Drop_collation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_collation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_collation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_collation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_collation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_collation_statementContext drop_collation_statement() throws RecognitionException {
		Drop_collation_statementContext _localctx = new Drop_collation_statementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_drop_collation_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1368); match(T__100);
			setState(1369); match(T__60);
			setState(1370); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_translation_statementContext extends ParserRuleContext {
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Drop_translation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_translation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_translation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_translation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_translation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_translation_statementContext drop_translation_statement() throws RecognitionException {
		Drop_translation_statementContext _localctx = new Drop_translation_statementContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_drop_translation_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1372); match(T__100);
			setState(1373); match(T__225);
			setState(1374); translation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_assertion_statementContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_assertion_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_assertion_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_assertion_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_assertion_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_assertion_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_assertion_statementContext drop_assertion_statement() throws RecognitionException {
		Drop_assertion_statementContext _localctx = new Drop_assertion_statementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_drop_assertion_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1376); match(T__100);
			setState(1377); match(T__143);
			setState(1378); constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_domain_statementContext extends ParserRuleContext {
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Alter_domain_actionContext alter_domain_action() {
			return getRuleContext(Alter_domain_actionContext.class,0);
		}
		public Alter_domain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_domain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_domain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_domain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_domain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_domain_statementContext alter_domain_statement() throws RecognitionException {
		Alter_domain_statementContext _localctx = new Alter_domain_statementContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alter_domain_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1380); match(T__199);
			setState(1381); match(T__217);
			setState(1382); domain_name();
			setState(1383); alter_domain_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_domain_actionContext extends ParserRuleContext {
		public Add_domain_constraint_definitionContext add_domain_constraint_definition() {
			return getRuleContext(Add_domain_constraint_definitionContext.class,0);
		}
		public Drop_domain_constraint_definitionContext drop_domain_constraint_definition() {
			return getRuleContext(Drop_domain_constraint_definitionContext.class,0);
		}
		public Set_domain_default_clauseContext set_domain_default_clause() {
			return getRuleContext(Set_domain_default_clauseContext.class,0);
		}
		public Drop_domain_default_clauseContext drop_domain_default_clause() {
			return getRuleContext(Drop_domain_default_clauseContext.class,0);
		}
		public Alter_domain_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_domain_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_domain_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_domain_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_domain_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_domain_actionContext alter_domain_action() throws RecognitionException {
		Alter_domain_actionContext _localctx = new Alter_domain_actionContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alter_domain_action);
		try {
			setState(1389);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1385); set_domain_default_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1386); drop_domain_default_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1387); add_domain_constraint_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1388); drop_domain_constraint_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_domain_default_clauseContext extends ParserRuleContext {
		public Default_clauseContext default_clause() {
			return getRuleContext(Default_clauseContext.class,0);
		}
		public Set_domain_default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_domain_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_domain_default_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_domain_default_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_domain_default_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_domain_default_clauseContext set_domain_default_clause() throws RecognitionException {
		Set_domain_default_clauseContext _localctx = new Set_domain_default_clauseContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_set_domain_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1391); match(T__171);
			setState(1392); default_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_domain_default_clauseContext extends ParserRuleContext {
		public Drop_domain_default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_domain_default_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_domain_default_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_domain_default_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_domain_default_clauseContext drop_domain_default_clause() throws RecognitionException {
		Drop_domain_default_clauseContext _localctx = new Drop_domain_default_clauseContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_drop_domain_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1394); match(T__100);
			setState(1395); match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_domain_constraint_definitionContext extends ParserRuleContext {
		public Domain_constraintContext domain_constraint() {
			return getRuleContext(Domain_constraintContext.class,0);
		}
		public Add_domain_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_domain_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAdd_domain_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAdd_domain_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAdd_domain_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_domain_constraint_definitionContext add_domain_constraint_definition() throws RecognitionException {
		Add_domain_constraint_definitionContext _localctx = new Add_domain_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_add_domain_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1397); match(T__110);
			setState(1398); domain_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_domain_constraint_definitionContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_domain_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_domain_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_domain_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_domain_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_domain_constraint_definitionContext drop_domain_constraint_definition() throws RecognitionException {
		Drop_domain_constraint_definitionContext _localctx = new Drop_domain_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_drop_domain_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1400); match(T__100);
			setState(1401); match(T__177);
			setState(1402); constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_data_statementContext extends ParserRuleContext {
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Sql_data_change_statementContext sql_data_change_statement() {
			return getRuleContext(Sql_data_change_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Select_into_statementContext select_into_statement() {
			return getRuleContext(Select_into_statementContext.class,0);
		}
		public Sql_data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_data_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_data_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_data_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_data_statementContext sql_data_statement() throws RecognitionException {
		Sql_data_statementContext _localctx = new Sql_data_statementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_sql_data_statement);
		try {
			setState(1410);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1404); open_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1405); fetch_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1406); close_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1407); select_into_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1408); select_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1409); sql_data_change_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_open_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1412); match(T__229);
			setState(1413); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Fetch_orientationContext fetch_orientation() {
			return getRuleContext(Fetch_orientationContext.class,0);
		}
		public Fetch_target_listContext fetch_target_list() {
			return getRuleContext(Fetch_target_listContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1415); match(T__2);
			setState(1420);
			_la = _input.LA(1);
			if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (T__216 - 23)) | (1L << (T__209 - 23)) | (1L << (T__167 - 23)))) != 0) || _la==T__99 || _la==T__40 || _la==T__13 || _la==T__6) {
				{
				setState(1417);
				_la = _input.LA(1);
				if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (T__216 - 23)) | (1L << (T__209 - 23)) | (1L << (T__167 - 23)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (T__40 - 199)) | (1L << (T__13 - 199)) | (1L << (T__6 - 199)))) != 0)) {
					{
					setState(1416); fetch_orientation();
					}
				}

				setState(1419); match(T__99);
				}
			}

			setState(1422); cursor_name();
			setState(1423); match(T__145);
			setState(1424); fetch_target_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_orientationContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Fetch_orientationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_orientation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFetch_orientation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFetch_orientation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFetch_orientation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_orientationContext fetch_orientation() throws RecognitionException {
		Fetch_orientationContext _localctx = new Fetch_orientationContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_fetch_orientation);
		int _la;
		try {
			setState(1432);
			switch (_input.LA(1)) {
			case T__40:
				enterOuterAlt(_localctx, 1);
				{
				setState(1426); match(T__40);
				}
				break;
			case T__216:
				enterOuterAlt(_localctx, 2);
				{
				setState(1427); match(T__216);
				}
				break;
			case T__209:
				enterOuterAlt(_localctx, 3);
				{
				setState(1428); match(T__209);
				}
				break;
			case T__13:
				enterOuterAlt(_localctx, 4);
				{
				setState(1429); match(T__13);
				}
				break;
			case T__167:
			case T__6:
				enterOuterAlt(_localctx, 5);
				{
				setState(1430);
				_la = _input.LA(1);
				if ( !(_la==T__167 || _la==T__6) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1431); simple_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_value_specificationContext extends ParserRuleContext {
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Simple_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_value_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_value_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_value_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_value_specificationContext simple_value_specification() throws RecognitionException {
		Simple_value_specificationContext _localctx = new Simple_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_simple_value_specification);
		try {
			setState(1437);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1434); parameter_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1435); embedded_variable_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1436); literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_target_listContext extends ParserRuleContext {
		public Target_specificationContext target_specification(int i) {
			return getRuleContext(Target_specificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Target_specificationContext> target_specification() {
			return getRuleContexts(Target_specificationContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Fetch_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFetch_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFetch_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFetch_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_target_listContext fetch_target_list() throws RecognitionException {
		Fetch_target_listContext _localctx = new Fetch_target_listContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_fetch_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1439); target_specification();
			setState(1444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1440); match(COMMA);
				setState(1441); target_specification();
				}
				}
				setState(1446);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_specificationContext extends ParserRuleContext {
		public Variable_specificationContext variable_specification() {
			return getRuleContext(Variable_specificationContext.class,0);
		}
		public Parameter_specificationContext parameter_specification() {
			return getRuleContext(Parameter_specificationContext.class,0);
		}
		public Target_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTarget_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTarget_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTarget_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_specificationContext target_specification() throws RecognitionException {
		Target_specificationContext _localctx = new Target_specificationContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_target_specification);
		try {
			setState(1449);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1447); parameter_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1448); variable_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1451); match(T__24);
			setState(1452); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_into_statementContext extends ParserRuleContext {
		public Table_expressionContext table_expression() {
			return getRuleContext(Table_expressionContext.class,0);
		}
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Select_target_listContext select_target_list() {
			return getRuleContext(Select_target_listContext.class,0);
		}
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Select_into_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_into_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_into_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_into_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_into_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_into_statementContext select_into_statement() throws RecognitionException {
		Select_into_statementContext _localctx = new Select_into_statementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_select_into_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1454); match(T__33);
			setState(1456);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1455); set_qualifier();
				}
			}

			setState(1458); select_list();
			setState(1459); match(T__145);
			setState(1460); select_target_list();
			setState(1461); table_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_select_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1463); query_specification();
			setState(1464); order_by_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public Select_sublistsContext select_sublists() {
			return getRuleContext(Select_sublistsContext.class,0);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_select_list);
		try {
			setState(1468);
			switch (_input.LA(1)) {
			case ASTERISK:
				enterOuterAlt(_localctx, 1);
				{
				setState(1466); match(ASTERISK);
				}
				break;
			case T__235:
			case T__228:
			case T__213:
			case T__211:
			case T__196:
			case T__193:
			case T__184:
			case T__135:
			case T__125:
			case T__123:
			case T__122:
			case T__121:
			case T__118:
			case T__102:
			case T__98:
			case T__97:
			case T__95:
			case T__90:
			case T__88:
			case T__87:
			case T__86:
			case T__79:
			case T__69:
			case T__65:
			case T__53:
			case T__48:
			case T__42:
			case T__37:
			case T__20:
			case T__7:
			case T__4:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case SUM:
			case MIN:
			case MAX:
			case COUNT:
			case UNSIGNED_INTEGER:
			case ALPHA:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1467); select_sublists();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_sublistsContext extends ParserRuleContext {
		public Select_sublistContext select_sublist(int i) {
			return getRuleContext(Select_sublistContext.class,i);
		}
		public List<Select_sublistContext> select_sublist() {
			return getRuleContexts(Select_sublistContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Select_sublistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_sublists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_sublists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_sublists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_sublists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_sublistsContext select_sublists() throws RecognitionException {
		Select_sublistsContext _localctx = new Select_sublistsContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_select_sublists);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1470); select_sublist();
			setState(1475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1471); match(COMMA);
				setState(1472); select_sublist();
				}
				}
				setState(1477);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_sublistContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public Derived_columnContext derived_column() {
			return getRuleContext(Derived_columnContext.class,0);
		}
		public QualifierContext qualifier() {
			return getRuleContext(QualifierContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Select_sublistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_sublist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_sublist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_sublist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_sublist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_sublistContext select_sublist() throws RecognitionException {
		Select_sublistContext _localctx = new Select_sublistContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_select_sublist);
		try {
			setState(1483);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1478); derived_column();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1479); qualifier();
				setState(1480); match(PERIOD);
				setState(1481); match(ASTERISK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_columnContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public As_clauseContext as_clause() {
			return getRuleContext(As_clauseContext.class,0);
		}
		public Derived_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDerived_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDerived_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDerived_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_columnContext derived_column() throws RecognitionException {
		Derived_columnContext _localctx = new Derived_columnContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_derived_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1485); value_expression();
			setState(1486); as_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_target_listContext extends ParserRuleContext {
		public Target_specificationContext target_specification(int i) {
			return getRuleContext(Target_specificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Target_specificationContext> target_specification() {
			return getRuleContexts(Target_specificationContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Select_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_target_listContext select_target_list() throws RecognitionException {
		Select_target_listContext _localctx = new Select_target_listContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_select_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1488); target_specification();
			setState(1493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1489); match(COMMA);
				setState(1490); target_specification();
				}
				}
				setState(1495);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_expressionContext extends ParserRuleContext {
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_expressionContext table_expression() throws RecognitionException {
		Table_expressionContext _localctx = new Table_expressionContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_table_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1496); from_clause();
			setState(1498);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1497); where_clause();
				}
				break;
			}
			setState(1501);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				setState(1500); group_by_clause();
				}
				break;
			}
			setState(1504);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(1503); having_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_from_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1506); match(T__99);
			setState(1507); table_reference();
			setState(1512);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1508); match(COMMA);
					setState(1509); table_reference();
					}
					} 
				}
				setState(1514);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_referenceContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Normal_tableContext normal_table() {
			return getRuleContext(Normal_tableContext.class,0);
		}
		public Table_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_reference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_reference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_referenceContext table_reference() throws RecognitionException {
		Table_referenceContext _localctx = new Table_referenceContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_table_reference);
		try {
			setState(1517);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1515); normal_table();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1516); joined_table(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Normal_tableContext extends ParserRuleContext {
		public Correlation_specificationContext correlation_specification() {
			return getRuleContext(Correlation_specificationContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Normal_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normal_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNormal_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNormal_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNormal_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Normal_tableContext normal_table() throws RecognitionException {
		Normal_tableContext _localctx = new Normal_tableContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_normal_table);
		try {
			setState(1526);
			switch (_input.LA(1)) {
			case T__135:
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(1519); table_name();
				setState(1521);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(1520); correlation_specification();
					}
					break;
				}
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1523); derived_table();
				setState(1524); correlation_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Normal_tableContext normal_table() {
			return getRuleContext(Normal_tableContext.class,0);
		}
		public List<Joined_tableContext> joined_table() {
			return getRuleContexts(Joined_tableContext.class);
		}
		public Join_specificationContext join_specification() {
			return getRuleContext(Join_specificationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Joined_tableContext joined_table(int i) {
			return getRuleContext(Joined_tableContext.class,i);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoined_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoined_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoined_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		return joined_table(0);
	}

	private Joined_tableContext joined_table(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, _parentState);
		Joined_tableContext _prevctx = _localctx;
		int _startState = 190;
		enterRecursionRule(_localctx, 190, RULE_joined_table, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1534);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				setState(1529); match(LEFT_PAREN);
				setState(1530); joined_table(0);
				setState(1531); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(1533); normal_table();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1554);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1552);
					switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
					case 1:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(1536);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1537); match(T__212);
						setState(1538); match(T__85);
						setState(1539); joined_table(5);
						}
						break;
					case 2:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(1540);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1542);
						_la = _input.LA(1);
						if (_la==T__81) {
							{
							setState(1541); match(T__81);
							}
						}

						setState(1545);
						_la = _input.LA(1);
						if (((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (T__128 - 111)) | (1L << (T__114 - 111)) | (1L << (T__77 - 111)))) != 0) || _la==T__62 || _la==T__22) {
							{
							setState(1544); join_type();
							}
						}

						setState(1547); match(T__85);
						setState(1548); joined_table(0);
						setState(1550);
						switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
						case 1:
							{
							setState(1549); join_specification();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(1556);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Correlation_specificationContext extends ParserRuleContext {
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public Derived_column_listContext derived_column_list() {
			return getRuleContext(Derived_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Correlation_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCorrelation_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCorrelation_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCorrelation_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Correlation_specificationContext correlation_specification() throws RecognitionException {
		Correlation_specificationContext _localctx = new Correlation_specificationContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_correlation_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1558);
			_la = _input.LA(1);
			if (_la==T__175) {
				{
				setState(1557); match(T__175);
				}
			}

			setState(1560); correlation_name();
			setState(1565);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1561); match(LEFT_PAREN);
				setState(1562); derived_column_list();
				setState(1563); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Derived_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDerived_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDerived_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDerived_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_column_listContext derived_column_list() throws RecognitionException {
		Derived_column_listContext _localctx = new Derived_column_listContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_derived_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDerived_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDerived_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_derived_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1569); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_join_type);
		int _la;
		try {
			setState(1577);
			switch (_input.LA(1)) {
			case T__114:
				enterOuterAlt(_localctx, 1);
				{
				setState(1571); match(T__114);
				}
				break;
			case T__77:
			case T__62:
			case T__22:
				enterOuterAlt(_localctx, 2);
				{
				setState(1572); outer_join_type();
				setState(1574);
				_la = _input.LA(1);
				if (_la==T__104) {
					{
					setState(1573); match(T__104);
					}
				}

				}
				break;
			case T__128:
				enterOuterAlt(_localctx, 3);
				{
				setState(1576); match(T__128);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOuter_join_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1579);
			_la = _input.LA(1);
			if ( !(((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (T__77 - 162)) | (1L << (T__62 - 162)) | (1L << (T__22 - 162)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_specificationContext extends ParserRuleContext {
		public Named_columns_joinContext named_columns_join() {
			return getRuleContext(Named_columns_joinContext.class,0);
		}
		public Join_conditionContext join_condition() {
			return getRuleContext(Join_conditionContext.class,0);
		}
		public Join_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoin_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoin_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoin_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_specificationContext join_specification() throws RecognitionException {
		Join_specificationContext _localctx = new Join_specificationContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_join_specification);
		try {
			setState(1583);
			switch (_input.LA(1)) {
			case T__71:
				enterOuterAlt(_localctx, 1);
				{
				setState(1581); join_condition();
				}
				break;
			case T__205:
				enterOuterAlt(_localctx, 2);
				{
				setState(1582); named_columns_join();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_conditionContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoin_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoin_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoin_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_conditionContext join_condition() throws RecognitionException {
		Join_conditionContext _localctx = new Join_conditionContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_join_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1585); match(T__71);
			setState(1586); search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_columns_joinContext extends ParserRuleContext {
		public Join_column_listContext join_column_list() {
			return getRuleContext(Join_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Named_columns_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_columns_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNamed_columns_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNamed_columns_join(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNamed_columns_join(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Named_columns_joinContext named_columns_join() throws RecognitionException {
		Named_columns_joinContext _localctx = new Named_columns_joinContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_named_columns_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1588); match(T__205);
			setState(1589); match(LEFT_PAREN);
			setState(1590); join_column_list();
			setState(1591); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Join_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoin_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoin_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoin_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_column_listContext join_column_list() throws RecognitionException {
		Join_column_listContext _localctx = new Join_column_listContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_join_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1593); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1595); match(T__180);
			setState(1596); search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1598); match(T__155);
			setState(1599); search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_data_change_statementContext extends ParserRuleContext {
		public Delete_statement_searchedContext delete_statement_searched() {
			return getRuleContext(Delete_statement_searchedContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Delete_statement_positionedContext delete_statement_positioned() {
			return getRuleContext(Delete_statement_positionedContext.class,0);
		}
		public Update_statement_searchedContext update_statement_searched() {
			return getRuleContext(Update_statement_searchedContext.class,0);
		}
		public Update_statement_positionContext update_statement_position() {
			return getRuleContext(Update_statement_positionContext.class,0);
		}
		public Sql_data_change_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_data_change_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_data_change_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_data_change_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_data_change_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_data_change_statementContext sql_data_change_statement() throws RecognitionException {
		Sql_data_change_statementContext _localctx = new Sql_data_change_statementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_sql_data_change_statement);
		try {
			setState(1606);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1601); delete_statement_positioned();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1602); delete_statement_searched();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1603); insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1604); update_statement_position();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1605); update_statement_searched();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_positionedContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Delete_statement_positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_positioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelete_statement_positioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelete_statement_positioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelete_statement_positioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statement_positionedContext delete_statement_positioned() throws RecognitionException {
		Delete_statement_positionedContext _localctx = new Delete_statement_positionedContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_delete_statement_positioned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1608); match(T__237);
			setState(1609); match(T__99);
			setState(1610); table_name();
			setState(1611); match(T__180);
			setState(1612); match(T__120);
			setState(1613); match(T__238);
			setState(1614); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_searchedContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Delete_statement_searchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_searched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelete_statement_searched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelete_statement_searched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelete_statement_searched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statement_searchedContext delete_statement_searched() throws RecognitionException {
		Delete_statement_searchedContext _localctx = new Delete_statement_searchedContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_delete_statement_searched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1616); match(T__237);
			setState(1617); match(T__99);
			setState(1618); table_name();
			setState(1621);
			_la = _input.LA(1);
			if (_la==T__180) {
				{
				setState(1619); match(T__180);
				setState(1620); search_condition(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public Insert_columns_and_sourceContext insert_columns_and_source() {
			return getRuleContext(Insert_columns_and_sourceContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1623); match(T__221);
			setState(1624); match(T__145);
			setState(1625); table_name();
			setState(1626); insert_columns_and_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_columns_and_sourceContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public Insert_columns_and_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_columns_and_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInsert_columns_and_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInsert_columns_and_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInsert_columns_and_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_columns_and_sourceContext insert_columns_and_source() throws RecognitionException {
		Insert_columns_and_sourceContext _localctx = new Insert_columns_and_sourceContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_insert_columns_and_source);
		try {
			setState(1637);
			switch (_input.LA(1)) {
			case T__230:
			case T__160:
			case T__135:
			case T__33:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(1632);
				switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
				case 1:
					{
					setState(1628); match(LEFT_PAREN);
					setState(1629); insert_column_list();
					setState(1630); match(RIGHT_PAREN);
					}
					break;
				}
				setState(1634); query_expression();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1635); match(DEFAULT);
				setState(1636); match(T__147);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInsert_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInsert_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_insert_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statement_positionContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Update_statement_positionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement_position; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdate_statement_position(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdate_statement_position(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdate_statement_position(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statement_positionContext update_statement_position() throws RecognitionException {
		Update_statement_positionContext _localctx = new Update_statement_positionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_update_statement_position);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1641); match(T__142);
			setState(1642); table_name();
			setState(1643); match(T__171);
			setState(1644); set_clause_list();
			setState(1645); match(T__180);
			setState(1646); match(T__120);
			setState(1647); match(T__238);
			setState(1648); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_set_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1650); set_clause();
			setState(1655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1651); match(COMMA);
				setState(1652); set_clause();
				}
				}
				setState(1657);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Update_sourceContext update_source() {
			return getRuleContext(Update_sourceContext.class,0);
		}
		public Object_columnContext object_column() {
			return getRuleContext(Object_columnContext.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1658); object_column();
			setState(1659); match(EQ);
			setState(1660); update_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Object_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterObject_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitObject_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitObject_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_columnContext object_column() throws RecognitionException {
		Object_columnContext _localctx = new Object_columnContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_object_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1662); column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_sourceContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Null_specificationContext null_specification() {
			return getRuleContext(Null_specificationContext.class,0);
		}
		public Update_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdate_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdate_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdate_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_sourceContext update_source() throws RecognitionException {
		Update_sourceContext _localctx = new Update_sourceContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_update_source);
		try {
			setState(1667);
			switch (_input.LA(1)) {
			case T__235:
			case T__228:
			case T__213:
			case T__211:
			case T__196:
			case T__193:
			case T__184:
			case T__135:
			case T__125:
			case T__123:
			case T__122:
			case T__121:
			case T__118:
			case T__102:
			case T__98:
			case T__97:
			case T__95:
			case T__90:
			case T__88:
			case T__87:
			case T__86:
			case T__79:
			case T__69:
			case T__65:
			case T__53:
			case T__48:
			case T__42:
			case T__37:
			case T__20:
			case T__7:
			case T__4:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case SUM:
			case MIN:
			case MAX:
			case COUNT:
			case UNSIGNED_INTEGER:
			case ALPHA:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1664); value_expression();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1665); null_specification();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1666); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statement_searchedContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Update_statement_searchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement_searched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdate_statement_searched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdate_statement_searched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdate_statement_searched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statement_searchedContext update_statement_searched() throws RecognitionException {
		Update_statement_searchedContext _localctx = new Update_statement_searchedContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_update_statement_searched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1669); match(T__142);
			setState(1670); table_name();
			setState(1671); match(T__171);
			setState(1672); set_clause_list();
			setState(1675);
			_la = _input.LA(1);
			if (_la==T__180) {
				{
				setState(1673); match(T__180);
				setState(1674); search_condition(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_transaction_statementContext extends ParserRuleContext {
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Set_constraints_mode_statementContext set_constraints_mode_statement() {
			return getRuleContext(Set_constraints_mode_statementContext.class,0);
		}
		public Sql_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_transaction_statementContext sql_transaction_statement() throws RecognitionException {
		Sql_transaction_statementContext _localctx = new Sql_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_sql_transaction_statement);
		try {
			setState(1680);
			switch (_input.LA(1)) {
			case T__171:
				enterOuterAlt(_localctx, 1);
				{
				setState(1677); set_constraints_mode_statement();
				}
				break;
			case T__39:
				enterOuterAlt(_localctx, 2);
				{
				setState(1678); commit_statement();
				}
				break;
			case T__56:
				enterOuterAlt(_localctx, 3);
				{
				setState(1679); rollback_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_statementContext extends ParserRuleContext {
		public Trasaction_modeContext trasaction_mode(int i) {
			return getRuleContext(Trasaction_modeContext.class,i);
		}
		public List<Trasaction_modeContext> trasaction_mode() {
			return getRuleContexts(Trasaction_modeContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Set_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_statementContext set_transaction_statement() throws RecognitionException {
		Set_transaction_statementContext _localctx = new Set_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_set_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1682); match(T__171);
			setState(1683); match(T__137);
			setState(1684); trasaction_mode();
			setState(1689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1685); match(COMMA);
				setState(1686); trasaction_mode();
				}
				}
				setState(1691);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trasaction_modeContext extends ParserRuleContext {
		public Isolation_levelContext isolation_level() {
			return getRuleContext(Isolation_levelContext.class,0);
		}
		public Transaction_access_modeContext transaction_access_mode() {
			return getRuleContext(Transaction_access_modeContext.class,0);
		}
		public Diagnostics_sizeContext diagnostics_size() {
			return getRuleContext(Diagnostics_sizeContext.class,0);
		}
		public Trasaction_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trasaction_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrasaction_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrasaction_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrasaction_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trasaction_modeContext trasaction_mode() throws RecognitionException {
		Trasaction_modeContext _localctx = new Trasaction_modeContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_trasaction_mode);
		try {
			setState(1695);
			switch (_input.LA(1)) {
			case T__194:
				enterOuterAlt(_localctx, 1);
				{
				setState(1692); isolation_level();
				}
				break;
			case T__91:
				enterOuterAlt(_localctx, 2);
				{
				setState(1693); transaction_access_mode();
				}
				break;
			case T__166:
				enterOuterAlt(_localctx, 3);
				{
				setState(1694); diagnostics_size();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Isolation_levelContext extends ParserRuleContext {
		public Level_of_isolationContext level_of_isolation() {
			return getRuleContext(Level_of_isolationContext.class,0);
		}
		public Isolation_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolation_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIsolation_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIsolation_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIsolation_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Isolation_levelContext isolation_level() throws RecognitionException {
		Isolation_levelContext _localctx = new Isolation_levelContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_isolation_level);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1697); match(T__194);
			setState(1698); match(T__8);
			setState(1699); level_of_isolation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Level_of_isolationContext extends ParserRuleContext {
		public Level_of_isolationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_level_of_isolation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLevel_of_isolation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLevel_of_isolation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLevel_of_isolation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Level_of_isolationContext level_of_isolation() throws RecognitionException {
		Level_of_isolationContext _localctx = new Level_of_isolationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_level_of_isolation);
		int _la;
		try {
			setState(1706);
			switch (_input.LA(1)) {
			case T__91:
				enterOuterAlt(_localctx, 1);
				{
				setState(1701); match(T__91);
				setState(1702);
				_la = _input.LA(1);
				if ( !(_la==T__179 || _la==T__54) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case T__117:
				enterOuterAlt(_localctx, 2);
				{
				setState(1703); match(T__117);
				setState(1704); match(T__91);
				}
				break;
			case T__182:
				enterOuterAlt(_localctx, 3);
				{
				setState(1705); match(T__182);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_access_modeContext extends ParserRuleContext {
		public Transaction_access_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_access_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTransaction_access_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTransaction_access_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTransaction_access_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_access_modeContext transaction_access_mode() throws RecognitionException {
		Transaction_access_modeContext _localctx = new Transaction_access_modeContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_transaction_access_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1708); match(T__91);
			setState(1709);
			_la = _input.LA(1);
			if ( !(_la==T__140 || _la==T__14) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Diagnostics_sizeContext extends ParserRuleContext {
		public Number_of_conditionsContext number_of_conditions() {
			return getRuleContext(Number_of_conditionsContext.class,0);
		}
		public Diagnostics_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnostics_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDiagnostics_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDiagnostics_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDiagnostics_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Diagnostics_sizeContext diagnostics_size() throws RecognitionException {
		Diagnostics_sizeContext _localctx = new Diagnostics_sizeContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_diagnostics_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1711); match(T__166);
			setState(1712); match(T__150);
			setState(1713); number_of_conditions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Number_of_conditionsContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Number_of_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number_of_conditions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumber_of_conditions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumber_of_conditions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumber_of_conditions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Number_of_conditionsContext number_of_conditions() throws RecognitionException {
		Number_of_conditionsContext _localctx = new Number_of_conditionsContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_number_of_conditions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1715); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraints_mode_statementContext extends ParserRuleContext {
		public Constraint_name_listContext constraint_name_list() {
			return getRuleContext(Constraint_name_listContext.class,0);
		}
		public Set_constraints_mode_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraints_mode_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_constraints_mode_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_constraints_mode_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_constraints_mode_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraints_mode_statementContext set_constraints_mode_statement() throws RecognitionException {
		Set_constraints_mode_statementContext _localctx = new Set_constraints_mode_statementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_set_constraints_mode_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1717); match(T__171);
			setState(1718); match(T__177);
			setState(1719); constraint_name_list();
			setState(1720);
			_la = _input.LA(1);
			if ( !(_la==T__223 || _la==T__47) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_name_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Constraint_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_name_listContext constraint_name_list() throws RecognitionException {
		Constraint_name_listContext _localctx = new Constraint_name_listContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_constraint_name_list);
		int _la;
		try {
			setState(1731);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1722); match(ALL);
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1723); constraint_name();
				setState(1728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1724); match(COMMA);
					setState(1725); constraint_name();
					}
					}
					setState(1730);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1733); match(T__39);
			setState(1735);
			_la = _input.LA(1);
			if (_la==T__178) {
				{
				setState(1734); match(T__178);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1737); match(T__56);
			setState(1739);
			_la = _input.LA(1);
			if (_la==T__178) {
				{
				setState(1738); match(T__178);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_connection_statementContext extends ParserRuleContext {
		public Disconnect_statementContext disconnect_statement() {
			return getRuleContext(Disconnect_statementContext.class,0);
		}
		public Connect_statementContext connect_statement() {
			return getRuleContext(Connect_statementContext.class,0);
		}
		public Set_connection_statementContext set_connection_statement() {
			return getRuleContext(Set_connection_statementContext.class,0);
		}
		public Sql_connection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_connection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_connection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_connection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_connection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_connection_statementContext sql_connection_statement() throws RecognitionException {
		Sql_connection_statementContext _localctx = new Sql_connection_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_sql_connection_statement);
		try {
			setState(1744);
			switch (_input.LA(1)) {
			case T__11:
				enterOuterAlt(_localctx, 1);
				{
				setState(1741); connect_statement();
				}
				break;
			case T__171:
				enterOuterAlt(_localctx, 2);
				{
				setState(1742); set_connection_statement();
				}
				break;
			case T__63:
				enterOuterAlt(_localctx, 3);
				{
				setState(1743); disconnect_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connect_statementContext extends ParserRuleContext {
		public Connection_targetContext connection_target() {
			return getRuleContext(Connection_targetContext.class,0);
		}
		public Connect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connect_statementContext connect_statement() throws RecognitionException {
		Connect_statementContext _localctx = new Connect_statementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_connect_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1746); match(T__11);
			setState(1747); match(T__94);
			setState(1748); connection_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connection_targetContext extends ParserRuleContext {
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public Connection_nameContext connection_name() {
			return getRuleContext(Connection_nameContext.class,0);
		}
		public Sql_server_nameContext sql_server_name() {
			return getRuleContext(Sql_server_nameContext.class,0);
		}
		public Connection_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connection_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConnection_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConnection_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConnection_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connection_targetContext connection_target() throws RecognitionException {
		Connection_targetContext _localctx = new Connection_targetContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_connection_target);
		int _la;
		try {
			setState(1760);
			switch (_input.LA(1)) {
			case T__228:
			case T__125:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__7:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COLON:
			case UNDERSCORE:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1750); sql_server_name();
				setState(1753);
				_la = _input.LA(1);
				if (_la==T__175) {
					{
					setState(1751); match(T__175);
					setState(1752); connection_name();
					}
				}

				setState(1757);
				_la = _input.LA(1);
				if (_la==T__20) {
					{
					setState(1755); match(T__20);
					setState(1756); user_name();
					}
				}

				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1759); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_server_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Sql_server_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_server_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_server_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_server_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_server_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_server_nameContext sql_server_name() throws RecognitionException {
		Sql_server_nameContext _localctx = new Sql_server_nameContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_sql_server_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1762); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connection_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Connection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConnection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConnection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConnection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connection_nameContext connection_name() throws RecognitionException {
		Connection_nameContext _localctx = new Connection_nameContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_connection_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1764); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public User_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUser_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUser_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUser_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_nameContext user_name() throws RecognitionException {
		User_nameContext _localctx = new User_nameContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_user_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1766); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_connection_statementContext extends ParserRuleContext {
		public Connection_objectContext connection_object() {
			return getRuleContext(Connection_objectContext.class,0);
		}
		public Set_connection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_connection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_connection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_connection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_connection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_connection_statementContext set_connection_statement() throws RecognitionException {
		Set_connection_statementContext _localctx = new Set_connection_statementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_set_connection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1768); match(T__171);
			setState(1769); match(T__57);
			setState(1770); connection_object();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connection_objectContext extends ParserRuleContext {
		public Connection_nameContext connection_name() {
			return getRuleContext(Connection_nameContext.class,0);
		}
		public Connection_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connection_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConnection_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConnection_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConnection_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connection_objectContext connection_object() throws RecognitionException {
		Connection_objectContext _localctx = new Connection_objectContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_connection_object);
		try {
			setState(1774);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1772); match(DEFAULT);
				}
				break;
			case T__228:
			case T__125:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__7:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COLON:
			case UNDERSCORE:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1773); connection_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disconnect_statementContext extends ParserRuleContext {
		public Disconnect_objectContext disconnect_object() {
			return getRuleContext(Disconnect_objectContext.class,0);
		}
		public Disconnect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDisconnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDisconnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDisconnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disconnect_statementContext disconnect_statement() throws RecognitionException {
		Disconnect_statementContext _localctx = new Disconnect_statementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_disconnect_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1776); match(T__63);
			setState(1777); disconnect_object();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disconnect_objectContext extends ParserRuleContext {
		public Connection_objectContext connection_object() {
			return getRuleContext(Connection_objectContext.class,0);
		}
		public Disconnect_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDisconnect_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDisconnect_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDisconnect_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disconnect_objectContext disconnect_object() throws RecognitionException {
		Disconnect_objectContext _localctx = new Disconnect_objectContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_disconnect_object);
		try {
			setState(1782);
			switch (_input.LA(1)) {
			case T__228:
			case T__125:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__7:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COLON:
			case UNDERSCORE:
			case DEFAULT:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1779); connection_object();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1780); match(ALL);
				}
				break;
			case T__120:
				enterOuterAlt(_localctx, 3);
				{
				setState(1781); match(T__120);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_session_statementContext extends ParserRuleContext {
		public Set_names_statementContext set_names_statement() {
			return getRuleContext(Set_names_statementContext.class,0);
		}
		public Set_local_time_zone_statementContext set_local_time_zone_statement() {
			return getRuleContext(Set_local_time_zone_statementContext.class,0);
		}
		public Set_session_authorization_identifier_statementContext set_session_authorization_identifier_statement() {
			return getRuleContext(Set_session_authorization_identifier_statementContext.class,0);
		}
		public Set_schema_statementContext set_schema_statement() {
			return getRuleContext(Set_schema_statementContext.class,0);
		}
		public Set_catalog_statementContext set_catalog_statement() {
			return getRuleContext(Set_catalog_statementContext.class,0);
		}
		public Sql_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_session_statementContext sql_session_statement() throws RecognitionException {
		Sql_session_statementContext _localctx = new Sql_session_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_sql_session_statement);
		try {
			setState(1789);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1784); set_catalog_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1785); set_schema_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1786); set_names_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1787); set_session_authorization_identifier_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1788); set_local_time_zone_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_catalog_statementContext extends ParserRuleContext {
		public Value_specificationContext value_specification() {
			return getRuleContext(Value_specificationContext.class,0);
		}
		public Set_catalog_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_catalog_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_catalog_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_catalog_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_catalog_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_catalog_statementContext set_catalog_statement() throws RecognitionException {
		Set_catalog_statementContext _localctx = new Set_catalog_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_set_catalog_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1791); match(T__171);
			setState(1792); match(T__157);
			setState(1793); value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_specificationContext extends ParserRuleContext {
		public General_value_specificationContext general_value_specification() {
			return getRuleContext(General_value_specificationContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterValue_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitValue_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitValue_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_specificationContext value_specification() throws RecognitionException {
		Value_specificationContext _localctx = new Value_specificationContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_value_specification);
		try {
			setState(1797);
			switch (_input.LA(1)) {
			case T__228:
			case T__125:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__7:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case UNDERSCORE:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1795); literal();
				}
				break;
			case T__121:
			case T__102:
			case T__98:
			case T__95:
			case T__20:
			case COLON:
			case QUESTION_MARK:
				enterOuterAlt(_localctx, 2);
				{
				setState(1796); general_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_schema_statementContext extends ParserRuleContext {
		public Value_specificationContext value_specification() {
			return getRuleContext(Value_specificationContext.class,0);
		}
		public Set_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_schema_statementContext set_schema_statement() throws RecognitionException {
		Set_schema_statementContext _localctx = new Set_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_set_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1799); match(T__171);
			setState(1800); match(T__202);
			setState(1801); value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_names_statementContext extends ParserRuleContext {
		public Value_specificationContext value_specification() {
			return getRuleContext(Value_specificationContext.class,0);
		}
		public Set_names_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_names_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_names_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_names_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_names_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_names_statementContext set_names_statement() throws RecognitionException {
		Set_names_statementContext _localctx = new Set_names_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_set_names_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1803); match(T__171);
			setState(1804); match(T__66);
			setState(1805); value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_authorization_identifier_statementContext extends ParserRuleContext {
		public Value_specificationContext value_specification() {
			return getRuleContext(Value_specificationContext.class,0);
		}
		public Set_session_authorization_identifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_authorization_identifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_session_authorization_identifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_session_authorization_identifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_session_authorization_identifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_authorization_identifier_statementContext set_session_authorization_identifier_statement() throws RecognitionException {
		Set_session_authorization_identifier_statementContext _localctx = new Set_session_authorization_identifier_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_set_session_authorization_identifier_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1807); match(T__171);
			setState(1808); match(T__148);
			setState(1809); match(T__183);
			setState(1810); value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_local_time_zone_statementContext extends ParserRuleContext {
		public Set_time_zone_valueContext set_time_zone_value() {
			return getRuleContext(Set_time_zone_valueContext.class,0);
		}
		public Set_local_time_zone_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_local_time_zone_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_local_time_zone_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_local_time_zone_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_local_time_zone_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_local_time_zone_statementContext set_local_time_zone_statement() throws RecognitionException {
		Set_local_time_zone_statementContext _localctx = new Set_local_time_zone_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_set_local_time_zone_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1812); match(T__171);
			setState(1813); match(T__90);
			setState(1814); match(T__18);
			setState(1815); set_time_zone_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_time_zone_valueContext extends ParserRuleContext {
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Set_time_zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_time_zone_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_time_zone_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_time_zone_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_time_zone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_time_zone_valueContext set_time_zone_value() throws RecognitionException {
		Set_time_zone_valueContext _localctx = new Set_time_zone_valueContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_set_time_zone_value);
		try {
			setState(1819);
			switch (_input.LA(1)) {
			case T__228:
			case T__213:
			case T__211:
			case T__196:
			case T__193:
			case T__135:
			case T__125:
			case T__123:
			case T__122:
			case T__121:
			case T__118:
			case T__102:
			case T__98:
			case T__97:
			case T__95:
			case T__90:
			case T__87:
			case T__86:
			case T__79:
			case T__69:
			case T__48:
			case T__20:
			case T__7:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case SUM:
			case MIN:
			case MAX:
			case COUNT:
			case UNSIGNED_INTEGER:
			case ALPHA:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1817); interval_value_expression(0);
				}
				break;
			case T__21:
				enterOuterAlt(_localctx, 2);
				{
				setState(1818); match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_dynamic_statementContext extends ParserRuleContext {
		public Describe_statementContext describe_statement() {
			return getRuleContext(Describe_statementContext.class,0);
		}
		public System_descriptor_statementContext system_descriptor_statement() {
			return getRuleContext(System_descriptor_statementContext.class,0);
		}
		public Sql_dynamic_data_statementContext sql_dynamic_data_statement() {
			return getRuleContext(Sql_dynamic_data_statementContext.class,0);
		}
		public Deallocate_prepared_statementContext deallocate_prepared_statement() {
			return getRuleContext(Deallocate_prepared_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Execute_immediate_statemnetContext execute_immediate_statemnet() {
			return getRuleContext(Execute_immediate_statemnetContext.class,0);
		}
		public Prepare_statementContext prepare_statement() {
			return getRuleContext(Prepare_statementContext.class,0);
		}
		public Sql_dynamic_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_dynamic_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_dynamic_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_dynamic_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_dynamic_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_dynamic_statementContext sql_dynamic_statement() throws RecognitionException {
		Sql_dynamic_statementContext _localctx = new Sql_dynamic_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_sql_dynamic_statement);
		try {
			setState(1828);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1821); system_descriptor_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1822); prepare_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1823); deallocate_prepared_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1824); describe_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1825); execute_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1826); execute_immediate_statemnet();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1827); sql_dynamic_data_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class System_descriptor_statementContext extends ParserRuleContext {
		public Get_descriptor_statementContext get_descriptor_statement() {
			return getRuleContext(Get_descriptor_statementContext.class,0);
		}
		public Deallocate_descriptor_statementContext deallocate_descriptor_statement() {
			return getRuleContext(Deallocate_descriptor_statementContext.class,0);
		}
		public Allocate_descriptor_statementContext allocate_descriptor_statement() {
			return getRuleContext(Allocate_descriptor_statementContext.class,0);
		}
		public Set_descriptor_statementContext set_descriptor_statement() {
			return getRuleContext(Set_descriptor_statementContext.class,0);
		}
		public System_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSystem_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSystem_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSystem_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final System_descriptor_statementContext system_descriptor_statement() throws RecognitionException {
		System_descriptor_statementContext _localctx = new System_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_system_descriptor_statement);
		try {
			setState(1834);
			switch (_input.LA(1)) {
			case T__214:
				enterOuterAlt(_localctx, 1);
				{
				setState(1830); allocate_descriptor_statement();
				}
				break;
			case T__149:
				enterOuterAlt(_localctx, 2);
				{
				setState(1831); deallocate_descriptor_statement();
				}
				break;
			case T__171:
				enterOuterAlt(_localctx, 3);
				{
				setState(1832); set_descriptor_statement();
				}
				break;
			case T__164:
				enterOuterAlt(_localctx, 4);
				{
				setState(1833); get_descriptor_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Allocate_descriptor_statementContext extends ParserRuleContext {
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public OccurencesContext occurences() {
			return getRuleContext(OccurencesContext.class,0);
		}
		public Allocate_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocate_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAllocate_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAllocate_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAllocate_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allocate_descriptor_statementContext allocate_descriptor_statement() throws RecognitionException {
		Allocate_descriptor_statementContext _localctx = new Allocate_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_allocate_descriptor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1836); match(T__214);
			setState(1837); match(T__61);
			setState(1838); descriptor_name();
			setState(1842);
			_la = _input.LA(1);
			if (_la==T__189) {
				{
				setState(1839); match(T__189);
				setState(1840); match(MAX);
				setState(1841); occurences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Descriptor_nameContext extends ParserRuleContext {
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Descriptor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descriptor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescriptor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescriptor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescriptor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Descriptor_nameContext descriptor_name() throws RecognitionException {
		Descriptor_nameContext _localctx = new Descriptor_nameContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_descriptor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1844); scope_option();
			setState(1845); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scope_optionContext extends ParserRuleContext {
		public Scope_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterScope_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitScope_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitScope_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scope_optionContext scope_option() throws RecognitionException {
		Scope_optionContext _localctx = new Scope_optionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_scope_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1847);
			_la = _input.LA(1);
			if ( !(_la==T__58 || _la==T__21) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OccurencesContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public OccurencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_occurences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOccurences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOccurences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOccurences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OccurencesContext occurences() throws RecognitionException {
		OccurencesContext _localctx = new OccurencesContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_occurences);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1849); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_descriptor_statementContext extends ParserRuleContext {
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public Deallocate_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDeallocate_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDeallocate_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDeallocate_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_descriptor_statementContext deallocate_descriptor_statement() throws RecognitionException {
		Deallocate_descriptor_statementContext _localctx = new Deallocate_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_deallocate_descriptor_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1851); match(T__149);
			setState(1852); match(T__61);
			setState(1853); descriptor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_descriptor_statementContext extends ParserRuleContext {
		public Set_descriptor_informationContext set_descriptor_information() {
			return getRuleContext(Set_descriptor_informationContext.class,0);
		}
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public Set_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_descriptor_statementContext set_descriptor_statement() throws RecognitionException {
		Set_descriptor_statementContext _localctx = new Set_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_set_descriptor_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1855); match(T__171);
			setState(1856); match(T__61);
			setState(1857); descriptor_name();
			setState(1858); set_descriptor_information();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_descriptor_informationContext extends ParserRuleContext {
		public Item_numberContext item_number() {
			return getRuleContext(Item_numberContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Set_item_informationContext> set_item_information() {
			return getRuleContexts(Set_item_informationContext.class);
		}
		public Set_countContext set_count() {
			return getRuleContext(Set_countContext.class,0);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Set_item_informationContext set_item_information(int i) {
			return getRuleContext(Set_item_informationContext.class,i);
		}
		public Set_descriptor_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_descriptor_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_descriptor_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_descriptor_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_descriptor_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_descriptor_informationContext set_descriptor_information() throws RecognitionException {
		Set_descriptor_informationContext _localctx = new Set_descriptor_informationContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_set_descriptor_information);
		int _la;
		try {
			setState(1871);
			switch (_input.LA(1)) {
			case COUNT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1860); set_count();
				}
				break;
			case T__121:
				enterOuterAlt(_localctx, 2);
				{
				setState(1861); match(T__121);
				setState(1862); item_number();
				setState(1863); set_item_information();
				setState(1868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1864); match(COMMA);
					setState(1865); set_item_information();
					}
					}
					setState(1870);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_countContext extends ParserRuleContext {
		public Simple_value_specification_1Context simple_value_specification_1() {
			return getRuleContext(Simple_value_specification_1Context.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Set_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_countContext set_count() throws RecognitionException {
		Set_countContext _localctx = new Set_countContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_set_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1873); match(COUNT);
			setState(1874); match(EQ);
			setState(1875); simple_value_specification_1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_value_specification_1Context extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Simple_value_specification_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_value_specification_1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_value_specification_1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_value_specification_1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_value_specification_1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_value_specification_1Context simple_value_specification_1() throws RecognitionException {
		Simple_value_specification_1Context _localctx = new Simple_value_specification_1Context(_ctx, getState());
		enterRule(_localctx, 318, RULE_simple_value_specification_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1877); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Item_numberContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Item_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_item_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterItem_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitItem_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitItem_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Item_numberContext item_number() throws RecognitionException {
		Item_numberContext _localctx = new Item_numberContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_item_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1879); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_item_informationContext extends ParserRuleContext {
		public Descriptor_item_nameContext descriptor_item_name() {
			return getRuleContext(Descriptor_item_nameContext.class,0);
		}
		public Simple_value_specification_2Context simple_value_specification_2() {
			return getRuleContext(Simple_value_specification_2Context.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Set_item_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_item_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_item_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_item_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_item_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_item_informationContext set_item_information() throws RecognitionException {
		Set_item_informationContext _localctx = new Set_item_informationContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_set_item_information);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1881); descriptor_item_name();
			setState(1882); match(EQ);
			setState(1883); simple_value_specification_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Descriptor_item_nameContext extends ParserRuleContext {
		public Descriptor_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descriptor_item_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescriptor_item_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescriptor_item_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescriptor_item_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Descriptor_item_nameContext descriptor_item_name() throws RecognitionException {
		Descriptor_item_nameContext _localctx = new Descriptor_item_nameContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_descriptor_item_name);
		try {
			setState(1922);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1885); match(T__31);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1886); match(T__15);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1887); match(T__187);
				setState(1888); match(T__15);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1889); match(T__231);
				setState(1890); match(T__15);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1891); match(T__231);
				setState(1892); match(T__187);
				setState(1893); match(T__15);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1894); match(T__163);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1895); match(T__103);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1896); match(T__107);
				setState(1897); match(T__69);
				setState(1898); match(T__129);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1899); match(T__107);
				setState(1900); match(T__69);
				setState(1901); match(T__163);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1902); match(T__141);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1903); match(T__17);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1904); match(T__144);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1905); match(T__12);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1906); match(T__146);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1907); match(T__60);
				setState(1908); match(T__157);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1909); match(T__60);
				setState(1910); match(T__202);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1911); match(T__60);
				setState(1912); match(T__12);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1913); match(T__113);
				setState(1914); match(T__171);
				setState(1915); match(T__157);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1916); match(T__113);
				setState(1917); match(T__171);
				setState(1918); match(T__202);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1919); match(T__113);
				setState(1920); match(T__171);
				setState(1921); match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_value_specification_2Context extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Simple_value_specification_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_value_specification_2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_value_specification_2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_value_specification_2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_value_specification_2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_value_specification_2Context simple_value_specification_2() throws RecognitionException {
		Simple_value_specification_2Context _localctx = new Simple_value_specification_2Context(_ctx, getState());
		enterRule(_localctx, 326, RULE_simple_value_specification_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1924); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_descriptor_statementContext extends ParserRuleContext {
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public Get_descriptor_informationContext get_descriptor_information() {
			return getRuleContext(Get_descriptor_informationContext.class,0);
		}
		public Get_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_descriptor_statementContext get_descriptor_statement() throws RecognitionException {
		Get_descriptor_statementContext _localctx = new Get_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_get_descriptor_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1926); match(T__164);
			setState(1927); match(T__61);
			setState(1928); descriptor_name();
			setState(1929); get_descriptor_information();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_descriptor_informationContext extends ParserRuleContext {
		public Get_item_informationContext get_item_information(int i) {
			return getRuleContext(Get_item_informationContext.class,i);
		}
		public Item_numberContext item_number() {
			return getRuleContext(Item_numberContext.class,0);
		}
		public List<Get_item_informationContext> get_item_information() {
			return getRuleContexts(Get_item_informationContext.class);
		}
		public Get_countContext get_count() {
			return getRuleContext(Get_countContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Get_descriptor_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_descriptor_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_descriptor_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_descriptor_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_descriptor_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_descriptor_informationContext get_descriptor_information() throws RecognitionException {
		Get_descriptor_informationContext _localctx = new Get_descriptor_informationContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_get_descriptor_information);
		int _la;
		try {
			setState(1942);
			switch (_input.LA(1)) {
			case COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(1931); get_count();
				}
				break;
			case T__121:
				enterOuterAlt(_localctx, 2);
				{
				setState(1932); match(T__121);
				setState(1933); item_number();
				setState(1934); get_item_information();
				setState(1939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1935); match(COMMA);
					setState(1936); get_item_information();
					}
					}
					setState(1941);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_countContext extends ParserRuleContext {
		public Simple_target_specification_1Context simple_target_specification_1() {
			return getRuleContext(Simple_target_specification_1Context.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Get_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_countContext get_count() throws RecognitionException {
		Get_countContext _localctx = new Get_countContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_get_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1944); simple_target_specification_1();
			setState(1945); match(EQ);
			setState(1946); match(COUNT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_target_specification_1Context extends ParserRuleContext {
		public Simple_target_specificationContext simple_target_specification() {
			return getRuleContext(Simple_target_specificationContext.class,0);
		}
		public Simple_target_specification_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_target_specification_1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_target_specification_1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_target_specification_1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_target_specification_1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_target_specification_1Context simple_target_specification_1() throws RecognitionException {
		Simple_target_specification_1Context _localctx = new Simple_target_specification_1Context(_ctx, getState());
		enterRule(_localctx, 334, RULE_simple_target_specification_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1948); simple_target_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_item_informationContext extends ParserRuleContext {
		public Descriptor_item_nameContext descriptor_item_name() {
			return getRuleContext(Descriptor_item_nameContext.class,0);
		}
		public Simple_target_specification_2Context simple_target_specification_2() {
			return getRuleContext(Simple_target_specification_2Context.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Get_item_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_item_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_item_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_item_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_item_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_item_informationContext get_item_information() throws RecognitionException {
		Get_item_informationContext _localctx = new Get_item_informationContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_get_item_information);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1950); simple_target_specification_2();
			setState(1951); match(EQ);
			setState(1952); descriptor_item_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_target_specification_2Context extends ParserRuleContext {
		public Simple_target_specificationContext simple_target_specification() {
			return getRuleContext(Simple_target_specificationContext.class,0);
		}
		public Simple_target_specification_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_target_specification_2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_target_specification_2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_target_specification_2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_target_specification_2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_target_specification_2Context simple_target_specification_2() throws RecognitionException {
		Simple_target_specification_2Context _localctx = new Simple_target_specification_2Context(_ctx, getState());
		enterRule(_localctx, 338, RULE_simple_target_specification_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1954); simple_target_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepare_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public Sql_statement_variableContext sql_statement_variable() {
			return getRuleContext(Sql_statement_variableContext.class,0);
		}
		public Prepare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepare_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepare_statementContext prepare_statement() throws RecognitionException {
		Prepare_statementContext _localctx = new Prepare_statementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_prepare_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1956); match(T__188);
			setState(1957); sql_statement_name();
			setState(1958); match(T__99);
			setState(1959); sql_statement_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statement_nameContext extends ParserRuleContext {
		public Extended_statement_nameContext extended_statement_name() {
			return getRuleContext(Extended_statement_nameContext.class,0);
		}
		public Statement_nameContext statement_name() {
			return getRuleContext(Statement_nameContext.class,0);
		}
		public Sql_statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_statement_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_statement_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_statement_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statement_nameContext sql_statement_name() throws RecognitionException {
		Sql_statement_nameContext _localctx = new Sql_statement_nameContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_sql_statement_name);
		try {
			setState(1963);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1961); statement_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1962); extended_statement_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_statement_nameContext extends ParserRuleContext {
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Extended_statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_statement_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtended_statement_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtended_statement_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtended_statement_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extended_statement_nameContext extended_statement_name() throws RecognitionException {
		Extended_statement_nameContext _localctx = new Extended_statement_nameContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_extended_statement_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1966);
			_la = _input.LA(1);
			if (_la==T__58 || _la==T__21) {
				{
				setState(1965); scope_option();
				}
			}

			setState(1968); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statement_variableContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Sql_statement_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_statement_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_statement_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_statement_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statement_variableContext sql_statement_variable() throws RecognitionException {
		Sql_statement_variableContext _localctx = new Sql_statement_variableContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_sql_statement_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1970); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_prepared_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public Deallocate_prepared_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_prepared_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDeallocate_prepared_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDeallocate_prepared_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDeallocate_prepared_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_prepared_statementContext deallocate_prepared_statement() throws RecognitionException {
		Deallocate_prepared_statementContext _localctx = new Deallocate_prepared_statementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_deallocate_prepared_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1972); match(T__149);
			setState(1973); match(T__188);
			setState(1974); sql_statement_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Describe_statementContext extends ParserRuleContext {
		public Describe_output_statementContext describe_output_statement() {
			return getRuleContext(Describe_output_statementContext.class,0);
		}
		public Describe_input_statementContext describe_input_statement() {
			return getRuleContext(Describe_input_statementContext.class,0);
		}
		public Describe_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescribe_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescribe_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescribe_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_statementContext describe_statement() throws RecognitionException {
		Describe_statementContext _localctx = new Describe_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_describe_statement);
		try {
			setState(1978);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1976); describe_input_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1977); describe_output_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Describe_input_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public Using_descriptorContext using_descriptor() {
			return getRuleContext(Using_descriptorContext.class,0);
		}
		public Describe_input_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_input_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescribe_input_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescribe_input_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescribe_input_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_input_statementContext describe_input_statement() throws RecognitionException {
		Describe_input_statementContext _localctx = new Describe_input_statementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_describe_input_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1980); match(T__190);
			setState(1981); match(T__78);
			setState(1982); sql_statement_name();
			setState(1983); using_descriptor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_descriptorContext extends ParserRuleContext {
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public Using_descriptorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_descriptor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUsing_descriptor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUsing_descriptor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUsing_descriptor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_descriptorContext using_descriptor() throws RecognitionException {
		Using_descriptorContext _localctx = new Using_descriptorContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_using_descriptor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1985);
			_la = _input.LA(1);
			if ( !(_la==T__205 || _la==T__145) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1986); match(T__200);
			setState(1987); match(T__61);
			setState(1988); descriptor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Describe_output_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public Using_descriptorContext using_descriptor() {
			return getRuleContext(Using_descriptorContext.class,0);
		}
		public Describe_output_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_output_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescribe_output_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescribe_output_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescribe_output_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_output_statementContext describe_output_statement() throws RecognitionException {
		Describe_output_statementContext _localctx = new Describe_output_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_describe_output_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1990); match(T__190);
			setState(1991); match(T__138);
			setState(1992); sql_statement_name();
			setState(1993); using_descriptor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public Parameter_using_clauseContext parameter_using_clause() {
			return getRuleContext(Parameter_using_clauseContext.class,0);
		}
		public Result_using_clauseContext result_using_clause() {
			return getRuleContext(Result_using_clauseContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExecute_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_execute_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1995); match(T__172);
			setState(1996); sql_statement_name();
			setState(1998);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1997); result_using_clause();
				}
				break;
			}
			setState(2001);
			_la = _input.LA(1);
			if (_la==T__205 || _la==T__145) {
				{
				setState(2000); parameter_using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_using_clauseContext extends ParserRuleContext {
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Result_using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterResult_using_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitResult_using_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitResult_using_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_using_clauseContext result_using_clause() throws RecognitionException {
		Result_using_clauseContext _localctx = new Result_using_clauseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_result_using_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2003); using_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_using_clauseContext extends ParserRuleContext {
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Parameter_using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_using_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_using_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_using_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_using_clauseContext parameter_using_clause() throws RecognitionException {
		Parameter_using_clauseContext _localctx = new Parameter_using_clauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_parameter_using_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2005); using_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public Using_descriptorContext using_descriptor() {
			return getRuleContext(Using_descriptorContext.class,0);
		}
		public Using_argumentsContext using_arguments() {
			return getRuleContext(Using_argumentsContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_using_clause);
		try {
			setState(2009);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2007); using_arguments();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2008); using_descriptor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_argumentsContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Using_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUsing_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUsing_arguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUsing_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_argumentsContext using_arguments() throws RecognitionException {
		Using_argumentsContext _localctx = new Using_argumentsContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_using_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2011);
			_la = _input.LA(1);
			if ( !(_la==T__205 || _la==T__145) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2012); argument();
			setState(2017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2013); match(COMMA);
				setState(2014); argument();
				}
				}
				setState(2019);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Target_specificationContext target_specification() {
			return getRuleContext(Target_specificationContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2020); target_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediate_statemnetContext extends ParserRuleContext {
		public Sql_statement_variableContext sql_statement_variable() {
			return getRuleContext(Sql_statement_variableContext.class,0);
		}
		public Execute_immediate_statemnetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate_statemnet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExecute_immediate_statemnet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExecute_immediate_statemnet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExecute_immediate_statemnet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediate_statemnetContext execute_immediate_statemnet() throws RecognitionException {
		Execute_immediate_statemnetContext _localctx = new Execute_immediate_statemnetContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_execute_immediate_statemnet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2022); match(T__172);
			setState(2023); match(T__206);
			setState(2024); sql_statement_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_dynamic_data_statementContext extends ParserRuleContext {
		public Allocate_cursor_statementContext allocate_cursor_statement() {
			return getRuleContext(Allocate_cursor_statementContext.class,0);
		}
		public Dynamic_update_statement_positionedContext dynamic_update_statement_positioned() {
			return getRuleContext(Dynamic_update_statement_positionedContext.class,0);
		}
		public Dynamic_open_statementContext dynamic_open_statement() {
			return getRuleContext(Dynamic_open_statementContext.class,0);
		}
		public Dynamic_fetch_statementContext dynamic_fetch_statement() {
			return getRuleContext(Dynamic_fetch_statementContext.class,0);
		}
		public Dynamic_delete_statement_positionedContext dynamic_delete_statement_positioned() {
			return getRuleContext(Dynamic_delete_statement_positionedContext.class,0);
		}
		public Dynamic_close_statementContext dynamic_close_statement() {
			return getRuleContext(Dynamic_close_statementContext.class,0);
		}
		public Sql_dynamic_data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_dynamic_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_dynamic_data_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_dynamic_data_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_dynamic_data_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_dynamic_data_statementContext sql_dynamic_data_statement() throws RecognitionException {
		Sql_dynamic_data_statementContext _localctx = new Sql_dynamic_data_statementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_sql_dynamic_data_statement);
		try {
			setState(2032);
			switch (_input.LA(1)) {
			case T__214:
				enterOuterAlt(_localctx, 1);
				{
				setState(2026); allocate_cursor_statement();
				}
				break;
			case T__229:
				enterOuterAlt(_localctx, 2);
				{
				setState(2027); dynamic_open_statement();
				}
				break;
			case T__24:
				enterOuterAlt(_localctx, 3);
				{
				setState(2028); dynamic_close_statement();
				}
				break;
			case T__2:
				enterOuterAlt(_localctx, 4);
				{
				setState(2029); dynamic_fetch_statement();
				}
				break;
			case T__237:
				enterOuterAlt(_localctx, 5);
				{
				setState(2030); dynamic_delete_statement_positioned();
				}
				break;
			case T__142:
				enterOuterAlt(_localctx, 6);
				{
				setState(2031); dynamic_update_statement_positioned();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Allocate_cursor_statementContext extends ParserRuleContext {
		public Extended_statement_nameContext extended_statement_name() {
			return getRuleContext(Extended_statement_nameContext.class,0);
		}
		public Extended_cursor_nameContext extended_cursor_name() {
			return getRuleContext(Extended_cursor_nameContext.class,0);
		}
		public Allocate_cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocate_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAllocate_cursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAllocate_cursor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAllocate_cursor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allocate_cursor_statementContext allocate_cursor_statement() throws RecognitionException {
		Allocate_cursor_statementContext _localctx = new Allocate_cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_allocate_cursor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2034); match(T__214);
			setState(2035); extended_cursor_name();
			setState(2037);
			_la = _input.LA(1);
			if (_la==T__38) {
				{
				setState(2036); match(T__38);
				}
			}

			setState(2040);
			_la = _input.LA(1);
			if (_la==T__195) {
				{
				setState(2039); match(T__195);
				}
			}

			setState(2042); match(T__1);
			setState(2043); match(T__207);
			setState(2044); extended_statement_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_cursor_nameContext extends ParserRuleContext {
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Extended_cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtended_cursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtended_cursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtended_cursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extended_cursor_nameContext extended_cursor_name() throws RecognitionException {
		Extended_cursor_nameContext _localctx = new Extended_cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_extended_cursor_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2047);
			_la = _input.LA(1);
			if (_la==T__58 || _la==T__21) {
				{
				setState(2046); scope_option();
				}
			}

			setState(2049); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_open_statementContext extends ParserRuleContext {
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_open_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_open_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_open_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_open_statementContext dynamic_open_statement() throws RecognitionException {
		Dynamic_open_statementContext _localctx = new Dynamic_open_statementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_dynamic_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2051); match(T__229);
			setState(2052); dynamic_cursor_name();
			setState(2054);
			_la = _input.LA(1);
			if (_la==T__205 || _la==T__145) {
				{
				setState(2053); using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_cursor_nameContext extends ParserRuleContext {
		public Extended_cursor_nameContext extended_cursor_name() {
			return getRuleContext(Extended_cursor_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Dynamic_cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_cursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_cursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_cursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_cursor_nameContext dynamic_cursor_name() throws RecognitionException {
		Dynamic_cursor_nameContext _localctx = new Dynamic_cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_dynamic_cursor_name);
		try {
			setState(2058);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2056); cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2057); extended_cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_close_statementContext extends ParserRuleContext {
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public Dynamic_close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_close_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_close_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_close_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_close_statementContext dynamic_close_statement() throws RecognitionException {
		Dynamic_close_statementContext _localctx = new Dynamic_close_statementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_dynamic_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060); match(T__24);
			setState(2061); dynamic_cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_fetch_statementContext extends ParserRuleContext {
		public Fetch_orientationContext fetch_orientation() {
			return getRuleContext(Fetch_orientationContext.class,0);
		}
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public Dynamic_fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_fetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_fetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_fetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_fetch_statementContext dynamic_fetch_statement() throws RecognitionException {
		Dynamic_fetch_statementContext _localctx = new Dynamic_fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_dynamic_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2063); match(T__2);
			setState(2068);
			_la = _input.LA(1);
			if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (T__216 - 23)) | (1L << (T__209 - 23)) | (1L << (T__167 - 23)))) != 0) || _la==T__99 || _la==T__40 || _la==T__13 || _la==T__6) {
				{
				setState(2065);
				_la = _input.LA(1);
				if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (T__216 - 23)) | (1L << (T__209 - 23)) | (1L << (T__167 - 23)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (T__40 - 199)) | (1L << (T__13 - 199)) | (1L << (T__6 - 199)))) != 0)) {
					{
					setState(2064); fetch_orientation();
					}
				}

				setState(2067); match(T__99);
				}
			}

			setState(2070); dynamic_cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_delete_statement_positionedContext extends ParserRuleContext {
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Dynamic_delete_statement_positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_delete_statement_positioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_delete_statement_positioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_delete_statement_positioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_delete_statement_positioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_delete_statement_positionedContext dynamic_delete_statement_positioned() throws RecognitionException {
		Dynamic_delete_statement_positionedContext _localctx = new Dynamic_delete_statement_positionedContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_dynamic_delete_statement_positioned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2072); match(T__237);
			setState(2073); match(T__99);
			setState(2074); table_name();
			setState(2075); match(T__180);
			setState(2076); match(T__120);
			setState(2077); match(T__238);
			setState(2078); dynamic_cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_update_statement_positionedContext extends ParserRuleContext {
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Dynamic_update_statement_positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_update_statement_positioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_update_statement_positioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_update_statement_positioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_update_statement_positioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_update_statement_positionedContext dynamic_update_statement_positioned() throws RecognitionException {
		Dynamic_update_statement_positionedContext _localctx = new Dynamic_update_statement_positionedContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_dynamic_update_statement_positioned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2080); match(T__142);
			setState(2081); table_name();
			setState(2082); match(T__171);
			setState(2083); set_clause();
			setState(2088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2084); match(COMMA);
				setState(2085); set_clause();
				}
				}
				setState(2090);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2091); match(T__180);
			setState(2092); match(T__120);
			setState(2093); match(T__238);
			setState(2094); dynamic_cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_diagnostics_statementContext extends ParserRuleContext {
		public Get_diagnostics_statementContext get_diagnostics_statement() {
			return getRuleContext(Get_diagnostics_statementContext.class,0);
		}
		public Sql_diagnostics_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_diagnostics_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_diagnostics_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_diagnostics_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_diagnostics_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_diagnostics_statementContext sql_diagnostics_statement() throws RecognitionException {
		Sql_diagnostics_statementContext _localctx = new Sql_diagnostics_statementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_sql_diagnostics_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2096); get_diagnostics_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_diagnostics_statementContext extends ParserRuleContext {
		public Sql_diagnostics_informationContext sql_diagnostics_information() {
			return getRuleContext(Sql_diagnostics_informationContext.class,0);
		}
		public Get_diagnostics_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_diagnostics_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_diagnostics_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_diagnostics_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_diagnostics_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_diagnostics_statementContext get_diagnostics_statement() throws RecognitionException {
		Get_diagnostics_statementContext _localctx = new Get_diagnostics_statementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_get_diagnostics_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2098); match(T__164);
			setState(2099); match(T__166);
			setState(2100); sql_diagnostics_information();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_diagnostics_informationContext extends ParserRuleContext {
		public Condition_informationContext condition_information() {
			return getRuleContext(Condition_informationContext.class,0);
		}
		public Statement_informationContext statement_information() {
			return getRuleContext(Statement_informationContext.class,0);
		}
		public Sql_diagnostics_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_diagnostics_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_diagnostics_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_diagnostics_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_diagnostics_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_diagnostics_informationContext sql_diagnostics_information() throws RecognitionException {
		Sql_diagnostics_informationContext _localctx = new Sql_diagnostics_informationContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_sql_diagnostics_information);
		try {
			setState(2104);
			switch (_input.LA(1)) {
			case COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2102); statement_information();
				}
				break;
			case T__29:
				enterOuterAlt(_localctx, 2);
				{
				setState(2103); condition_information();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_informationContext extends ParserRuleContext {
		public List<Statement_information_itemContext> statement_information_item() {
			return getRuleContexts(Statement_information_itemContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Statement_information_itemContext statement_information_item(int i) {
			return getRuleContext(Statement_information_itemContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Statement_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_informationContext statement_information() throws RecognitionException {
		Statement_informationContext _localctx = new Statement_informationContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_statement_information);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2106); statement_information_item();
			setState(2111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2107); match(COMMA);
				setState(2108); statement_information_item();
				}
				}
				setState(2113);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_information_itemContext extends ParserRuleContext {
		public Simple_target_specificationContext simple_target_specification() {
			return getRuleContext(Simple_target_specificationContext.class,0);
		}
		public Statement_information_item_nameContext statement_information_item_name() {
			return getRuleContext(Statement_information_item_nameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Statement_information_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement_information_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement_information_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement_information_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_information_itemContext statement_information_item() throws RecognitionException {
		Statement_information_itemContext _localctx = new Statement_information_itemContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_statement_information_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2114); simple_target_specification();
			setState(2115); match(EQ);
			setState(2116); statement_information_item_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_information_item_nameContext extends ParserRuleContext {
		public Statement_information_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information_item_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement_information_item_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement_information_item_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement_information_item_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_information_item_nameContext statement_information_item_name() throws RecognitionException {
		Statement_information_item_nameContext _localctx = new Statement_information_item_nameContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_statement_information_item_name);
		try {
			setState(2126);
			switch (_input.LA(1)) {
			case T__197:
				enterOuterAlt(_localctx, 1);
				{
				setState(2118); match(T__197);
				}
				break;
			case T__49:
				enterOuterAlt(_localctx, 2);
				{
				setState(2119); match(T__49);
				}
				break;
			case T__168:
				enterOuterAlt(_localctx, 3);
				{
				setState(2120); match(T__168);
				setState(2121); match(T__139);
				}
				break;
			case T__45:
				enterOuterAlt(_localctx, 4);
				{
				setState(2122); match(T__45);
				setState(2123); match(T__139);
				}
				break;
			case T__41:
				enterOuterAlt(_localctx, 5);
				{
				setState(2124); match(T__41);
				setState(2125); match(COUNT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_informationContext extends ParserRuleContext {
		public Condition_information_itemContext condition_information_item(int i) {
			return getRuleContext(Condition_information_itemContext.class,i);
		}
		public Condition_numberContext condition_number() {
			return getRuleContext(Condition_numberContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Condition_information_itemContext> condition_information_item() {
			return getRuleContexts(Condition_information_itemContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Condition_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCondition_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCondition_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCondition_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_informationContext condition_information() throws RecognitionException {
		Condition_informationContext _localctx = new Condition_informationContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_condition_information);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2128); match(T__29);
			setState(2129); condition_number();
			setState(2130); condition_information_item();
			setState(2135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2131); match(COMMA);
				setState(2132); condition_information_item();
				}
				}
				setState(2137);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_numberContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Condition_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCondition_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCondition_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCondition_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_numberContext condition_number() throws RecognitionException {
		Condition_numberContext _localctx = new Condition_numberContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_condition_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2138); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_information_itemContext extends ParserRuleContext {
		public Simple_target_specificationContext simple_target_specification() {
			return getRuleContext(Simple_target_specificationContext.class,0);
		}
		public Condition_information_item_nameContext condition_information_item_name() {
			return getRuleContext(Condition_information_item_nameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Condition_information_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCondition_information_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCondition_information_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCondition_information_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_information_itemContext condition_information_item() throws RecognitionException {
		Condition_information_itemContext _localctx = new Condition_information_itemContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_condition_information_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2140); simple_target_specification();
			setState(2141); match(EQ);
			setState(2142); condition_information_item_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_information_item_nameContext extends ParserRuleContext {
		public Condition_information_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information_item_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCondition_information_item_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCondition_information_item_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCondition_information_item_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_information_item_nameContext condition_information_item_name() throws RecognitionException {
		Condition_information_item_nameContext _localctx = new Condition_information_item_nameContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_condition_information_item_name);
		int _la;
		try {
			setState(2163);
			switch (_input.LA(1)) {
			case T__224:
				enterOuterAlt(_localctx, 1);
				{
				setState(2144); match(T__224);
				setState(2145); match(T__197);
				}
				break;
			case T__231:
				enterOuterAlt(_localctx, 2);
				{
				setState(2146); match(T__231);
				setState(2147); match(T__236);
				}
				break;
			case T__151:
			case T__9:
				enterOuterAlt(_localctx, 3);
				{
				setState(2148);
				_la = _input.LA(1);
				if ( !(_la==T__151 || _la==T__9) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2149); match(T__43);
				}
				break;
			case T__64:
			case T__57:
				enterOuterAlt(_localctx, 4);
				{
				setState(2150);
				_la = _input.LA(1);
				if ( !(_la==T__64 || _la==T__57) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2151); match(T__12);
				}
				break;
			case T__177:
				enterOuterAlt(_localctx, 5);
				{
				setState(2152); match(T__177);
				setState(2153);
				_la = _input.LA(1);
				if ( !(_la==T__202 || _la==T__157 || _la==T__12) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case T__230:
			case T__202:
			case T__201:
			case T__157:
				enterOuterAlt(_localctx, 6);
				{
				setState(2154);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__230) | (1L << T__202) | (1L << T__201))) != 0) || _la==T__157) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2155); match(T__12);
				}
				break;
			case T__92:
				enterOuterAlt(_localctx, 7);
				{
				setState(2156); match(T__92);
				setState(2161);
				switch (_input.LA(1)) {
				case T__222:
					{
					setState(2157); match(T__222);
					}
					break;
				case T__15:
					{
					setState(2158); match(T__15);
					}
					break;
				case T__187:
					{
					setState(2159); match(T__187);
					setState(2160); match(T__15);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2165); match(LEFT_PAREN);
			setState(2166); query_expression();
			setState(2167); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_query_expression);
		try {
			setState(2171);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2169); non_join_query_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2170); joined_table(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_join_query_expressionContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Query_primaryContext query_primary() {
			return getRuleContext(Query_primaryContext.class,0);
		}
		public Query_termContext query_term() {
			return getRuleContext(Query_termContext.class,0);
		}
		public Query_intersect_relContext query_intersect_rel() {
			return getRuleContext(Query_intersect_relContext.class,0);
		}
		public Query_set_relContext query_set_rel() {
			return getRuleContext(Query_set_relContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Non_join_query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_join_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNon_join_query_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNon_join_query_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNon_join_query_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_join_query_expressionContext non_join_query_expression() throws RecognitionException {
		return non_join_query_expression(0);
	}

	private Non_join_query_expressionContext non_join_query_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Non_join_query_expressionContext _localctx = new Non_join_query_expressionContext(_ctx, _parentState);
		Non_join_query_expressionContext _prevctx = _localctx;
		int _startState = 414;
		enterRecursionRule(_localctx, 414, RULE_non_join_query_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(2174); simple_table();
				}
				break;
			case 2:
				{
				setState(2175); match(LEFT_PAREN);
				setState(2176); non_join_query_expression(0);
				setState(2177); match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(2179); joined_table(0);
				setState(2180); query_set_rel();
				setState(2181); query_term(0);
				}
				break;
			case 4:
				{
				setState(2183); query_term(0);
				setState(2184); query_intersect_rel();
				setState(2185); query_primary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2195);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,134,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Non_join_query_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_non_join_query_expression);
					setState(2189);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(2190); query_set_rel();
					setState(2191); query_term(0);
					}
					} 
				}
				setState(2197);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,134,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Query_set_relContext extends ParserRuleContext {
		public Corresponding_specContext corresponding_spec() {
			return getRuleContext(Corresponding_specContext.class,0);
		}
		public Query_set_relContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_set_rel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_set_rel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_set_rel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_set_rel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_set_relContext query_set_rel() throws RecognitionException {
		Query_set_relContext _localctx = new Query_set_relContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_query_set_rel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198);
			_la = _input.LA(1);
			if ( !(_la==T__210 || _la==T__128) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2200);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(2199); match(ALL);
				}
			}

			setState(2203);
			_la = _input.LA(1);
			if (_la==T__218) {
				{
				setState(2202); corresponding_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_primaryContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Query_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_primaryContext query_primary() throws RecognitionException {
		Query_primaryContext _localctx = new Query_primaryContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_query_primary);
		try {
			setState(2211);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2205); simple_table();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2206); joined_table(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2207); match(LEFT_PAREN);
				setState(2208); non_join_query_expression(0);
				setState(2209); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_termContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Query_primaryContext query_primary() {
			return getRuleContext(Query_primaryContext.class,0);
		}
		public Query_termContext query_term() {
			return getRuleContext(Query_termContext.class,0);
		}
		public Query_intersect_relContext query_intersect_rel() {
			return getRuleContext(Query_intersect_relContext.class,0);
		}
		public Query_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_termContext query_term() throws RecognitionException {
		return query_term(0);
	}

	private Query_termContext query_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Query_termContext _localctx = new Query_termContext(_ctx, _parentState);
		Query_termContext _prevctx = _localctx;
		int _startState = 420;
		enterRecursionRule(_localctx, 420, RULE_query_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2216);
			switch (_input.LA(1)) {
			case T__230:
			case T__160:
			case T__33:
				{
				setState(2214); simple_table();
				}
				break;
			case T__135:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case UNDERSCORE:
			case ALPHA:
				{
				setState(2215); joined_table(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2224);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,139,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Query_termContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_query_term);
					setState(2218);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2219); query_intersect_rel();
					setState(2220); query_primary();
					}
					} 
				}
				setState(2226);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,139,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Query_intersect_relContext extends ParserRuleContext {
		public Corresponding_specContext corresponding_spec() {
			return getRuleContext(Corresponding_specContext.class,0);
		}
		public Query_intersect_relContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_intersect_rel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_intersect_rel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_intersect_rel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_intersect_rel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_intersect_relContext query_intersect_rel() throws RecognitionException {
		Query_intersect_relContext _localctx = new Query_intersect_relContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_query_intersect_rel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2227); match(T__220);
			setState(2229);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(2228); match(ALL);
				}
			}

			setState(2232);
			_la = _input.LA(1);
			if (_la==T__218) {
				{
				setState(2231); corresponding_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Corresponding_specContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Corresponding_column_listContext corresponding_column_list() {
			return getRuleContext(Corresponding_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Corresponding_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_corresponding_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCorresponding_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCorresponding_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCorresponding_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Corresponding_specContext corresponding_spec() throws RecognitionException {
		Corresponding_specContext _localctx = new Corresponding_specContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_corresponding_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2234); match(T__218);
			setState(2240);
			_la = _input.LA(1);
			if (_la==T__93) {
				{
				setState(2235); match(T__93);
				setState(2236); match(LEFT_PAREN);
				setState(2237); corresponding_column_list();
				setState(2238); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Corresponding_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Corresponding_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_corresponding_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCorresponding_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCorresponding_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCorresponding_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Corresponding_column_listContext corresponding_column_list() throws RecognitionException {
		Corresponding_column_listContext _localctx = new Corresponding_column_listContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_corresponding_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2242); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_tableContext extends ParserRuleContext {
		public Explicit_tableContext explicit_table() {
			return getRuleContext(Explicit_tableContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Simple_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_tableContext simple_table() throws RecognitionException {
		Simple_tableContext _localctx = new Simple_tableContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_simple_table);
		try {
			setState(2247);
			switch (_input.LA(1)) {
			case T__33:
				enterOuterAlt(_localctx, 1);
				{
				setState(2244); query_specification();
				}
				break;
			case T__160:
				enterOuterAlt(_localctx, 2);
				{
				setState(2245); table_value_constructor();
				}
				break;
			case T__230:
				enterOuterAlt(_localctx, 3);
				{
				setState(2246); explicit_table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Table_expressionContext table_expression() {
			return getRuleContext(Table_expressionContext.class,0);
		}
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_query_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2249); match(T__33);
			setState(2251);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2250); set_qualifier();
				}
			}

			setState(2253); select_list();
			setState(2254); table_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_table_value_constructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2256); match(T__160);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructor_listContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(Sql92Parser.COMMA, 0); }
		public Row_value_constructorContext row_value_constructor(int i) {
			return getRuleContext(Row_value_constructorContext.class,i);
		}
		public List<Row_value_constructorContext> row_value_constructor() {
			return getRuleContexts(Row_value_constructorContext.class);
		}
		public Table_value_constructor_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_value_constructor_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_value_constructor_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_value_constructor_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructor_listContext table_value_constructor_list() throws RecognitionException {
		Table_value_constructor_listContext _localctx = new Table_value_constructor_listContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_table_value_constructor_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2258); row_value_constructor();
			{
			setState(2259); match(COMMA);
			setState(2260); row_value_constructor();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_tableContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Explicit_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExplicit_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExplicit_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExplicit_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_tableContext explicit_table() throws RecognitionException {
		Explicit_tableContext _localctx = new Explicit_tableContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_explicit_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2262); match(T__230);
			setState(2263); table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_element_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Table_elementContext table_element(int i) {
			return getRuleContext(Table_elementContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public List<Table_elementContext> table_element() {
			return getRuleContexts(Table_elementContext.class);
		}
		public Table_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_element_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_element_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_element_listContext table_element_list() throws RecognitionException {
		Table_element_listContext _localctx = new Table_element_listContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_table_element_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2265); match(LEFT_PAREN);
			setState(2266); table_element();
			setState(2271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2267); match(COMMA);
				setState(2268); table_element();
				}
				}
				setState(2273);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2274); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public Table_constraint_definitionContext table_constraint_definition() {
			return getRuleContext(Table_constraint_definitionContext.class,0);
		}
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_table_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2276); column_definition();
			setState(2277); table_constraint_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Default_clauseContext default_clause() {
			return getRuleContext(Default_clauseContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public List<Column_constraint_definitionContext> column_constraint_definition() {
			return getRuleContexts(Column_constraint_definitionContext.class);
		}
		public Column_constraint_definitionContext column_constraint_definition(int i) {
			return getRuleContext(Column_constraint_definitionContext.class,i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2279); column_name();
			setState(2282);
			switch (_input.LA(1)) {
			case T__204:
			case T__191:
			case T__169:
			case T__159:
			case T__116:
			case T__113:
			case T__112:
			case T__90:
			case T__87:
			case T__83:
			case T__76:
			case T__69:
			case T__68:
			case T__59:
			case T__48:
			case T__46:
			case T__36:
			case T__32:
			case T__27:
				{
				setState(2280); data_type();
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				{
				setState(2281); domain_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2285);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2284); default_clause();
				}
			}

			setState(2290);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2287); column_constraint_definition();
					}
					} 
				}
				setState(2292);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
			}
			setState(2294);
			_la = _input.LA(1);
			if (_la==T__153) {
				{
				setState(2293); collate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraint_definitionContext extends ParserRuleContext {
		public Constraint_name_definitionContext constraint_name_definition() {
			return getRuleContext(Constraint_name_definitionContext.class,0);
		}
		public Column_constraintContext column_constraint() {
			return getRuleContext(Column_constraintContext.class,0);
		}
		public Constraint_attributesContext constraint_attributes() {
			return getRuleContext(Constraint_attributesContext.class,0);
		}
		public Column_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraint_definitionContext column_constraint_definition() throws RecognitionException {
		Column_constraint_definitionContext _localctx = new Column_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_column_constraint_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2297);
			_la = _input.LA(1);
			if (_la==T__177) {
				{
				setState(2296); constraint_name_definition();
				}
			}

			setState(2299); column_constraint();
			setState(2301);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(2300); constraint_attributes();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public Unique_specificationContext unique_specification() {
			return getRuleContext(Unique_specificationContext.class,0);
		}
		public References_specificationContext references_specification() {
			return getRuleContext(References_specificationContext.class,0);
		}
		public Check_constraint_definitionContext check_constraint_definition() {
			return getRuleContext(Check_constraint_definitionContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_column_constraint);
		try {
			setState(2308);
			switch (_input.LA(1)) {
			case T__161:
				enterOuterAlt(_localctx, 1);
				{
				setState(2303); match(T__161);
				setState(2304); match(NULL);
				}
				break;
			case T__132:
			case T__55:
				enterOuterAlt(_localctx, 2);
				{
				setState(2305); unique_specification();
				}
				break;
			case T__106:
				enterOuterAlt(_localctx, 3);
				{
				setState(2306); references_specification();
				}
				break;
			case T__219:
				enterOuterAlt(_localctx, 4);
				{
				setState(2307); check_constraint_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_constraint_definitionContext extends ParserRuleContext {
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Check_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCheck_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCheck_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCheck_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Check_constraint_definitionContext check_constraint_definition() throws RecognitionException {
		Check_constraint_definitionContext _localctx = new Check_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_check_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2310); match(T__219);
			setState(2311); match(LEFT_PAREN);
			setState(2312); search_condition(0);
			setState(2313); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraint_definitionContext extends ParserRuleContext {
		public Constraint_name_definitionContext constraint_name_definition() {
			return getRuleContext(Constraint_name_definitionContext.class,0);
		}
		public Constraint_check_timeContext constraint_check_time() {
			return getRuleContext(Constraint_check_timeContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Table_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraint_definitionContext table_constraint_definition() throws RecognitionException {
		Table_constraint_definitionContext _localctx = new Table_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_table_constraint_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2316);
			_la = _input.LA(1);
			if (_la==T__177) {
				{
				setState(2315); constraint_name_definition();
				}
			}

			setState(2318); table_constraint();
			setState(2320);
			_la = _input.LA(1);
			if (_la==T__44) {
				{
				setState(2319); constraint_check_time();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public Unique_constraint_definitionContext unique_constraint_definition() {
			return getRuleContext(Unique_constraint_definitionContext.class,0);
		}
		public Referential_constraint_definitionContext referential_constraint_definition() {
			return getRuleContext(Referential_constraint_definitionContext.class,0);
		}
		public Check_constraint_definitionContext check_constraint_definition() {
			return getRuleContext(Check_constraint_definitionContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_table_constraint);
		try {
			setState(2325);
			switch (_input.LA(1)) {
			case T__132:
			case T__55:
				enterOuterAlt(_localctx, 1);
				{
				setState(2322); unique_constraint_definition();
				}
				break;
			case T__89:
				enterOuterAlt(_localctx, 2);
				{
				setState(2323); referential_constraint_definition();
				}
				break;
			case T__219:
				enterOuterAlt(_localctx, 3);
				{
				setState(2324); check_constraint_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSearch_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 454;
		enterRecursionRule(_localctx, 454, RULE_search_condition, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(2328); match(T__161);
				setState(2329); search_condition(4);
				}
				break;
			case 2:
				{
				setState(2330); match(LEFT_PAREN);
				setState(2331); search_condition(0);
				setState(2332); match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(2334); predicate();
				setState(2340);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(2335); match(T__165);
					setState(2337);
					_la = _input.LA(1);
					if (_la==T__161) {
						{
						setState(2336); match(T__161);
						}
					}

					setState(2339); truth_value();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2352);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2350);
					switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						setState(2344);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2345); match(T__232);
						setState(2346); search_condition(4);
						}
						break;
					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						setState(2347);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2348); match(T__152);
						setState(2349); search_condition(3);
						}
						break;
					}
					} 
				}
				setState(2354);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Quantified_comparision_predicateContext quantified_comparision_predicate() {
			return getRuleContext(Quantified_comparision_predicateContext.class,0);
		}
		public Overlaps_predicateContext overlaps_predicate() {
			return getRuleContext(Overlaps_predicateContext.class,0);
		}
		public Exists_predicateContext exists_predicate() {
			return getRuleContext(Exists_predicateContext.class,0);
		}
		public In_predicateContext in_predicate() {
			return getRuleContext(In_predicateContext.class,0);
		}
		public Comparision_predicateContext comparision_predicate() {
			return getRuleContext(Comparision_predicateContext.class,0);
		}
		public Null_predicateContext null_predicate() {
			return getRuleContext(Null_predicateContext.class,0);
		}
		public Between_predicateContext between_predicate() {
			return getRuleContext(Between_predicateContext.class,0);
		}
		public Like_predicateContext like_predicate() {
			return getRuleContext(Like_predicateContext.class,0);
		}
		public Match_predicateContext match_predicate() {
			return getRuleContext(Match_predicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_predicate);
		try {
			setState(2364);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2355); comparision_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2356); between_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2357); in_predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2358); like_predicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2359); null_predicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2360); quantified_comparision_predicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2361); exists_predicate();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2362); match_predicate();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2363); overlaps_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparision_predicateContext extends ParserRuleContext {
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public Row_value_constructorContext row_value_constructor(int i) {
			return getRuleContext(Row_value_constructorContext.class,i);
		}
		public List<Row_value_constructorContext> row_value_constructor() {
			return getRuleContexts(Row_value_constructorContext.class);
		}
		public Comparision_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparision_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterComparision_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitComparision_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitComparision_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparision_predicateContext comparision_predicate() throws RecognitionException {
		Comparision_predicateContext _localctx = new Comparision_predicateContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_comparision_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2366); row_value_constructor();
			setState(2367); comp_op();
			setState(2368); row_value_constructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_predicateContext extends ParserRuleContext {
		public Row_value_constructorContext row_value_constructor(int i) {
			return getRuleContext(Row_value_constructorContext.class,i);
		}
		public List<Row_value_constructorContext> row_value_constructor() {
			return getRuleContexts(Row_value_constructorContext.class);
		}
		public Between_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBetween_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBetween_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBetween_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_predicateContext between_predicate() throws RecognitionException {
		Between_predicateContext _localctx = new Between_predicateContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_between_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370); row_value_constructor();
			setState(2372);
			_la = _input.LA(1);
			if (_la==T__161) {
				{
				setState(2371); match(T__161);
				}
			}

			setState(2374); match(T__124);
			setState(2375); row_value_constructor();
			setState(2376); match(T__232);
			setState(2377); row_value_constructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicateContext extends ParserRuleContext {
		public Row_value_constructorContext row_value_constructor() {
			return getRuleContext(Row_value_constructorContext.class,0);
		}
		public In_predicate_valueContext in_predicate_value() {
			return getRuleContext(In_predicate_valueContext.class,0);
		}
		public In_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIn_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIn_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIn_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_predicateContext in_predicate() throws RecognitionException {
		In_predicateContext _localctx = new In_predicateContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_in_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2379); row_value_constructor();
			setState(2381);
			_la = _input.LA(1);
			if (_la==T__161) {
				{
				setState(2380); match(T__161);
				}
			}

			setState(2383); match(T__234);
			setState(2384); in_predicate_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicate_valueContext extends ParserRuleContext {
		public In_value_listContext in_value_list() {
			return getRuleContext(In_value_listContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public In_predicate_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIn_predicate_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIn_predicate_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIn_predicate_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_predicate_valueContext in_predicate_value() throws RecognitionException {
		In_predicate_valueContext _localctx = new In_predicate_valueContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_in_predicate_value);
		try {
			setState(2391);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2386); table_subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2387); match(LEFT_PAREN);
				setState(2388); in_value_list();
				setState(2389); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_value_listContext extends ParserRuleContext {
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public In_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIn_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIn_value_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIn_value_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_value_listContext in_value_list() throws RecognitionException {
		In_value_listContext _localctx = new In_value_listContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_in_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2393); value_expression();
			setState(2398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2394); match(COMMA);
				setState(2395); value_expression();
				}
				}
				setState(2400);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_predicateContext extends ParserRuleContext {
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public Escape_characterContext escape_character() {
			return getRuleContext(Escape_characterContext.class,0);
		}
		public Match_valueContext match_value() {
			return getRuleContext(Match_valueContext.class,0);
		}
		public Like_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLike_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLike_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLike_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_predicateContext like_predicate() throws RecognitionException {
		Like_predicateContext _localctx = new Like_predicateContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_like_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2401); match_value();
			setState(2403);
			_la = _input.LA(1);
			if (_la==T__161) {
				{
				setState(2402); match(T__161);
				}
			}

			setState(2405); match(T__35);
			setState(2406); pattern();
			setState(2409);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(2407); match(T__162);
				setState(2408); escape_character();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_valueContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Match_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterMatch_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitMatch_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitMatch_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_valueContext match_value() throws RecognitionException {
		Match_valueContext _localctx = new Match_valueContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_match_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2411); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PatternContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PatternContext pattern() throws RecognitionException {
		PatternContext _localctx = new PatternContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2413); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Escape_characterContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Escape_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escape_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterEscape_character(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitEscape_character(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitEscape_character(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Escape_characterContext escape_character() throws RecognitionException {
		Escape_characterContext _localctx = new Escape_characterContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_escape_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2415); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_predicateContext extends ParserRuleContext {
		public Null_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNull_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNull_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNull_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_predicateContext null_predicate() throws RecognitionException {
		Null_predicateContext _localctx = new Null_predicateContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_null_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2417); match(T__165);
			setState(2419);
			_la = _input.LA(1);
			if (_la==T__161) {
				{
				setState(2418); match(T__161);
				}
			}

			setState(2421); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_comparision_predicateContext extends ParserRuleContext {
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public QuantifierContext quantifier() {
			return getRuleContext(QuantifierContext.class,0);
		}
		public Row_value_constructorContext row_value_constructor() {
			return getRuleContext(Row_value_constructorContext.class,0);
		}
		public Quantified_comparision_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_comparision_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuantified_comparision_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuantified_comparision_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuantified_comparision_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_comparision_predicateContext quantified_comparision_predicate() throws RecognitionException {
		Quantified_comparision_predicateContext _localctx = new Quantified_comparision_predicateContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_quantified_comparision_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2423); row_value_constructor();
			setState(2424); comp_op();
			setState(2425); quantifier();
			setState(2426); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exists_predicateContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Exists_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExists_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExists_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExists_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exists_predicateContext exists_predicate() throws RecognitionException {
		Exists_predicateContext _localctx = new Exists_predicateContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_exists_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2428); match(T__30);
			setState(2429); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_subquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_subquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_subqueryContext table_subquery() throws RecognitionException {
		Table_subqueryContext _localctx = new Table_subqueryContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_table_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2431); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_predicateContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Row_value_constructorContext row_value_constructor() {
			return getRuleContext(Row_value_constructorContext.class,0);
		}
		public Match_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterMatch_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitMatch_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitMatch_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_predicateContext match_predicate() throws RecognitionException {
		Match_predicateContext _localctx = new Match_predicateContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_match_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2433); row_value_constructor();
			setState(2434); match(T__156);
			setState(2436);
			_la = _input.LA(1);
			if (_la==T__132) {
				{
				setState(2435); match(T__132);
				}
			}

			setState(2439);
			_la = _input.LA(1);
			if (_la==T__50 || _la==T__22) {
				{
				setState(2438);
				_la = _input.LA(1);
				if ( !(_la==T__50 || _la==T__22) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2441); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlaps_predicateContext extends ParserRuleContext {
		public Row_value_constructorContext row_value_constructor(int i) {
			return getRuleContext(Row_value_constructorContext.class,i);
		}
		public List<Row_value_constructorContext> row_value_constructor() {
			return getRuleContexts(Row_value_constructorContext.class);
		}
		public Overlaps_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlaps_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOverlaps_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOverlaps_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOverlaps_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlaps_predicateContext overlaps_predicate() throws RecognitionException {
		Overlaps_predicateContext _localctx = new Overlaps_predicateContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_overlaps_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2443); row_value_constructor();
			setState(2444); match(T__227);
			setState(2445); row_value_constructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructorContext extends ParserRuleContext {
		public Row_subqueryContext row_subquery() {
			return getRuleContext(Row_subqueryContext.class,0);
		}
		public Row_value_constructor_elementContext row_value_constructor_element() {
			return getRuleContext(Row_value_constructor_elementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Row_value_constructor_listContext row_value_constructor_list() {
			return getRuleContext(Row_value_constructor_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Row_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRow_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRow_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRow_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_value_constructorContext row_value_constructor() throws RecognitionException {
		Row_value_constructorContext _localctx = new Row_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_row_value_constructor);
		try {
			setState(2453);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2447); row_value_constructor_element();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2448); match(LEFT_PAREN);
				setState(2449); row_value_constructor_list();
				setState(2450); match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2452); row_subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_elementContext extends ParserRuleContext {
		public Default_specificationContext default_specification() {
			return getRuleContext(Default_specificationContext.class,0);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Null_specificationContext null_specification() {
			return getRuleContext(Null_specificationContext.class,0);
		}
		public Row_value_constructor_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRow_value_constructor_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRow_value_constructor_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRow_value_constructor_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_value_constructor_elementContext row_value_constructor_element() throws RecognitionException {
		Row_value_constructor_elementContext _localctx = new Row_value_constructor_elementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_row_value_constructor_element);
		try {
			setState(2459);
			switch (_input.LA(1)) {
			case T__235:
			case T__228:
			case T__213:
			case T__211:
			case T__196:
			case T__193:
			case T__184:
			case T__135:
			case T__125:
			case T__123:
			case T__122:
			case T__121:
			case T__118:
			case T__102:
			case T__98:
			case T__97:
			case T__95:
			case T__90:
			case T__88:
			case T__87:
			case T__86:
			case T__79:
			case T__69:
			case T__65:
			case T__53:
			case T__48:
			case T__42:
			case T__37:
			case T__20:
			case T__7:
			case T__4:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case SUM:
			case MIN:
			case MAX:
			case COUNT:
			case UNSIGNED_INTEGER:
			case ALPHA:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2455); value_expression();
				setState(2456); null_specification();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2458); default_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_listContext extends ParserRuleContext {
		public Row_value_constructor_elementContext row_value_constructor_element(int i) {
			return getRuleContext(Row_value_constructor_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Row_value_constructor_elementContext> row_value_constructor_element() {
			return getRuleContexts(Row_value_constructor_elementContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Row_value_constructor_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRow_value_constructor_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRow_value_constructor_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRow_value_constructor_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_value_constructor_listContext row_value_constructor_list() throws RecognitionException {
		Row_value_constructor_listContext _localctx = new Row_value_constructor_listContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_row_value_constructor_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2461); row_value_constructor_element();
			setState(2466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2462); match(COMMA);
				setState(2463); row_value_constructor_element();
				}
				}
				setState(2468);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Row_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRow_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRow_subquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRow_subquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_subqueryContext row_subquery() throws RecognitionException {
		Row_subqueryContext _localctx = new Row_subqueryContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_row_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2469); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expressionContext extends ParserRuleContext {
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterValue_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitValue_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitValue_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_expressionContext value_expression() throws RecognitionException {
		Value_expressionContext _localctx = new Value_expressionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_value_expression);
		try {
			setState(2475);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2471); numeric_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2472); string_value_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2473); datetime_value_expression(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2474); interval_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expressionContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(Sql92Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(Sql92Parser.MINUS_SIGN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Numeric_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumeric_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumeric_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumeric_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_value_expressionContext numeric_value_expression() throws RecognitionException {
		return numeric_value_expression(0);
	}

	private Numeric_value_expressionContext numeric_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Numeric_value_expressionContext _localctx = new Numeric_value_expressionContext(_ctx, _parentState);
		Numeric_value_expressionContext _prevctx = _localctx;
		int _startState = 498;
		enterRecursionRule(_localctx, 498, RULE_numeric_value_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2478); term(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(2485);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,175,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Numeric_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_numeric_value_expression);
					setState(2480);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2481);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2482); term(0);
					}
					} 
				}
				setState(2487);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,175,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TermContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(Sql92Parser.SOLIDUS, 0); }
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public TermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TermContext term() throws RecognitionException {
		return term(0);
	}

	private TermContext term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 500;
		enterRecursionRule(_localctx, 500, RULE_term, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2489); factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2496);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_term);
					setState(2491);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2492);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2493); factor();
					}
					} 
				}
				setState(2498);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public Numeric_primaryContext numeric_primary() {
			return getRuleContext(Numeric_primaryContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFactor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		FactorContext _localctx = new FactorContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(2499); sign();
				}
			}

			setState(2502); numeric_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_primaryContext extends ParserRuleContext {
		public Numeric_value_functionContext numeric_value_function() {
			return getRuleContext(Numeric_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Numeric_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumeric_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumeric_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumeric_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_primaryContext numeric_primary() throws RecognitionException {
		Numeric_primaryContext _localctx = new Numeric_primaryContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_numeric_primary);
		try {
			setState(2506);
			switch (_input.LA(1)) {
			case T__228:
			case T__196:
			case T__135:
			case T__125:
			case T__122:
			case T__121:
			case T__118:
			case T__102:
			case T__98:
			case T__97:
			case T__95:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__20:
			case T__7:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case SUM:
			case MIN:
			case MAX:
			case COUNT:
			case UNSIGNED_INTEGER:
			case ALPHA:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2504); value_expression_primary();
				}
				break;
			case T__213:
			case T__211:
			case T__193:
			case T__123:
			case T__86:
			case T__79:
				enterOuterAlt(_localctx, 2);
				{
				setState(2505); numeric_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expression_primaryContext extends ParserRuleContext {
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return getRuleContext(Unsigned_value_specificationContext.class,0);
		}
		public Scalar_subqueryContext scalar_subquery() {
			return getRuleContext(Scalar_subqueryContext.class,0);
		}
		public Cast_specificationContext cast_specification() {
			return getRuleContext(Cast_specificationContext.class,0);
		}
		public Set_function_specificationContext set_function_specification() {
			return getRuleContext(Set_function_specificationContext.class,0);
		}
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Value_expression_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterValue_expression_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitValue_expression_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitValue_expression_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_expression_primaryContext value_expression_primary() throws RecognitionException {
		Value_expression_primaryContext _localctx = new Value_expression_primaryContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_value_expression_primary);
		try {
			setState(2514);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2508); unsigned_value_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2509); column_reference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2510); set_function_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2511); scalar_subquery();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2512); case_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2513); cast_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_specificationContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public General_set_functionContext general_set_function() {
			return getRuleContext(General_set_functionContext.class,0);
		}
		public Set_function_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_function_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_function_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_function_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_function_specificationContext set_function_specification() throws RecognitionException {
		Set_function_specificationContext _localctx = new Set_function_specificationContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_set_function_specification);
		try {
			setState(2521);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2516); match(COUNT);
				setState(2517); match(LEFT_PAREN);
				setState(2518); match(ASTERISK);
				setState(2519); match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2520); general_set_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_set_functionContext extends ParserRuleContext {
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Set_function_typeContext set_function_type() {
			return getRuleContext(Set_function_typeContext.class,0);
		}
		public General_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_set_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGeneral_set_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGeneral_set_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGeneral_set_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_set_functionContext general_set_function() throws RecognitionException {
		General_set_functionContext _localctx = new General_set_functionContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_general_set_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2523); set_function_type();
			setState(2524); match(LEFT_PAREN);
			setState(2526);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2525); set_qualifier();
				}
			}

			setState(2528); value_expression();
			setState(2529); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Scalar_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterScalar_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitScalar_subquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitScalar_subquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_subqueryContext scalar_subquery() throws RecognitionException {
		Scalar_subqueryContext _localctx = new Scalar_subqueryContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_scalar_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2531); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public Case_abbreviationContext case_abbreviation() {
			return getRuleContext(Case_abbreviationContext.class,0);
		}
		public Case_specificationContext case_specification() {
			return getRuleContext(Case_specificationContext.class,0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCase_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_case_expression);
		try {
			setState(2535);
			switch (_input.LA(1)) {
			case T__196:
			case T__122:
				enterOuterAlt(_localctx, 1);
				{
				setState(2533); case_abbreviation();
				}
				break;
			case T__118:
				enterOuterAlt(_localctx, 2);
				{
				setState(2534); case_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_specificationContext extends ParserRuleContext {
		public Cast_targetContext cast_target() {
			return getRuleContext(Cast_targetContext.class,0);
		}
		public Cast_operandContext cast_operand() {
			return getRuleContext(Cast_operandContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Cast_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCast_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCast_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCast_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_specificationContext cast_specification() throws RecognitionException {
		Cast_specificationContext _localctx = new Cast_specificationContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_cast_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2537); match(T__97);
			setState(2538); match(LEFT_PAREN);
			setState(2539); cast_operand();
			setState(2540); match(T__175);
			setState(2541); cast_target();
			setState(2542); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_expressionContext extends ParserRuleContext {
		public Bit_value_expressionContext bit_value_expression() {
			return getRuleContext(Bit_value_expressionContext.class,0);
		}
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public String_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterString_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitString_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitString_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_value_expressionContext string_value_expression() throws RecognitionException {
		String_value_expressionContext _localctx = new String_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_string_value_expression);
		try {
			setState(2546);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2544); character_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2545); bit_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_value_expressionContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(Sql92Parser.PLUS_SIGN, 0); }
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(Sql92Parser.MINUS_SIGN, 0); }
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public Datetime_termContext datetime_term() {
			return getRuleContext(Datetime_termContext.class,0);
		}
		public Datetime_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_value_expressionContext datetime_value_expression() throws RecognitionException {
		return datetime_value_expression(0);
	}

	private Datetime_value_expressionContext datetime_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Datetime_value_expressionContext _localctx = new Datetime_value_expressionContext(_ctx, _parentState);
		Datetime_value_expressionContext _prevctx = _localctx;
		int _startState = 520;
		enterRecursionRule(_localctx, 520, RULE_datetime_value_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				setState(2549); datetime_term();
				}
				break;
			case 2:
				{
				setState(2550); interval_value_expression(0);
				setState(2551); match(PLUS_SIGN);
				setState(2552); datetime_term();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2561);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Datetime_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_datetime_value_expression);
					setState(2556);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2557);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2558); interval_term(0);
					}
					} 
				}
				setState(2563);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,185,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_value_expressionContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(Sql92Parser.PLUS_SIGN, 0); }
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Interval_qualifierContext interval_qualifier() {
			return getRuleContext(Interval_qualifierContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(Sql92Parser.MINUS_SIGN, 0); }
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Datetime_termContext datetime_term() {
			return getRuleContext(Datetime_termContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Interval_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_value_expressionContext interval_value_expression() throws RecognitionException {
		return interval_value_expression(0);
	}

	private Interval_value_expressionContext interval_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Interval_value_expressionContext _localctx = new Interval_value_expressionContext(_ctx, _parentState);
		Interval_value_expressionContext _prevctx = _localctx;
		int _startState = 522;
		enterRecursionRule(_localctx, 522, RULE_interval_value_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2573);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2565); interval_term(0);
				}
				break;
			case 2:
				{
				setState(2566); match(LEFT_PAREN);
				setState(2567); datetime_value_expression(0);
				setState(2568); match(MINUS_SIGN);
				setState(2569); datetime_term();
				setState(2570); match(RIGHT_PAREN);
				setState(2571); interval_qualifier();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2580);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Interval_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_interval_value_expression);
					setState(2575);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2576);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2577); interval_term(0);
					}
					} 
				}
				setState(2582);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Datetime_termContext extends ParserRuleContext {
		public Datetime_factorContext datetime_factor() {
			return getRuleContext(Datetime_factorContext.class,0);
		}
		public Datetime_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_termContext datetime_term() throws RecognitionException {
		Datetime_termContext _localctx = new Datetime_termContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_datetime_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2583); datetime_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_factorContext extends ParserRuleContext {
		public Time_zoneContext time_zone() {
			return getRuleContext(Time_zoneContext.class,0);
		}
		public Datetime_primaryContext datetime_primary() {
			return getRuleContext(Datetime_primaryContext.class,0);
		}
		public Datetime_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_factorContext datetime_factor() throws RecognitionException {
		Datetime_factorContext _localctx = new Datetime_factorContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_datetime_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2585); datetime_primary();
			setState(2587);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2586); time_zone();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_primaryContext extends ParserRuleContext {
		public Datetime_value_functionContext datetime_value_function() {
			return getRuleContext(Datetime_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Datetime_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_primaryContext datetime_primary() throws RecognitionException {
		Datetime_primaryContext _localctx = new Datetime_primaryContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_datetime_primary);
		try {
			setState(2591);
			switch (_input.LA(1)) {
			case T__228:
			case T__196:
			case T__135:
			case T__125:
			case T__122:
			case T__121:
			case T__118:
			case T__102:
			case T__98:
			case T__97:
			case T__95:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__20:
			case T__7:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case SUM:
			case MIN:
			case MAX:
			case COUNT:
			case UNSIGNED_INTEGER:
			case ALPHA:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2589); value_expression_primary();
				}
				break;
			case T__235:
			case T__53:
			case T__37:
				enterOuterAlt(_localctx, 2);
				{
				setState(2590); datetime_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zoneContext extends ParserRuleContext {
		public Time_zone_specifierContext time_zone_specifier() {
			return getRuleContext(Time_zone_specifierContext.class,0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_zone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_zone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_zone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_zoneContext time_zone() throws RecognitionException {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2593); match(T__134);
			setState(2594); time_zone_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zone_specifierContext extends ParserRuleContext {
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Time_zone_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_zone_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_zone_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_zone_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_zone_specifierContext time_zone_specifier() throws RecognitionException {
		Time_zone_specifierContext _localctx = new Time_zone_specifierContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_time_zone_specifier);
		try {
			setState(2600);
			switch (_input.LA(1)) {
			case T__21:
				enterOuterAlt(_localctx, 1);
				{
				setState(2596); match(T__21);
				}
				break;
			case T__90:
				enterOuterAlt(_localctx, 2);
				{
				setState(2597); match(T__90);
				setState(2598); match(T__18);
				setState(2599); interval_value_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public Interval_factorContext interval_factor() {
			return getRuleContext(Interval_factorContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(Sql92Parser.SOLIDUS, 0); }
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public Interval_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_termContext interval_term() throws RecognitionException {
		return interval_term(0);
	}

	private Interval_termContext interval_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Interval_termContext _localctx = new Interval_termContext(_ctx, _parentState);
		Interval_termContext _prevctx = _localctx;
		int _startState = 534;
		enterRecursionRule(_localctx, 534, RULE_interval_term, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2608);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				setState(2603); interval_factor();
				}
				break;
			case 2:
				{
				setState(2604); term(0);
				setState(2605); match(ASTERISK);
				setState(2606); interval_factor();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2615);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Interval_termContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_interval_term);
					setState(2610);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2611);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2612); interval_factor();
					}
					} 
				}
				setState(2617);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_factorContext extends ParserRuleContext {
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Interval_primaryContext interval_primary() {
			return getRuleContext(Interval_primaryContext.class,0);
		}
		public Interval_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_factorContext interval_factor() throws RecognitionException {
		Interval_factorContext _localctx = new Interval_factorContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_interval_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2619);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(2618); sign();
				}
			}

			setState(2621); interval_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_primaryContext extends ParserRuleContext {
		public Interval_qualifierContext interval_qualifier() {
			return getRuleContext(Interval_qualifierContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Interval_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_primaryContext interval_primary() throws RecognitionException {
		Interval_primaryContext _localctx = new Interval_primaryContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_interval_primary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2623); value_expression_primary();
			setState(2625);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2624); interval_qualifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_abbreviationContext extends ParserRuleContext {
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Case_abbreviationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_abbreviation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCase_abbreviation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCase_abbreviation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCase_abbreviation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_abbreviationContext case_abbreviation() throws RecognitionException {
		Case_abbreviationContext _localctx = new Case_abbreviationContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_case_abbreviation);
		int _la;
		try {
			setState(2646);
			switch (_input.LA(1)) {
			case T__196:
				enterOuterAlt(_localctx, 1);
				{
				setState(2627); match(T__196);
				setState(2628); match(LEFT_PAREN);
				setState(2629); value_expression();
				setState(2630); match(COMMA);
				setState(2631); value_expression();
				setState(2632); match(RIGHT_PAREN);
				}
				break;
			case T__122:
				enterOuterAlt(_localctx, 2);
				{
				setState(2634); match(T__122);
				setState(2635); match(LEFT_PAREN);
				setState(2636); value_expression();
				setState(2641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2637); match(COMMA);
					setState(2638); value_expression();
					}
					}
					setState(2643);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2644); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_specificationContext extends ParserRuleContext {
		public Searched_caseContext searched_case() {
			return getRuleContext(Searched_caseContext.class,0);
		}
		public Simple_caseContext simple_case() {
			return getRuleContext(Simple_caseContext.class,0);
		}
		public Case_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCase_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCase_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCase_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_specificationContext case_specification() throws RecognitionException {
		Case_specificationContext _localctx = new Case_specificationContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_case_specification);
		try {
			setState(2650);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2648); simple_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2649); searched_case();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_caseContext extends ParserRuleContext {
		public Case_operandContext case_operand() {
			return getRuleContext(Case_operandContext.class,0);
		}
		public List<Simple_when_clauseContext> simple_when_clause() {
			return getRuleContexts(Simple_when_clauseContext.class);
		}
		public Simple_when_clauseContext simple_when_clause(int i) {
			return getRuleContext(Simple_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public Simple_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_caseContext simple_case() throws RecognitionException {
		Simple_caseContext _localctx = new Simple_caseContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_simple_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2652); match(T__118);
			setState(2653); case_operand();
			setState(2655); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2654); simple_when_clause();
				}
				}
				setState(2657); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__192 );
			setState(2660);
			_la = _input.LA(1);
			if (_la==T__173) {
				{
				setState(2659); else_clause();
				}
			}

			setState(2662); match(T__127);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_caseContext extends ParserRuleContext {
		public List<Searched_when_clauseContext> searched_when_clause() {
			return getRuleContexts(Searched_when_clauseContext.class);
		}
		public Searched_when_clauseContext searched_when_clause(int i) {
			return getRuleContext(Searched_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public Searched_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSearched_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSearched_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSearched_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_caseContext searched_case() throws RecognitionException {
		Searched_caseContext _localctx = new Searched_caseContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_searched_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2664); match(T__118);
			setState(2666); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2665); searched_when_clause();
				}
				}
				setState(2668); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__192 );
			setState(2671);
			_la = _input.LA(1);
			if (_la==T__173) {
				{
				setState(2670); else_clause();
				}
			}

			setState(2673); match(T__127);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Case_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCase_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCase_operand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCase_operand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_operandContext case_operand() throws RecognitionException {
		Case_operandContext _localctx = new Case_operandContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_case_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2675); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_when_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public When_operandContext when_operand() {
			return getRuleContext(When_operandContext.class,0);
		}
		public Simple_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_when_clauseContext simple_when_clause() throws RecognitionException {
		Simple_when_clauseContext _localctx = new Simple_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_simple_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2677); match(T__192);
			setState(2678); when_operand();
			setState(2679); match(T__215);
			setState(2680); result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterElse_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitElse_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitElse_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_clauseContext else_clause() throws RecognitionException {
		Else_clauseContext _localctx = new Else_clauseContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_else_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2682); match(T__173);
			setState(2683); result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public When_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterWhen_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitWhen_operand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitWhen_operand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_operandContext when_operand() throws RecognitionException {
		When_operandContext _localctx = new When_operandContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_when_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2685); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultContext extends ParserRuleContext {
		public Result_expressionContext result_expression() {
			return getRuleContext(Result_expressionContext.class,0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterResult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitResult(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitResult(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResultContext result() throws RecognitionException {
		ResultContext _localctx = new ResultContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_result);
		try {
			setState(2689);
			switch (_input.LA(1)) {
			case T__235:
			case T__228:
			case T__213:
			case T__211:
			case T__196:
			case T__193:
			case T__184:
			case T__135:
			case T__125:
			case T__123:
			case T__122:
			case T__121:
			case T__118:
			case T__102:
			case T__98:
			case T__97:
			case T__95:
			case T__90:
			case T__88:
			case T__87:
			case T__86:
			case T__79:
			case T__69:
			case T__65:
			case T__53:
			case T__48:
			case T__42:
			case T__37:
			case T__20:
			case T__7:
			case T__4:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case SUM:
			case MIN:
			case MAX:
			case COUNT:
			case UNSIGNED_INTEGER:
			case ALPHA:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2687); result_expression();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2688); match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_expressionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Result_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterResult_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitResult_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitResult_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_expressionContext result_expression() throws RecognitionException {
		Result_expressionContext _localctx = new Result_expressionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_result_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2691); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_when_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Searched_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSearched_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSearched_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSearched_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_when_clauseContext searched_when_clause() throws RecognitionException {
		Searched_when_clauseContext _localctx = new Searched_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_searched_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2693); match(T__192);
			setState(2694); search_condition(0);
			setState(2695); match(T__215);
			setState(2696); result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Cast_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCast_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCast_operand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCast_operand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_operandContext cast_operand() throws RecognitionException {
		Cast_operandContext _localctx = new Cast_operandContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_cast_operand);
		try {
			setState(2700);
			switch (_input.LA(1)) {
			case T__235:
			case T__228:
			case T__213:
			case T__211:
			case T__196:
			case T__193:
			case T__184:
			case T__135:
			case T__125:
			case T__123:
			case T__122:
			case T__121:
			case T__118:
			case T__102:
			case T__98:
			case T__97:
			case T__95:
			case T__90:
			case T__88:
			case T__87:
			case T__86:
			case T__79:
			case T__69:
			case T__65:
			case T__53:
			case T__48:
			case T__42:
			case T__37:
			case T__20:
			case T__7:
			case T__4:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case SUM:
			case MIN:
			case MAX:
			case COUNT:
			case UNSIGNED_INTEGER:
			case ALPHA:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2698); value_expression();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2699); match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_functionContext extends ParserRuleContext {
		public Position_expressionContext position_expression() {
			return getRuleContext(Position_expressionContext.class,0);
		}
		public Extract_expressionContext extract_expression() {
			return getRuleContext(Extract_expressionContext.class,0);
		}
		public Length_expressionContext length_expression() {
			return getRuleContext(Length_expressionContext.class,0);
		}
		public Numeric_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumeric_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumeric_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumeric_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_value_functionContext numeric_value_function() throws RecognitionException {
		Numeric_value_functionContext _localctx = new Numeric_value_functionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_numeric_value_function);
		try {
			setState(2705);
			switch (_input.LA(1)) {
			case T__79:
				enterOuterAlt(_localctx, 1);
				{
				setState(2702); position_expression();
				}
				break;
			case T__86:
				enterOuterAlt(_localctx, 2);
				{
				setState(2703); extract_expression();
				}
				break;
			case T__213:
			case T__211:
			case T__193:
			case T__123:
				enterOuterAlt(_localctx, 3);
				{
				setState(2704); length_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_expressionContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression(int i) {
			return getRuleContext(Character_value_expressionContext.class,i);
		}
		public List<Character_value_expressionContext> character_value_expression() {
			return getRuleContexts(Character_value_expressionContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Position_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPosition_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPosition_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPosition_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_expressionContext position_expression() throws RecognitionException {
		Position_expressionContext _localctx = new Position_expressionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_position_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2707); match(T__79);
			setState(2708); match(LEFT_PAREN);
			setState(2709); character_value_expression(0);
			setState(2710); match(T__234);
			setState(2711); character_value_expression(0);
			setState(2712); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_expressionContext extends ParserRuleContext {
		public Extract_fieldContext extract_field() {
			return getRuleContext(Extract_fieldContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Extract_sourceContext extract_source() {
			return getRuleContext(Extract_sourceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Extract_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtract_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtract_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtract_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_expressionContext extract_expression() throws RecognitionException {
		Extract_expressionContext _localctx = new Extract_expressionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_extract_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2714); match(T__86);
			setState(2715); match(LEFT_PAREN);
			setState(2716); extract_field();
			setState(2717); match(T__99);
			setState(2718); extract_source();
			setState(2719); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_sourceContext extends ParserRuleContext {
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Extract_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtract_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtract_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtract_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_sourceContext extract_source() throws RecognitionException {
		Extract_sourceContext _localctx = new Extract_sourceContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_extract_source);
		try {
			setState(2723);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2721); datetime_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2722); interval_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Length_expressionContext extends ParserRuleContext {
		public Char_length_expressionContext char_length_expression() {
			return getRuleContext(Char_length_expressionContext.class,0);
		}
		public Bit_length_expressionContext bit_length_expression() {
			return getRuleContext(Bit_length_expressionContext.class,0);
		}
		public Octet_length_expressionContext octet_length_expression() {
			return getRuleContext(Octet_length_expressionContext.class,0);
		}
		public Length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLength_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLength_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLength_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Length_expressionContext length_expression() throws RecognitionException {
		Length_expressionContext _localctx = new Length_expressionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_length_expression);
		try {
			setState(2728);
			switch (_input.LA(1)) {
			case T__211:
			case T__123:
				enterOuterAlt(_localctx, 1);
				{
				setState(2725); char_length_expression();
				}
				break;
			case T__193:
				enterOuterAlt(_localctx, 2);
				{
				setState(2726); octet_length_expression();
				}
				break;
			case T__213:
				enterOuterAlt(_localctx, 3);
				{
				setState(2727); bit_length_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_length_expressionContext extends ParserRuleContext {
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Char_length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_length_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterChar_length_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitChar_length_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitChar_length_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_length_expressionContext char_length_expression() throws RecognitionException {
		Char_length_expressionContext _localctx = new Char_length_expressionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_char_length_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2730);
			_la = _input.LA(1);
			if ( !(_la==T__211 || _la==T__123) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2731); match(LEFT_PAREN);
			setState(2732); string_value_expression();
			setState(2733); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Octet_length_expressionContext extends ParserRuleContext {
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Octet_length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_octet_length_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOctet_length_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOctet_length_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOctet_length_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Octet_length_expressionContext octet_length_expression() throws RecognitionException {
		Octet_length_expressionContext _localctx = new Octet_length_expressionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_octet_length_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2735); match(T__193);
			setState(2736); match(LEFT_PAREN);
			setState(2737); string_value_expression();
			setState(2738); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_length_expressionContext extends ParserRuleContext {
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Bit_length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_length_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_length_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_length_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_length_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_length_expressionContext bit_length_expression() throws RecognitionException {
		Bit_length_expressionContext _localctx = new Bit_length_expressionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_bit_length_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2740); match(T__213);
			setState(2741); match(LEFT_PAREN);
			setState(2742); string_value_expression();
			setState(2743); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_expressionContext extends ParserRuleContext {
		public Character_factorContext character_factor() {
			return getRuleContext(Character_factorContext.class,0);
		}
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode CONCATENATION() { return getToken(Sql92Parser.CONCATENATION, 0); }
		public Character_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_value_expressionContext character_value_expression() throws RecognitionException {
		return character_value_expression(0);
	}

	private Character_value_expressionContext character_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Character_value_expressionContext _localctx = new Character_value_expressionContext(_ctx, _parentState);
		Character_value_expressionContext _prevctx = _localctx;
		int _startState = 580;
		enterRecursionRule(_localctx, 580, RULE_character_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2746); character_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2753);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Character_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_character_value_expression);
					setState(2748);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2749); match(CONCATENATION);
					setState(2750); character_factor();
					}
					} 
				}
				setState(2755);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Character_factorContext extends ParserRuleContext {
		public Character_primaryContext character_primary() {
			return getRuleContext(Character_primaryContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Character_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_factorContext character_factor() throws RecognitionException {
		Character_factorContext _localctx = new Character_factorContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_character_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2756); character_primary();
			setState(2758);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2757); collate_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_primaryContext extends ParserRuleContext {
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Character_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_primaryContext character_primary() throws RecognitionException {
		Character_primaryContext _localctx = new Character_primaryContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_character_primary);
		try {
			setState(2762);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2760); value_expression_primary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2761); string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_functionContext extends ParserRuleContext {
		public Bit_value_functionContext bit_value_function() {
			return getRuleContext(Bit_value_functionContext.class,0);
		}
		public Character_value_functionContext character_value_function() {
			return getRuleContext(Character_value_functionContext.class,0);
		}
		public String_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterString_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitString_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitString_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_value_functionContext string_value_function() throws RecognitionException {
		String_value_functionContext _localctx = new String_value_functionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_string_value_function);
		try {
			setState(2766);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2764); character_value_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2765); bit_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_functionContext extends ParserRuleContext {
		public Trim_functionContext trim_function() {
			return getRuleContext(Trim_functionContext.class,0);
		}
		public Character_translationContext character_translation() {
			return getRuleContext(Character_translationContext.class,0);
		}
		public FoldContext fold() {
			return getRuleContext(FoldContext.class,0);
		}
		public Form_of_use_conversionContext form_of_use_conversion() {
			return getRuleContext(Form_of_use_conversionContext.class,0);
		}
		public Character_substring_functionContext character_substring_function() {
			return getRuleContext(Character_substring_functionContext.class,0);
		}
		public Character_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_value_functionContext character_value_function() throws RecognitionException {
		Character_value_functionContext _localctx = new Character_value_functionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_character_value_function);
		try {
			setState(2773);
			switch (_input.LA(1)) {
			case T__4:
				enterOuterAlt(_localctx, 1);
				{
				setState(2768); character_substring_function();
				}
				break;
			case T__88:
			case T__42:
				enterOuterAlt(_localctx, 2);
				{
				setState(2769); fold();
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 3);
				{
				setState(2770); form_of_use_conversion();
				}
				break;
			case T__65:
				enterOuterAlt(_localctx, 4);
				{
				setState(2771); character_translation();
				}
				break;
			case T__184:
				enterOuterAlt(_localctx, 5);
				{
				setState(2772); trim_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_value_functionContext extends ParserRuleContext {
		public Bit_substring_functionContext bit_substring_function() {
			return getRuleContext(Bit_substring_functionContext.class,0);
		}
		public Bit_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_value_functionContext bit_value_function() throws RecognitionException {
		Bit_value_functionContext _localctx = new Bit_value_functionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_bit_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2775); bit_substring_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_substring_functionContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public String_lengthContext string_length() {
			return getRuleContext(String_lengthContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Character_substring_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_substring_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_substring_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_substring_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_substring_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_substring_functionContext character_substring_function() throws RecognitionException {
		Character_substring_functionContext _localctx = new Character_substring_functionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_character_substring_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2777); match(T__4);
			setState(2778); match(LEFT_PAREN);
			setState(2779); character_value_expression(0);
			setState(2780); match(T__99);
			setState(2781); start_position();
			setState(2784);
			_la = _input.LA(1);
			if (_la==T__207) {
				{
				setState(2782); match(T__207);
				setState(2783); string_length();
				}
			}

			setState(2786); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_positionContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Start_positionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_position; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStart_position(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStart_position(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStart_position(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_positionContext start_position() throws RecognitionException {
		Start_positionContext _localctx = new Start_positionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_start_position);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2788); numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_lengthContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public String_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterString_length(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitString_length(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitString_length(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_lengthContext string_length() throws RecognitionException {
		String_lengthContext _localctx = new String_lengthContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_string_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2790); numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FoldContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public FoldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fold; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FoldContext fold() throws RecognitionException {
		FoldContext _localctx = new FoldContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_fold);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2792);
			_la = _input.LA(1);
			if ( !(_la==T__88 || _la==T__42) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2793); match(LEFT_PAREN);
			setState(2794); character_value_expression(0);
			setState(2795); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_translationContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Character_translationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_translation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_translation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_translation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_translation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_translationContext character_translation() throws RecognitionException {
		Character_translationContext _localctx = new Character_translationContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_character_translation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2797); match(T__65);
			setState(2798); match(LEFT_PAREN);
			setState(2799); character_value_expression(0);
			setState(2800); match(T__205);
			setState(2801); translation_name();
			setState(2802); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_functionContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Trim_operandsContext trim_operands() {
			return getRuleContext(Trim_operandsContext.class,0);
		}
		public Trim_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_functionContext trim_function() throws RecognitionException {
		Trim_functionContext _localctx = new Trim_functionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_trim_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804); match(T__184);
			setState(2805); match(LEFT_PAREN);
			setState(2806); trim_operands();
			setState(2807); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_operandsContext extends ParserRuleContext {
		public Trim_sourceContext trim_source() {
			return getRuleContext(Trim_sourceContext.class,0);
		}
		public Trim_specificationContext trim_specification() {
			return getRuleContext(Trim_specificationContext.class,0);
		}
		public Trim_characterContext trim_character() {
			return getRuleContext(Trim_characterContext.class,0);
		}
		public Trim_operandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_operands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_operands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_operands(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_operands(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_operandsContext trim_operands() throws RecognitionException {
		Trim_operandsContext _localctx = new Trim_operandsContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_trim_operands);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2813);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				setState(2810);
				_la = _input.LA(1);
				if (_la==T__233 || _la==T__96 || _la==T__52) {
					{
					setState(2809); trim_specification();
					}
				}

				setState(2812); trim_character();
				}
				break;
			}
			setState(2815); trim_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_characterContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Trim_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_character(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_character(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_character(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_characterContext trim_character() throws RecognitionException {
		Trim_characterContext _localctx = new Trim_characterContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_trim_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2817); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_sourceContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Trim_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_sourceContext trim_source() throws RecognitionException {
		Trim_sourceContext _localctx = new Trim_sourceContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_trim_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_substring_functionContext extends ParserRuleContext {
		public Bit_value_expressionContext bit_value_expression() {
			return getRuleContext(Bit_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public String_lengthContext string_length() {
			return getRuleContext(String_lengthContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Bit_substring_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_substring_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_substring_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_substring_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_substring_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_substring_functionContext bit_substring_function() throws RecognitionException {
		Bit_substring_functionContext _localctx = new Bit_substring_functionContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_bit_substring_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2821); match(T__4);
			setState(2822); match(LEFT_PAREN);
			setState(2823); bit_value_expression(0);
			setState(2824); match(T__99);
			setState(2825); start_position();
			setState(2828);
			_la = _input.LA(1);
			if (_la==T__207) {
				{
				setState(2826); match(T__207);
				setState(2827); string_length();
				}
			}

			setState(2830); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_value_expressionContext extends ParserRuleContext {
		public Bit_value_expressionContext bit_value_expression() {
			return getRuleContext(Bit_value_expressionContext.class,0);
		}
		public TerminalNode CONCATENATION() { return getToken(Sql92Parser.CONCATENATION, 0); }
		public Bit_factorContext bit_factor() {
			return getRuleContext(Bit_factorContext.class,0);
		}
		public Bit_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_value_expressionContext bit_value_expression() throws RecognitionException {
		return bit_value_expression(0);
	}

	private Bit_value_expressionContext bit_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bit_value_expressionContext _localctx = new Bit_value_expressionContext(_ctx, _parentState);
		Bit_value_expressionContext _prevctx = _localctx;
		int _startState = 612;
		enterRecursionRule(_localctx, 612, RULE_bit_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2833); bit_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2840);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,216,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bit_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_bit_value_expression);
					setState(2835);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2836); match(CONCATENATION);
					setState(2837); bit_factor();
					}
					} 
				}
				setState(2842);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,216,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Bit_factorContext extends ParserRuleContext {
		public Bit_primaryContext bit_primary() {
			return getRuleContext(Bit_primaryContext.class,0);
		}
		public Bit_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_factorContext bit_factor() throws RecognitionException {
		Bit_factorContext _localctx = new Bit_factorContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_bit_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2843); bit_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_primaryContext extends ParserRuleContext {
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Bit_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_primaryContext bit_primary() throws RecognitionException {
		Bit_primaryContext _localctx = new Bit_primaryContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_bit_primary);
		try {
			setState(2847);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2845); value_expression_primary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2846); string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureContext extends ParserRuleContext {
		public Parameter_declaration_listContext parameter_declaration_list() {
			return getRuleContext(Parameter_declaration_listContext.class,0);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(Sql92Parser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(Sql92Parser.SEMICOLON, i);
		}
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Sql_procedure_statementContext sql_procedure_statement() {
			return getRuleContext(Sql_procedure_statementContext.class,0);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureContext procedure() throws RecognitionException {
		ProcedureContext _localctx = new ProcedureContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2849); match(T__80);
			setState(2850); procedure_name();
			setState(2851); parameter_declaration_list();
			setState(2852); match(SEMICOLON);
			setState(2853); sql_procedure_statement();
			setState(2854); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_procedure_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2856); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_declaration_listContext extends ParserRuleContext {
		public Parameter_declarationContext parameter_declaration(int i) {
			return getRuleContext(Parameter_declarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Parameter_declarationContext> parameter_declaration() {
			return getRuleContexts(Parameter_declarationContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Parameter_declaration_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_declaration_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_declaration_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_declaration_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_declaration_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_declaration_listContext parameter_declaration_list() throws RecognitionException {
		Parameter_declaration_listContext _localctx = new Parameter_declaration_listContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_parameter_declaration_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2858); match(LEFT_PAREN);
			setState(2859); parameter_declaration();
			setState(2864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2860); match(COMMA);
				setState(2861); parameter_declaration();
				}
				}
				setState(2866);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2867); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_declarationContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Status_parameterContext status_parameter() {
			return getRuleContext(Status_parameterContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_declarationContext parameter_declaration() throws RecognitionException {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_parameter_declaration);
		try {
			setState(2873);
			switch (_input.LA(1)) {
			case COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2869); parameter_name();
				setState(2870); data_type();
				}
				break;
			case T__236:
			case T__105:
				enterOuterAlt(_localctx, 2);
				{
				setState(2872); status_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Status_parameterContext extends ParserRuleContext {
		public Status_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_status_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatus_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatus_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatus_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Status_parameterContext status_parameter() throws RecognitionException {
		Status_parameterContext _localctx = new Status_parameterContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_status_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2875);
			_la = _input.LA(1);
			if ( !(_la==T__236 || _la==T__105) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_procedure_statementContext extends ParserRuleContext {
		public Sql_schema_statementContext sql_schema_statement() {
			return getRuleContext(Sql_schema_statementContext.class,0);
		}
		public Sql_dynamic_statementContext sql_dynamic_statement() {
			return getRuleContext(Sql_dynamic_statementContext.class,0);
		}
		public Sql_transaction_statementContext sql_transaction_statement() {
			return getRuleContext(Sql_transaction_statementContext.class,0);
		}
		public Sql_session_statementContext sql_session_statement() {
			return getRuleContext(Sql_session_statementContext.class,0);
		}
		public Sql_connection_statementContext sql_connection_statement() {
			return getRuleContext(Sql_connection_statementContext.class,0);
		}
		public Sql_diagnostics_statementContext sql_diagnostics_statement() {
			return getRuleContext(Sql_diagnostics_statementContext.class,0);
		}
		public Sql_data_statementContext sql_data_statement() {
			return getRuleContext(Sql_data_statementContext.class,0);
		}
		public Sql_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_procedure_statementContext sql_procedure_statement() throws RecognitionException {
		Sql_procedure_statementContext _localctx = new Sql_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_sql_procedure_statement);
		try {
			setState(2884);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2877); sql_schema_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2878); sql_data_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2879); sql_transaction_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2880); sql_connection_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2881); sql_session_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2882); sql_dynamic_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2883); sql_diagnostics_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModuleContext extends ParserRuleContext {
		public Language_clauseContext language_clause() {
			return getRuleContext(Language_clauseContext.class,0);
		}
		public Temporary_table_declarationContext temporary_table_declaration(int i) {
			return getRuleContext(Temporary_table_declarationContext.class,i);
		}
		public List<Module_contentsContext> module_contents() {
			return getRuleContexts(Module_contentsContext.class);
		}
		public List<Temporary_table_declarationContext> temporary_table_declaration() {
			return getRuleContexts(Temporary_table_declarationContext.class);
		}
		public Module_authorization_clauseContext module_authorization_clause() {
			return getRuleContext(Module_authorization_clauseContext.class,0);
		}
		public Module_name_clauseContext module_name_clause() {
			return getRuleContext(Module_name_clauseContext.class,0);
		}
		public Module_contentsContext module_contents(int i) {
			return getRuleContext(Module_contentsContext.class,i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModuleContext module() throws RecognitionException {
		ModuleContext _localctx = new ModuleContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_module);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2886); module_name_clause();
			setState(2887); language_clause();
			setState(2888); module_authorization_clause();
			setState(2892);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2889); temporary_table_declaration();
					}
					} 
				}
				setState(2894);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			}
			setState(2896); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2895); module_contents();
				}
				}
				setState(2898); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__208 || _la==T__80 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_contentsContext extends ParserRuleContext {
		public Dynamic_declare_cursorContext dynamic_declare_cursor() {
			return getRuleContext(Dynamic_declare_cursorContext.class,0);
		}
		public ProcedureContext procedure() {
			return getRuleContext(ProcedureContext.class,0);
		}
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public Module_contentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_contents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_contents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_contents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_contents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_contentsContext module_contents() throws RecognitionException {
		Module_contentsContext _localctx = new Module_contentsContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_module_contents);
		try {
			setState(2903);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2900); declare_cursor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2901); dynamic_declare_cursor();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2902); procedure();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_name_clauseContext extends ParserRuleContext {
		public Module_character_set_specificationContext module_character_set_specification() {
			return getRuleContext(Module_character_set_specificationContext.class,0);
		}
		public Module_nameContext module_name() {
			return getRuleContext(Module_nameContext.class,0);
		}
		public Module_name_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_name_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_name_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_name_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_name_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_name_clauseContext module_name_clause() throws RecognitionException {
		Module_name_clauseContext _localctx = new Module_name_clauseContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_module_name_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2905); match(T__135);
			setState(2906); module_name();
			setState(2907); module_character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_nameContext module_name() throws RecognitionException {
		Module_nameContext _localctx = new Module_nameContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_module_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2909); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_character_set_specificationContext extends ParserRuleContext {
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Module_character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_character_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_character_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_character_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_character_set_specificationContext module_character_set_specification() throws RecognitionException {
		Module_character_set_specificationContext _localctx = new Module_character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_module_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2911); match(T__66);
			setState(2912); match(T__16);
			setState(2913); character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_authorization_clauseContext extends ParserRuleContext {
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Module_authorization_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_authorization_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_authorization_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_authorization_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_authorization_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_authorization_clauseContext module_authorization_clause() throws RecognitionException {
		Module_authorization_clauseContext _localctx = new Module_authorization_clauseContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_module_authorization_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2915); match(T__202);
			setState(2916); schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_authorization_identifierContext extends ParserRuleContext {
		public Authorization_identifierContext authorization_identifier() {
			return getRuleContext(Authorization_identifierContext.class,0);
		}
		public Module_authorization_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_authorization_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_authorization_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_authorization_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_authorization_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_authorization_identifierContext module_authorization_identifier() throws RecognitionException {
		Module_authorization_identifierContext _localctx = new Module_authorization_identifierContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_module_authorization_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2918); authorization_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Temporary_table_declarationContext extends ParserRuleContext {
		public Qualified_local_table_nameContext qualified_local_table_name() {
			return getRuleContext(Qualified_local_table_nameContext.class,0);
		}
		public Table_element_listContext table_element_list() {
			return getRuleContext(Table_element_listContext.class,0);
		}
		public Temporary_table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporary_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTemporary_table_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTemporary_table_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTemporary_table_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Temporary_table_declarationContext temporary_table_declaration() throws RecognitionException {
		Temporary_table_declarationContext _localctx = new Temporary_table_declarationContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_temporary_table_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2920); match(T__208);
			setState(2921); match(T__21);
			setState(2922); match(T__158);
			setState(2923); match(T__230);
			setState(2924); qualified_local_table_name();
			setState(2925); table_element_list();
			setState(2930);
			_la = _input.LA(1);
			if (_la==T__71) {
				{
				setState(2926); match(T__71);
				setState(2927); match(T__39);
				setState(2928);
				_la = _input.LA(1);
				if ( !(_la==T__237 || _la==T__67) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2929); match(T__70);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_specificationContext cursor_specification() {
			return getRuleContext(Cursor_specificationContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDeclare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDeclare_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDeclare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2932); match(T__208);
			setState(2933); cursor_name();
			setState(2935);
			_la = _input.LA(1);
			if (_la==T__38) {
				{
				setState(2934); match(T__38);
				}
			}

			setState(2938);
			_la = _input.LA(1);
			if (_la==T__195) {
				{
				setState(2937); match(T__195);
				}
			}

			setState(2940); match(T__1);
			setState(2941); match(T__207);
			setState(2942); cursor_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_specificationContext extends ParserRuleContext {
		public Updatability_clauseContext updatability_clause() {
			return getRuleContext(Updatability_clauseContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Cursor_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCursor_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCursor_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCursor_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_specificationContext cursor_specification() throws RecognitionException {
		Cursor_specificationContext _localctx = new Cursor_specificationContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_cursor_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2944); query_expression();
			setState(2946);
			_la = _input.LA(1);
			if (_la==T__51) {
				{
				setState(2945); order_by_clause();
				}
			}

			setState(2949);
			_la = _input.LA(1);
			if (_la==T__207) {
				{
				setState(2948); updatability_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_declare_cursorContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Statement_nameContext statement_name() {
			return getRuleContext(Statement_nameContext.class,0);
		}
		public Dynamic_declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_declare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_declare_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_declare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_declare_cursorContext dynamic_declare_cursor() throws RecognitionException {
		Dynamic_declare_cursorContext _localctx = new Dynamic_declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_dynamic_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2951); match(T__208);
			setState(2952); cursor_name();
			setState(2954);
			_la = _input.LA(1);
			if (_la==T__38) {
				{
				setState(2953); match(T__38);
				}
			}

			setState(2957);
			_la = _input.LA(1);
			if (_la==T__195) {
				{
				setState(2956); match(T__195);
				}
			}

			setState(2959); match(T__1);
			setState(2960); match(T__207);
			setState(2961); statement_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode UNDERSCORE() { return getToken(Sql92Parser.UNDERSCORE, 0); }
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Actual_identifierContext actual_identifier() {
			return getRuleContext(Actual_identifierContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2965);
			_la = _input.LA(1);
			if (_la==UNDERSCORE) {
				{
				setState(2963); match(UNDERSCORE);
				setState(2964); character_set_specification();
				}
			}

			setState(2967); actual_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Actual_identifierContext extends ParserRuleContext {
		public Delimited_identifierContext delimited_identifier() {
			return getRuleContext(Delimited_identifierContext.class,0);
		}
		public Regular_identifierContext regular_identifier() {
			return getRuleContext(Regular_identifierContext.class,0);
		}
		public Actual_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_actual_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterActual_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitActual_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitActual_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Actual_identifierContext actual_identifier() throws RecognitionException {
		Actual_identifierContext _localctx = new Actual_identifierContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_actual_identifier);
		try {
			setState(2971);
			switch (_input.LA(1)) {
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(2969); regular_identifier();
				}
				break;
			case DOUBLE_QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2970); delimited_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_identifierContext extends ParserRuleContext {
		public Identifier_bodyContext identifier_body() {
			return getRuleContext(Identifier_bodyContext.class,0);
		}
		public Regular_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRegular_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRegular_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRegular_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_identifierContext regular_identifier() throws RecognitionException {
		Regular_identifierContext _localctx = new Regular_identifierContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_regular_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2973); identifier_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_bodyContext extends ParserRuleContext {
		public List<TerminalNode> UNDERSCORE() { return getTokens(Sql92Parser.UNDERSCORE); }
		public TerminalNode UNDERSCORE(int i) {
			return getToken(Sql92Parser.UNDERSCORE, i);
		}
		public List<Identifier_partContext> identifier_part() {
			return getRuleContexts(Identifier_partContext.class);
		}
		public Identifier_startContext identifier_start() {
			return getRuleContext(Identifier_startContext.class,0);
		}
		public Identifier_partContext identifier_part(int i) {
			return getRuleContext(Identifier_partContext.class,i);
		}
		public Identifier_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIdentifier_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIdentifier_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIdentifier_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identifier_bodyContext identifier_body() throws RecognitionException {
		Identifier_bodyContext _localctx = new Identifier_bodyContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_identifier_body);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2975); identifier_start();
			setState(2980);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2978);
					switch (_input.LA(1)) {
					case UNDERSCORE:
						{
						setState(2976); match(UNDERSCORE);
						}
						break;
					case DIGIT:
					case ALPHA:
						{
						setState(2977); identifier_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2982);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_startContext extends ParserRuleContext {
		public TerminalNode ALPHA() { return getToken(Sql92Parser.ALPHA, 0); }
		public Identifier_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIdentifier_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIdentifier_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIdentifier_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identifier_startContext identifier_start() throws RecognitionException {
		Identifier_startContext _localctx = new Identifier_startContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_identifier_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2983); match(ALPHA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_partContext extends ParserRuleContext {
		public TerminalNode DIGIT() { return getToken(Sql92Parser.DIGIT, 0); }
		public Identifier_startContext identifier_start() {
			return getRuleContext(Identifier_startContext.class,0);
		}
		public Identifier_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIdentifier_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIdentifier_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIdentifier_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identifier_partContext identifier_part() throws RecognitionException {
		Identifier_partContext _localctx = new Identifier_partContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_identifier_part);
		try {
			setState(2987);
			switch (_input.LA(1)) {
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(2985); identifier_start();
				}
				break;
			case DIGIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2986); match(DIGIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delimited_identifierContext extends ParserRuleContext {
		public Delimited_identifier_bodyContext delimited_identifier_body() {
			return getRuleContext(Delimited_identifier_bodyContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE(int i) {
			return getToken(Sql92Parser.DOUBLE_QUOTE, i);
		}
		public List<TerminalNode> DOUBLE_QUOTE() { return getTokens(Sql92Parser.DOUBLE_QUOTE); }
		public Delimited_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimited_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelimited_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelimited_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelimited_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delimited_identifierContext delimited_identifier() throws RecognitionException {
		Delimited_identifierContext _localctx = new Delimited_identifierContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_delimited_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2989); match(DOUBLE_QUOTE);
			setState(2990); delimited_identifier_body();
			setState(2991); match(DOUBLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delimited_identifier_bodyContext extends ParserRuleContext {
		public Delimited_identifier_partContext delimited_identifier_part(int i) {
			return getRuleContext(Delimited_identifier_partContext.class,i);
		}
		public List<Delimited_identifier_partContext> delimited_identifier_part() {
			return getRuleContexts(Delimited_identifier_partContext.class);
		}
		public Delimited_identifier_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimited_identifier_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelimited_identifier_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelimited_identifier_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelimited_identifier_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delimited_identifier_bodyContext delimited_identifier_body() throws RecognitionException {
		Delimited_identifier_bodyContext _localctx = new Delimited_identifier_bodyContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_delimited_identifier_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2994); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2993); delimited_identifier_part();
				}
				}
				setState(2996); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__238) | (1L << T__237) | (1L << T__236) | (1L << T__235) | (1L << T__234) | (1L << T__233) | (1L << T__232) | (1L << T__231) | (1L << T__230) | (1L << T__229) | (1L << T__228) | (1L << T__227) | (1L << T__226) | (1L << T__225) | (1L << T__224) | (1L << T__223) | (1L << T__222) | (1L << T__221) | (1L << T__220) | (1L << T__219) | (1L << T__218) | (1L << T__217) | (1L << T__216) | (1L << T__215) | (1L << T__214) | (1L << T__213) | (1L << T__212) | (1L << T__211) | (1L << T__210) | (1L << T__209) | (1L << T__208) | (1L << T__207) | (1L << T__206) | (1L << T__205) | (1L << T__204) | (1L << T__203) | (1L << T__202) | (1L << T__201) | (1L << T__200) | (1L << T__199) | (1L << T__198) | (1L << T__197) | (1L << T__196) | (1L << T__195) | (1L << T__194) | (1L << T__193) | (1L << T__192) | (1L << T__191) | (1L << T__190) | (1L << T__189) | (1L << T__188) | (1L << T__187) | (1L << T__186) | (1L << T__185) | (1L << T__184) | (1L << T__183) | (1L << T__182) | (1L << T__181) | (1L << T__180) | (1L << T__179) | (1L << T__178) | (1L << T__177) | (1L << T__176))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__175 - 64)) | (1L << (T__174 - 64)) | (1L << (T__173 - 64)) | (1L << (T__172 - 64)) | (1L << (T__171 - 64)) | (1L << (T__170 - 64)) | (1L << (T__169 - 64)) | (1L << (T__168 - 64)) | (1L << (T__167 - 64)) | (1L << (T__166 - 64)) | (1L << (T__165 - 64)) | (1L << (T__164 - 64)) | (1L << (T__163 - 64)) | (1L << (T__162 - 64)) | (1L << (T__161 - 64)) | (1L << (T__160 - 64)) | (1L << (T__159 - 64)) | (1L << (T__158 - 64)) | (1L << (T__157 - 64)) | (1L << (T__156 - 64)) | (1L << (T__155 - 64)) | (1L << (T__154 - 64)) | (1L << (T__153 - 64)) | (1L << (T__152 - 64)) | (1L << (T__151 - 64)) | (1L << (T__150 - 64)) | (1L << (T__149 - 64)) | (1L << (T__148 - 64)) | (1L << (T__147 - 64)) | (1L << (T__146 - 64)) | (1L << (T__145 - 64)) | (1L << (T__144 - 64)) | (1L << (T__143 - 64)) | (1L << (T__142 - 64)) | (1L << (T__141 - 64)) | (1L << (T__140 - 64)) | (1L << (T__139 - 64)) | (1L << (T__138 - 64)) | (1L << (T__137 - 64)) | (1L << (T__136 - 64)) | (1L << (T__135 - 64)) | (1L << (T__134 - 64)) | (1L << (T__133 - 64)) | (1L << (T__132 - 64)) | (1L << (T__131 - 64)) | (1L << (T__130 - 64)) | (1L << (T__129 - 64)) | (1L << (T__128 - 64)) | (1L << (T__127 - 64)) | (1L << (T__126 - 64)) | (1L << (T__125 - 64)) | (1L << (T__124 - 64)) | (1L << (T__123 - 64)) | (1L << (T__122 - 64)) | (1L << (T__121 - 64)) | (1L << (T__120 - 64)) | (1L << (T__119 - 64)) | (1L << (T__118 - 64)) | (1L << (T__117 - 64)) | (1L << (T__116 - 64)) | (1L << (T__115 - 64)) | (1L << (T__114 - 64)) | (1L << (T__113 - 64)) | (1L << (T__112 - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (T__111 - 128)) | (1L << (T__110 - 128)) | (1L << (T__109 - 128)) | (1L << (T__108 - 128)) | (1L << (T__107 - 128)) | (1L << (T__106 - 128)) | (1L << (T__105 - 128)) | (1L << (T__104 - 128)) | (1L << (T__103 - 128)) | (1L << (T__102 - 128)) | (1L << (T__101 - 128)) | (1L << (T__100 - 128)) | (1L << (T__99 - 128)) | (1L << (T__98 - 128)) | (1L << (T__97 - 128)) | (1L << (T__96 - 128)) | (1L << (T__95 - 128)) | (1L << (T__94 - 128)) | (1L << (T__93 - 128)) | (1L << (T__92 - 128)) | (1L << (T__91 - 128)) | (1L << (T__90 - 128)) | (1L << (T__89 - 128)) | (1L << (T__88 - 128)) | (1L << (T__87 - 128)) | (1L << (T__86 - 128)) | (1L << (T__85 - 128)) | (1L << (T__84 - 128)) | (1L << (T__83 - 128)) | (1L << (T__82 - 128)) | (1L << (T__81 - 128)) | (1L << (T__80 - 128)) | (1L << (T__79 - 128)) | (1L << (T__78 - 128)) | (1L << (T__77 - 128)) | (1L << (T__76 - 128)) | (1L << (T__75 - 128)) | (1L << (T__74 - 128)) | (1L << (T__73 - 128)) | (1L << (T__72 - 128)) | (1L << (T__71 - 128)) | (1L << (T__70 - 128)) | (1L << (T__69 - 128)) | (1L << (T__68 - 128)) | (1L << (T__67 - 128)) | (1L << (T__66 - 128)) | (1L << (T__65 - 128)) | (1L << (T__64 - 128)) | (1L << (T__63 - 128)) | (1L << (T__62 - 128)) | (1L << (T__61 - 128)) | (1L << (T__60 - 128)) | (1L << (T__59 - 128)) | (1L << (T__58 - 128)) | (1L << (T__57 - 128)) | (1L << (T__56 - 128)) | (1L << (T__55 - 128)) | (1L << (T__54 - 128)) | (1L << (T__53 - 128)) | (1L << (T__52 - 128)) | (1L << (T__51 - 128)) | (1L << (T__50 - 128)) | (1L << (T__49 - 128)) | (1L << (T__48 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (T__47 - 192)) | (1L << (T__46 - 192)) | (1L << (T__45 - 192)) | (1L << (T__44 - 192)) | (1L << (T__43 - 192)) | (1L << (T__42 - 192)) | (1L << (T__41 - 192)) | (1L << (T__40 - 192)) | (1L << (T__39 - 192)) | (1L << (T__38 - 192)) | (1L << (T__37 - 192)) | (1L << (T__36 - 192)) | (1L << (T__35 - 192)) | (1L << (T__34 - 192)) | (1L << (T__33 - 192)) | (1L << (T__32 - 192)) | (1L << (T__31 - 192)) | (1L << (T__30 - 192)) | (1L << (T__29 - 192)) | (1L << (T__28 - 192)) | (1L << (T__27 - 192)) | (1L << (T__26 - 192)) | (1L << (T__25 - 192)) | (1L << (T__24 - 192)) | (1L << (T__23 - 192)) | (1L << (T__22 - 192)) | (1L << (T__21 - 192)) | (1L << (T__20 - 192)) | (1L << (T__19 - 192)) | (1L << (T__18 - 192)) | (1L << (T__17 - 192)) | (1L << (T__16 - 192)) | (1L << (T__15 - 192)) | (1L << (T__14 - 192)) | (1L << (T__13 - 192)) | (1L << (T__12 - 192)) | (1L << (T__11 - 192)) | (1L << (T__10 - 192)) | (1L << (T__9 - 192)) | (1L << (T__8 - 192)) | (1L << (T__7 - 192)) | (1L << (T__6 - 192)) | (1L << (T__5 - 192)) | (1L << (T__4 - 192)) | (1L << (T__3 - 192)) | (1L << (T__2 - 192)) | (1L << (T__1 - 192)) | (1L << (T__0 - 192)) | (1L << (WHITE_SPACE - 192)) | (1L << (TAB - 192)) | (1L << (NEWLINE - 192)) | (1L << (PLUS_SIGN - 192)) | (1L << (MINUS_SIGN - 192)) | (1L << (PERCENT - 192)) | (1L << (AMPERSAND - 192)) | (1L << (QUOTE - 192)) | (1L << (LEFT_PAREN - 192)) | (1L << (RIGHT_PAREN - 192)) | (1L << (ASTERISK - 192)) | (1L << (COMMA - 192)) | (1L << (PERIOD - 192)) | (1L << (SOLIDUS - 192)) | (1L << (COLON - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (SEMICOLON - 256)) | (1L << (LESS_THAN - 256)) | (1L << (LESS_THAN_OR_EQ - 256)) | (1L << (EQ - 256)) | (1L << (NOT_EQ - 256)) | (1L << (GREATER_THAN - 256)) | (1L << (GREATER_THAN_OR_EQ - 256)) | (1L << (QUESTION_MARK - 256)) | (1L << (UNDERSCORE - 256)) | (1L << (VERTICAL_BAR - 256)) | (1L << (LEFT_BRACKET - 256)) | (1L << (RIGHT_BRACKET - 256)) | (1L << (CONCATENATION - 256)) | (1L << (DOUBLE_PERIOD - 256)) | (1L << (NULL - 256)) | (1L << (DEFAULT - 256)) | (1L << (SOME - 256)) | (1L << (ANY - 256)) | (1L << (ALL - 256)) | (1L << (DISTINCT - 256)) | (1L << (AVG - 256)) | (1L << (SUM - 256)) | (1L << (MIN - 256)) | (1L << (MAX - 256)) | (1L << (COUNT - 256)) | (1L << (SIGNED_INTEGER - 256)) | (1L << (UNSIGNED_INTEGER - 256)) | (1L << (DECIMAL_LITERAL - 256)) | (1L << (APPROXIMATE_NUMERIC_LITERAL - 256)) | (1L << (TIMESTAMP_STRING - 256)) | (1L << (DATE_STRING - 256)) | (1L << (DATE_VALUE - 256)) | (1L << (TIME_STRING - 256)) | (1L << (TIME_VALUE - 256)) | (1L << (INTERVAL_STRING - 256)) | (1L << (DIGIT - 256)) | (1L << (ALPHA - 256)) | (1L << (COMMENT - 256)) | (1L << (QUOTE_BIT - 256)) | (1L << (QUOTE_HEX - 256)) | (1L << (LANGUAGE_NAME - 256)) | (1L << (QUOTE_STRING - 256)) | (1L << (SQL_LANGUAGE_IDENTIFIER - 256)) | (1L << (IDENTIFIER - 256)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delimited_identifier_partContext extends ParserRuleContext {
		public Nondoublequote_characterContext nondoublequote_character() {
			return getRuleContext(Nondoublequote_characterContext.class,0);
		}
		public Doublequote_symbolContext doublequote_symbol() {
			return getRuleContext(Doublequote_symbolContext.class,0);
		}
		public Delimited_identifier_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimited_identifier_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelimited_identifier_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelimited_identifier_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelimited_identifier_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delimited_identifier_partContext delimited_identifier_part() throws RecognitionException {
		Delimited_identifier_partContext _localctx = new Delimited_identifier_partContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_delimited_identifier_part);
		try {
			setState(3000);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2998); nondoublequote_character();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2999); doublequote_symbol();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public Catalog_nameContext catalog_name() {
			return getRuleContext(Catalog_nameContext.class,0);
		}
		public Unqualified_schema_nameContext unqualified_schema_name() {
			return getRuleContext(Unqualified_schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3005);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				setState(3002); catalog_name();
				setState(3003); match(PERIOD);
				}
				break;
			}
			setState(3007); unqualified_schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Catalog_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Catalog_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalog_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCatalog_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCatalog_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCatalog_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Catalog_nameContext catalog_name() throws RecognitionException {
		Catalog_nameContext _localctx = new Catalog_nameContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_catalog_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3009); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unqualified_schema_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unqualified_schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unqualified_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnqualified_schema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnqualified_schema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnqualified_schema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unqualified_schema_nameContext unqualified_schema_name() throws RecognitionException {
		Unqualified_schema_nameContext _localctx = new Unqualified_schema_nameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_unqualified_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3011); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_string_literalContext extends ParserRuleContext {
		public TerminalNode UNDERSCORE() { return getToken(Sql92Parser.UNDERSCORE, 0); }
		public TerminalNode QUOTE_STRING(int i) {
			return getToken(Sql92Parser.QUOTE_STRING, i);
		}
		public List<TerminalNode> QUOTE_STRING() { return getTokens(Sql92Parser.QUOTE_STRING); }
		public SeperatorContext seperator(int i) {
			return getRuleContext(SeperatorContext.class,i);
		}
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public List<SeperatorContext> seperator() {
			return getRuleContexts(SeperatorContext.class);
		}
		public Character_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_string_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_string_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_string_literalContext character_string_literal() throws RecognitionException {
		Character_string_literalContext _localctx = new Character_string_literalContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_character_string_literal);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3015);
			_la = _input.LA(1);
			if (_la==UNDERSCORE) {
				{
				setState(3013); match(UNDERSCORE);
				setState(3014); character_set_specification();
				}
			}

			setState(3017); match(QUOTE_STRING);
			setState(3027);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3019); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3018); seperator();
						}
						}
						setState(3021); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (WHITE_SPACE - 240)) | (1L << (NEWLINE - 240)) | (1L << (COMMENT - 240)))) != 0) );
					setState(3023); match(QUOTE_STRING);
					}
					} 
				}
				setState(3029);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_nameContext extends ParserRuleContext {
		public TerminalNode SQL_LANGUAGE_IDENTIFIER() { return getToken(Sql92Parser.SQL_LANGUAGE_IDENTIFIER, 0); }
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_set_nameContext character_set_name() throws RecognitionException {
		Character_set_nameContext _localctx = new Character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_character_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			_la = _input.LA(1);
			if (((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & ((1L << (DOUBLE_QUOTE - 245)) | (1L << (UNDERSCORE - 245)) | (1L << (ALPHA - 245)))) != 0)) {
				{
				setState(3030); schema_name();
				setState(3031); match(PERIOD);
				}
			}

			setState(3035); match(SQL_LANGUAGE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_specificationContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_set_specificationContext character_set_specification() throws RecognitionException {
		Character_set_specificationContext _localctx = new Character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3037); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_character_repertoire_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Standard_character_repertoire_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_character_repertoire_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStandard_character_repertoire_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStandard_character_repertoire_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStandard_character_repertoire_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_character_repertoire_nameContext standard_character_repertoire_name() throws RecognitionException {
		Standard_character_repertoire_nameContext _localctx = new Standard_character_repertoire_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_standard_character_repertoire_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3039); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_defined_character_repertoire_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Implementation_defined_character_repertoire_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_defined_character_repertoire_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterImplementation_defined_character_repertoire_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitImplementation_defined_character_repertoire_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitImplementation_defined_character_repertoire_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_defined_character_repertoire_nameContext implementation_defined_character_repertoire_name() throws RecognitionException {
		Implementation_defined_character_repertoire_nameContext _localctx = new Implementation_defined_character_repertoire_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_implementation_defined_character_repertoire_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3041); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_defined_character_repertoire_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public User_defined_character_repertoire_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_defined_character_repertoire_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUser_defined_character_repertoire_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUser_defined_character_repertoire_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUser_defined_character_repertoire_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_defined_character_repertoire_nameContext user_defined_character_repertoire_name() throws RecognitionException {
		User_defined_character_repertoire_nameContext _localctx = new User_defined_character_repertoire_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_user_defined_character_repertoire_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3043); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_universal_character_form_of_use_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Standard_universal_character_form_of_use_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_universal_character_form_of_use_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStandard_universal_character_form_of_use_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStandard_universal_character_form_of_use_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStandard_universal_character_form_of_use_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_universal_character_form_of_use_nameContext standard_universal_character_form_of_use_name() throws RecognitionException {
		Standard_universal_character_form_of_use_nameContext _localctx = new Standard_universal_character_form_of_use_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_standard_universal_character_form_of_use_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3045); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_defined_universal_character_form_of_use_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Implementation_defined_universal_character_form_of_use_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_defined_universal_character_form_of_use_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterImplementation_defined_universal_character_form_of_use_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitImplementation_defined_universal_character_form_of_use_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitImplementation_defined_universal_character_form_of_use_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_defined_universal_character_form_of_use_nameContext implementation_defined_universal_character_form_of_use_name() throws RecognitionException {
		Implementation_defined_universal_character_form_of_use_nameContext _localctx = new Implementation_defined_universal_character_form_of_use_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_implementation_defined_universal_character_form_of_use_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3047); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Qualified_local_table_nameContext qualified_local_table_name() {
			return getRuleContext(Qualified_local_table_nameContext.class,0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_table_name);
		try {
			setState(3051);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3049); qualified_name();
				}
				break;
			case T__135:
				enterOuterAlt(_localctx, 2);
				{
				setState(3050); qualified_local_table_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_name_definitionContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_name_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_name_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_name_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_name_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_name_definitionContext constraint_name_definition() throws RecognitionException {
		Constraint_name_definitionContext _localctx = new Constraint_name_definitionContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_constraint_name_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3053); match(T__177);
			setState(3054); constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_constraint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3056); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_specificationContext extends ParserRuleContext {
		public Unique_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnique_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnique_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnique_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unique_specificationContext unique_specification() throws RecognitionException {
		Unique_specificationContext _localctx = new Unique_specificationContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_unique_specification);
		try {
			setState(3061);
			switch (_input.LA(1)) {
			case T__132:
				enterOuterAlt(_localctx, 1);
				{
				setState(3058); match(T__132);
				}
				break;
			case T__55:
				enterOuterAlt(_localctx, 2);
				{
				setState(3059); match(T__55);
				setState(3060); match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_specificationContext extends ParserRuleContext {
		public Referential_triggered_actionContext referential_triggered_action() {
			return getRuleContext(Referential_triggered_actionContext.class,0);
		}
		public Match_typeContext match_type() {
			return getRuleContext(Match_typeContext.class,0);
		}
		public Referenced_table_and_columnsContext referenced_table_and_columns() {
			return getRuleContext(Referenced_table_and_columnsContext.class,0);
		}
		public References_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferences_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferences_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferences_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final References_specificationContext references_specification() throws RecognitionException {
		References_specificationContext _localctx = new References_specificationContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_references_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3063); match(T__106);
			setState(3064); referenced_table_and_columns();
			setState(3067);
			_la = _input.LA(1);
			if (_la==T__156) {
				{
				setState(3065); match(T__156);
				setState(3066); match_type();
				}
			}

			setState(3070);
			_la = _input.LA(1);
			if (_la==T__71) {
				{
				setState(3069); referential_triggered_action();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referenced_table_and_columnsContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Reference_column_listContext reference_column_list() {
			return getRuleContext(Reference_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Referenced_table_and_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenced_table_and_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferenced_table_and_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferenced_table_and_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferenced_table_and_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referenced_table_and_columnsContext referenced_table_and_columns() throws RecognitionException {
		Referenced_table_and_columnsContext _localctx = new Referenced_table_and_columnsContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_referenced_table_and_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072); table_name();
			setState(3077);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3073); match(LEFT_PAREN);
				setState(3074); reference_column_list();
				setState(3075); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Reference_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReference_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReference_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReference_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_column_listContext reference_column_list() throws RecognitionException {
		Reference_column_listContext _localctx = new Reference_column_listContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_reference_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3079); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_typeContext extends ParserRuleContext {
		public Match_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterMatch_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitMatch_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitMatch_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_typeContext match_type() throws RecognitionException {
		Match_typeContext _localctx = new Match_typeContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_match_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3081);
			_la = _input.LA(1);
			if ( !(_la==T__50 || _la==T__22) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referential_triggered_actionContext extends ParserRuleContext {
		public Delete_ruleContext delete_rule() {
			return getRuleContext(Delete_ruleContext.class,0);
		}
		public Update_ruleContext update_rule() {
			return getRuleContext(Update_ruleContext.class,0);
		}
		public Referential_triggered_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referential_triggered_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferential_triggered_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferential_triggered_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferential_triggered_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referential_triggered_actionContext referential_triggered_action() throws RecognitionException {
		Referential_triggered_actionContext _localctx = new Referential_triggered_actionContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_referential_triggered_action);
		int _la;
		try {
			setState(3091);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3083); update_rule();
				setState(3085);
				_la = _input.LA(1);
				if (_la==T__71) {
					{
					setState(3084); delete_rule();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3087); delete_rule();
				setState(3089);
				_la = _input.LA(1);
				if (_la==T__71) {
					{
					setState(3088); update_rule();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_ruleContext extends ParserRuleContext {
		public Referential_actionContext referential_action() {
			return getRuleContext(Referential_actionContext.class,0);
		}
		public Update_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdate_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdate_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdate_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_ruleContext update_rule() throws RecognitionException {
		Update_ruleContext _localctx = new Update_ruleContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_update_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3093); match(T__71);
			setState(3094); match(T__142);
			setState(3095); referential_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_ruleContext extends ParserRuleContext {
		public Referential_actionContext referential_action() {
			return getRuleContext(Referential_actionContext.class,0);
		}
		public Delete_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelete_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelete_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelete_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_ruleContext delete_rule() throws RecognitionException {
		Delete_ruleContext _localctx = new Delete_ruleContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_delete_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3097); match(T__71);
			setState(3098); match(T__237);
			setState(3099); referential_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referential_actionContext extends ParserRuleContext {
		public Referential_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referential_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferential_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferential_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferential_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referential_actionContext referential_action() throws RecognitionException {
		Referential_actionContext _localctx = new Referential_actionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_referential_action);
		int _la;
		try {
			setState(3106);
			switch (_input.LA(1)) {
			case T__109:
				enterOuterAlt(_localctx, 1);
				{
				setState(3101); match(T__109);
				}
				break;
			case T__171:
				enterOuterAlt(_localctx, 2);
				{
				setState(3102); match(T__171);
				setState(3103);
				_la = _input.LA(1);
				if ( !(_la==NULL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case T__82:
				enterOuterAlt(_localctx, 3);
				{
				setState(3104); match(T__82);
				setState(3105); match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_attributesContext extends ParserRuleContext {
		public Constraint_check_timeContext constraint_check_time() {
			return getRuleContext(Constraint_check_timeContext.class,0);
		}
		public Constraint_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_attributesContext constraint_attributes() throws RecognitionException {
		Constraint_attributesContext _localctx = new Constraint_attributesContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_constraint_attributes);
		int _la;
		try {
			setState(3122);
			switch (_input.LA(1)) {
			case T__44:
				enterOuterAlt(_localctx, 1);
				{
				setState(3108); constraint_check_time();
				setState(3113);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(3110);
					_la = _input.LA(1);
					if (_la==T__161) {
						{
						setState(3109); match(T__161);
						}
					}

					setState(3112); match(T__176);
					}
					break;
				}
				}
				break;
			case T__176:
			case T__161:
				enterOuterAlt(_localctx, 2);
				{
				setState(3116);
				_la = _input.LA(1);
				if (_la==T__161) {
					{
					setState(3115); match(T__161);
					}
				}

				setState(3118); match(T__176);
				setState(3120);
				_la = _input.LA(1);
				if (_la==T__44) {
					{
					setState(3119); constraint_check_time();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_check_timeContext extends ParserRuleContext {
		public Constraint_check_timeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_check_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_check_time(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_check_time(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_check_time(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_check_timeContext constraint_check_time() throws RecognitionException {
		Constraint_check_timeContext _localctx = new Constraint_check_timeContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_constraint_check_time);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3124); match(T__44);
			setState(3125);
			_la = _input.LA(1);
			if ( !(_la==T__223 || _la==T__206) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_constraint_definitionContext extends ParserRuleContext {
		public Unique_specificationContext unique_specification() {
			return getRuleContext(Unique_specificationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Unique_column_listContext unique_column_list() {
			return getRuleContext(Unique_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Unique_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnique_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnique_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnique_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unique_constraint_definitionContext unique_constraint_definition() throws RecognitionException {
		Unique_constraint_definitionContext _localctx = new Unique_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_unique_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3127); unique_specification();
			setState(3128); match(LEFT_PAREN);
			setState(3129); unique_column_list();
			setState(3130); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Unique_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnique_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnique_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnique_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unique_column_listContext unique_column_list() throws RecognitionException {
		Unique_column_listContext _localctx = new Unique_column_listContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_unique_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3132); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referential_constraint_definitionContext extends ParserRuleContext {
		public References_specificationContext references_specification() {
			return getRuleContext(References_specificationContext.class,0);
		}
		public Referencing_columnsContext referencing_columns() {
			return getRuleContext(Referencing_columnsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Referential_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referential_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferential_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferential_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferential_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referential_constraint_definitionContext referential_constraint_definition() throws RecognitionException {
		Referential_constraint_definitionContext _localctx = new Referential_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_referential_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3134); match(T__89);
			setState(3135); match(T__5);
			setState(3136); match(LEFT_PAREN);
			setState(3137); referencing_columns();
			setState(3138); match(RIGHT_PAREN);
			setState(3139); references_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_columnsContext extends ParserRuleContext {
		public Reference_column_listContext reference_column_list() {
			return getRuleContext(Reference_column_listContext.class,0);
		}
		public Referencing_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferencing_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferencing_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferencing_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_columnsContext referencing_columns() throws RecognitionException {
		Referencing_columnsContext _localctx = new Referencing_columnsContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_referencing_columns);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3141); reference_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collate_clauseContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collate_clauseContext collate_clause() throws RecognitionException {
		Collate_clauseContext _localctx = new Collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_collate_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3143); match(T__153);
			setState(3144); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_nameContext collation_name() throws RecognitionException {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3146); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public As_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAs_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAs_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAs_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_clauseContext as_clause() throws RecognitionException {
		As_clauseContext _localctx = new As_clauseContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_as_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3148); match(T__175);
			setState(3149); column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public Grouping_column_reference_listContext grouping_column_reference_list() {
			return getRuleContext(Grouping_column_reference_listContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_group_by_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3151); match(T__186);
			setState(3152); match(T__93);
			setState(3153); grouping_column_reference_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_column_reference_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Grouping_column_referenceContext grouping_column_reference(int i) {
			return getRuleContext(Grouping_column_referenceContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public List<Grouping_column_referenceContext> grouping_column_reference() {
			return getRuleContexts(Grouping_column_referenceContext.class);
		}
		public Grouping_column_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_column_reference_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGrouping_column_reference_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGrouping_column_reference_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGrouping_column_reference_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_column_reference_listContext grouping_column_reference_list() throws RecognitionException {
		Grouping_column_reference_listContext _localctx = new Grouping_column_reference_listContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_grouping_column_reference_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3155); grouping_column_reference();
			setState(3160);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3156); match(COMMA);
					setState(3157); grouping_column_reference();
					}
					} 
				}
				setState(3162);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_column_referenceContext extends ParserRuleContext {
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Grouping_column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_column_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGrouping_column_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGrouping_column_reference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGrouping_column_reference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_column_referenceContext grouping_column_reference() throws RecognitionException {
		Grouping_column_referenceContext _localctx = new Grouping_column_referenceContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_grouping_column_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3163); column_reference();
			setState(3165);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(3164); collate_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public Sort_specification_listContext sort_specification_list() {
			return getRuleContext(Sort_specification_listContext.class,0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_order_by_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167); match(T__51);
			setState(3168); match(T__93);
			setState(3169); sort_specification_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specification_listContext extends ParserRuleContext {
		public List<Sort_specificationContext> sort_specification() {
			return getRuleContexts(Sort_specificationContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Sort_specificationContext sort_specification(int i) {
			return getRuleContext(Sort_specificationContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Sort_specification_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specification_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSort_specification_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSort_specification_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSort_specification_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_specification_listContext sort_specification_list() throws RecognitionException {
		Sort_specification_listContext _localctx = new Sort_specification_listContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_sort_specification_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3171); sort_specification();
			setState(3176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3172); match(COMMA);
				setState(3173); sort_specification();
				}
				}
				setState(3178);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specificationContext extends ParserRuleContext {
		public Sort_keyContext sort_key() {
			return getRuleContext(Sort_keyContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Ordering_specificationContext ordering_specification() {
			return getRuleContext(Ordering_specificationContext.class,0);
		}
		public Sort_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSort_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSort_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSort_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_specificationContext sort_specification() throws RecognitionException {
		Sort_specificationContext _localctx = new Sort_specificationContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_sort_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3179); sort_key();
			setState(3181);
			_la = _input.LA(1);
			if (_la==T__153) {
				{
				setState(3180); collate_clause();
				}
			}

			setState(3184);
			_la = _input.LA(1);
			if (_la==T__226 || _la==T__28) {
				{
				setState(3183); ordering_specification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_keyContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Sort_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSort_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSort_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSort_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_keyContext sort_key() throws RecognitionException {
		Sort_keyContext _localctx = new Sort_keyContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_sort_key);
		try {
			setState(3188);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3186); column_name();
				}
				break;
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3187); match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordering_specificationContext extends ParserRuleContext {
		public Ordering_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordering_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOrdering_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOrdering_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOrdering_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ordering_specificationContext ordering_specification() throws RecognitionException {
		Ordering_specificationContext _localctx = new Ordering_specificationContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_ordering_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3190);
			_la = _input.LA(1);
			if ( !(_la==T__226 || _la==T__28) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Updatability_clauseContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Updatability_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatability_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdatability_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdatability_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdatability_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Updatability_clauseContext updatability_clause() throws RecognitionException {
		Updatability_clauseContext _localctx = new Updatability_clauseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_updatability_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192); match(T__207);
			setState(3200);
			switch (_input.LA(1)) {
			case T__91:
				{
				setState(3193); match(T__91);
				setState(3194); match(T__140);
				}
				break;
			case T__142:
				{
				setState(3195); match(T__142);
				setState(3198);
				_la = _input.LA(1);
				if (_la==T__238) {
					{
					setState(3196); match(T__238);
					setState(3197); column_name_list();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_clauseContext extends ParserRuleContext {
		public Default_optionContext default_option() {
			return getRuleContext(Default_optionContext.class,0);
		}
		public Default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDefault_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDefault_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDefault_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_clauseContext default_clause() throws RecognitionException {
		Default_clauseContext _localctx = new Default_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3202); match(DEFAULT);
			setState(3203); default_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_optionContext extends ParserRuleContext {
		public Datetime_value_functionContext datetime_value_function() {
			return getRuleContext(Datetime_value_functionContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Default_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDefault_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDefault_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDefault_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_optionContext default_option() throws RecognitionException {
		Default_optionContext _localctx = new Default_optionContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_default_option);
		try {
			setState(3212);
			switch (_input.LA(1)) {
			case T__228:
			case T__125:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__7:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case UNDERSCORE:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3205); literal();
				}
				break;
			case T__235:
			case T__53:
			case T__37:
				enterOuterAlt(_localctx, 2);
				{
				setState(3206); datetime_value_function();
				}
				break;
			case T__20:
				enterOuterAlt(_localctx, 3);
				{
				setState(3207); match(T__20);
				}
				break;
			case T__102:
				enterOuterAlt(_localctx, 4);
				{
				setState(3208); match(T__102);
				}
				break;
			case T__95:
				enterOuterAlt(_localctx, 5);
				{
				setState(3209); match(T__95);
				}
				break;
			case T__98:
				enterOuterAlt(_localctx, 6);
				{
				setState(3210); match(T__98);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3211); match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public General_literalContext general_literal() {
			return getRuleContext(General_literalContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_literal);
		int _la;
		try {
			setState(3219);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3215);
				_la = _input.LA(1);
				if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
					{
					setState(3214); sign();
					}
				}

				setState(3217); match(UNSIGNED_INTEGER);
				}
				break;
			case T__228:
			case T__125:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__7:
			case UNDERSCORE:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3218); general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_literalContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public General_literalContext general_literal() {
			return getRuleContext(General_literalContext.class,0);
		}
		public Unsigned_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnsigned_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnsigned_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnsigned_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unsigned_literalContext unsigned_literal() throws RecognitionException {
		Unsigned_literalContext _localctx = new Unsigned_literalContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_unsigned_literal);
		try {
			setState(3223);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3221); match(UNSIGNED_INTEGER);
				}
				break;
			case T__228:
			case T__125:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__7:
			case UNDERSCORE:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3222); general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_literalContext extends ParserRuleContext {
		public Interval_literalContext interval_literal() {
			return getRuleContext(Interval_literalContext.class,0);
		}
		public Bit_string_literalContext bit_string_literal() {
			return getRuleContext(Bit_string_literalContext.class,0);
		}
		public Character_string_literalContext character_string_literal() {
			return getRuleContext(Character_string_literalContext.class,0);
		}
		public Hex_string_literalContext hex_string_literal() {
			return getRuleContext(Hex_string_literalContext.class,0);
		}
		public National_character_string_literalContext national_character_string_literal() {
			return getRuleContext(National_character_string_literalContext.class,0);
		}
		public Datetime_literalContext datetime_literal() {
			return getRuleContext(Datetime_literalContext.class,0);
		}
		public General_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGeneral_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGeneral_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGeneral_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_literalContext general_literal() throws RecognitionException {
		General_literalContext _localctx = new General_literalContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_general_literal);
		try {
			setState(3231);
			switch (_input.LA(1)) {
			case UNDERSCORE:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3225); character_string_literal();
				}
				break;
			case T__125:
				enterOuterAlt(_localctx, 2);
				{
				setState(3226); national_character_string_literal();
				}
				break;
			case T__7:
				enterOuterAlt(_localctx, 3);
				{
				setState(3227); bit_string_literal();
				}
				break;
			case T__228:
				enterOuterAlt(_localctx, 4);
				{
				setState(3228); hex_string_literal();
				}
				break;
			case T__90:
			case T__87:
			case T__48:
				enterOuterAlt(_localctx, 5);
				{
				setState(3229); datetime_literal();
				}
				break;
			case T__69:
				enterOuterAlt(_localctx, 6);
				{
				setState(3230); interval_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class National_character_string_literalContext extends ParserRuleContext {
		public TerminalNode QUOTE_STRING(int i) {
			return getToken(Sql92Parser.QUOTE_STRING, i);
		}
		public List<TerminalNode> QUOTE_STRING() { return getTokens(Sql92Parser.QUOTE_STRING); }
		public SeperatorContext seperator(int i) {
			return getRuleContext(SeperatorContext.class,i);
		}
		public List<SeperatorContext> seperator() {
			return getRuleContexts(SeperatorContext.class);
		}
		public National_character_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_national_character_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNational_character_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNational_character_string_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNational_character_string_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final National_character_string_literalContext national_character_string_literal() throws RecognitionException {
		National_character_string_literalContext _localctx = new National_character_string_literalContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_national_character_string_literal);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3233); match(T__125);
			setState(3234); match(QUOTE_STRING);
			setState(3244);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,271,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3236); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3235); seperator();
						}
						}
						setState(3238); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (WHITE_SPACE - 240)) | (1L << (NEWLINE - 240)) | (1L << (COMMENT - 240)))) != 0) );
					setState(3240); match(QUOTE_STRING);
					}
					} 
				}
				setState(3246);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,271,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_string_literalContext extends ParserRuleContext {
		public TerminalNode QUOTE_BIT(int i) {
			return getToken(Sql92Parser.QUOTE_BIT, i);
		}
		public SeperatorContext seperator(int i) {
			return getRuleContext(SeperatorContext.class,i);
		}
		public List<SeperatorContext> seperator() {
			return getRuleContexts(SeperatorContext.class);
		}
		public List<TerminalNode> QUOTE_BIT() { return getTokens(Sql92Parser.QUOTE_BIT); }
		public Bit_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_string_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_string_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_string_literalContext bit_string_literal() throws RecognitionException {
		Bit_string_literalContext _localctx = new Bit_string_literalContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_bit_string_literal);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3247); match(T__7);
			setState(3248); match(QUOTE_BIT);
			setState(3258);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3250); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3249); seperator();
						}
						}
						setState(3252); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (WHITE_SPACE - 240)) | (1L << (NEWLINE - 240)) | (1L << (COMMENT - 240)))) != 0) );
					setState(3254); match(QUOTE_BIT);
					}
					} 
				}
				setState(3260);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hex_string_literalContext extends ParserRuleContext {
		public SeperatorContext seperator(int i) {
			return getRuleContext(SeperatorContext.class,i);
		}
		public List<TerminalNode> QUOTE_HEX() { return getTokens(Sql92Parser.QUOTE_HEX); }
		public TerminalNode QUOTE_HEX(int i) {
			return getToken(Sql92Parser.QUOTE_HEX, i);
		}
		public List<SeperatorContext> seperator() {
			return getRuleContexts(SeperatorContext.class);
		}
		public Hex_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hex_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterHex_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitHex_string_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitHex_string_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hex_string_literalContext hex_string_literal() throws RecognitionException {
		Hex_string_literalContext _localctx = new Hex_string_literalContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_hex_string_literal);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3261); match(T__228);
			setState(3262); match(QUOTE_HEX);
			setState(3272);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3264); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3263); seperator();
						}
						}
						setState(3266); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (WHITE_SPACE - 240)) | (1L << (NEWLINE - 240)) | (1L << (COMMENT - 240)))) != 0) );
					setState(3268); match(QUOTE_HEX);
					}
					} 
				}
				setState(3274);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_literalContext extends ParserRuleContext {
		public Timestamp_literalContext timestamp_literal() {
			return getRuleContext(Timestamp_literalContext.class,0);
		}
		public Date_literalContext date_literal() {
			return getRuleContext(Date_literalContext.class,0);
		}
		public Time_literalContext time_literal() {
			return getRuleContext(Time_literalContext.class,0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_literalContext datetime_literal() throws RecognitionException {
		Datetime_literalContext _localctx = new Datetime_literalContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_datetime_literal);
		try {
			setState(3278);
			switch (_input.LA(1)) {
			case T__87:
				enterOuterAlt(_localctx, 1);
				{
				setState(3275); date_literal();
				}
				break;
			case T__90:
				enterOuterAlt(_localctx, 2);
				{
				setState(3276); time_literal();
				}
				break;
			case T__48:
				enterOuterAlt(_localctx, 3);
				{
				setState(3277); timestamp_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_literalContext extends ParserRuleContext {
		public TerminalNode DATE_STRING() { return getToken(Sql92Parser.DATE_STRING, 0); }
		public Date_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDate_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDate_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDate_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_literalContext date_literal() throws RecognitionException {
		Date_literalContext _localctx = new Date_literalContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_date_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3280); match(T__87);
			setState(3281); match(DATE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_literalContext extends ParserRuleContext {
		public TerminalNode TIME_STRING() { return getToken(Sql92Parser.TIME_STRING, 0); }
		public Time_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_literalContext time_literal() throws RecognitionException {
		Time_literalContext _localctx = new Time_literalContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_time_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3283); match(T__90);
			setState(3284); match(TIME_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_literalContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP_STRING() { return getToken(Sql92Parser.TIMESTAMP_STRING, 0); }
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTimestamp_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTimestamp_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTimestamp_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timestamp_literalContext timestamp_literal() throws RecognitionException {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_timestamp_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3286); match(T__48);
			setState(3287); match(TIMESTAMP_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_literalContext extends ParserRuleContext {
		public Interval_qualifierContext interval_qualifier() {
			return getRuleContext(Interval_qualifierContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode INTERVAL_STRING() { return getToken(Sql92Parser.INTERVAL_STRING, 0); }
		public Interval_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_literalContext interval_literal() throws RecognitionException {
		Interval_literalContext _localctx = new Interval_literalContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_interval_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3289); match(T__69);
			setState(3291);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(3290); sign();
				}
			}

			setState(3293); match(INTERVAL_STRING);
			setState(3294); interval_qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_value_functionContext extends ParserRuleContext {
		public Current_date_value_functionContext current_date_value_function() {
			return getRuleContext(Current_date_value_functionContext.class,0);
		}
		public Current_time_value_functionContext current_time_value_function() {
			return getRuleContext(Current_time_value_functionContext.class,0);
		}
		public Current_timestamp_value_functionContext current_timestamp_value_function() {
			return getRuleContext(Current_timestamp_value_functionContext.class,0);
		}
		public Datetime_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_value_functionContext datetime_value_function() throws RecognitionException {
		Datetime_value_functionContext _localctx = new Datetime_value_functionContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_datetime_value_function);
		try {
			setState(3299);
			switch (_input.LA(1)) {
			case T__53:
				enterOuterAlt(_localctx, 1);
				{
				setState(3296); current_date_value_function();
				}
				break;
			case T__235:
				enterOuterAlt(_localctx, 2);
				{
				setState(3297); current_time_value_function();
				}
				break;
			case T__37:
				enterOuterAlt(_localctx, 3);
				{
				setState(3298); current_timestamp_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_date_value_functionContext extends ParserRuleContext {
		public Current_date_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_date_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCurrent_date_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCurrent_date_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCurrent_date_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_date_value_functionContext current_date_value_function() throws RecognitionException {
		Current_date_value_functionContext _localctx = new Current_date_value_functionContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_current_date_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3301); match(T__53);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_time_value_functionContext extends ParserRuleContext {
		public Time_precisionContext time_precision() {
			return getRuleContext(Time_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Current_time_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_time_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCurrent_time_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCurrent_time_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCurrent_time_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_time_value_functionContext current_time_value_function() throws RecognitionException {
		Current_time_value_functionContext _localctx = new Current_time_value_functionContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_current_time_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3303); match(T__235);
			setState(3308);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(3304); match(LEFT_PAREN);
				setState(3305); time_precision();
				setState(3306); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_timestamp_value_functionContext extends ParserRuleContext {
		public Timestamp_precisionContext timestamp_precision() {
			return getRuleContext(Timestamp_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Current_timestamp_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_timestamp_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCurrent_timestamp_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCurrent_timestamp_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCurrent_timestamp_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_timestamp_value_functionContext current_timestamp_value_function() throws RecognitionException {
		Current_timestamp_value_functionContext _localctx = new Current_timestamp_value_functionContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_current_timestamp_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3310); match(T__37);
			setState(3315);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(3311); match(LEFT_PAREN);
				setState(3312); timestamp_precision();
				setState(3313); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3317); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3319); column_name();
			setState(3324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3320); match(COMMA);
				setState(3321); column_name();
				}
				}
				setState(3326);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Character_string_typeContext character_string_type() {
			return getRuleContext(Character_string_typeContext.class,0);
		}
		public National_character_string_typeContext national_character_string_type() {
			return getRuleContext(National_character_string_typeContext.class,0);
		}
		public Numeric_typeContext numeric_type() {
			return getRuleContext(Numeric_typeContext.class,0);
		}
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Interval_typeContext interval_type() {
			return getRuleContext(Interval_typeContext.class,0);
		}
		public Datetime_typeContext datetime_type() {
			return getRuleContext(Datetime_typeContext.class,0);
		}
		public Bit_string_typeContext bit_string_type() {
			return getRuleContext(Bit_string_typeContext.class,0);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_data_type);
		int _la;
		try {
			setState(3338);
			switch (_input.LA(1)) {
			case T__113:
			case T__112:
			case T__83:
				enterOuterAlt(_localctx, 1);
				{
				setState(3327); character_string_type();
				setState(3331);
				_la = _input.LA(1);
				if (_la==T__113) {
					{
					setState(3328); match(T__113);
					setState(3329); match(T__171);
					setState(3330); character_set_specification();
					}
				}

				}
				break;
			case T__59:
			case T__46:
				enterOuterAlt(_localctx, 2);
				{
				setState(3333); national_character_string_type();
				}
				break;
			case T__204:
				enterOuterAlt(_localctx, 3);
				{
				setState(3334); bit_string_type();
				}
				break;
			case T__191:
			case T__169:
			case T__159:
			case T__116:
			case T__76:
			case T__68:
			case T__36:
			case T__32:
			case T__27:
				enterOuterAlt(_localctx, 4);
				{
				setState(3335); numeric_type();
				}
				break;
			case T__90:
			case T__87:
			case T__48:
				enterOuterAlt(_localctx, 5);
				{
				setState(3336); datetime_type();
				}
				break;
			case T__69:
				enterOuterAlt(_localctx, 6);
				{
				setState(3337); interval_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_string_typeContext extends ParserRuleContext {
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_string_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_string_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_string_typeContext character_string_type() throws RecognitionException {
		Character_string_typeContext _localctx = new Character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_character_string_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3345);
			switch (_input.LA(1)) {
			case T__113:
			case T__112:
				{
				setState(3340);
				_la = _input.LA(1);
				if ( !(_la==T__113 || _la==T__112) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3342);
				_la = _input.LA(1);
				if (_la==T__19) {
					{
					setState(3341); match(T__19);
					}
				}

				}
				break;
			case T__83:
				{
				setState(3344); match(T__83);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3351);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3347); match(LEFT_PAREN);
				setState(3348); length();
				setState(3349); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class National_character_string_typeContext extends ParserRuleContext {
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public National_character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_national_character_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNational_character_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNational_character_string_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNational_character_string_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final National_character_string_typeContext national_character_string_type() throws RecognitionException {
		National_character_string_typeContext _localctx = new National_character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_national_character_string_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3365);
			switch (_input.LA(1)) {
			case T__59:
				{
				setState(3353); match(T__59);
				setState(3359);
				switch (_input.LA(1)) {
				case T__113:
				case T__112:
					{
					setState(3354);
					_la = _input.LA(1);
					if ( !(_la==T__113 || _la==T__112) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3356);
					_la = _input.LA(1);
					if (_la==T__19) {
						{
						setState(3355); match(T__19);
						}
					}

					}
					break;
				case T__83:
					{
					setState(3358); match(T__83);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__46:
				{
				setState(3361); match(T__46);
				setState(3363);
				_la = _input.LA(1);
				if (_la==T__19) {
					{
					setState(3362); match(T__19);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3371);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3367); match(LEFT_PAREN);
				setState(3368); length();
				setState(3369); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_string_typeContext extends ParserRuleContext {
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Bit_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_string_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_string_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_string_typeContext bit_string_type() throws RecognitionException {
		Bit_string_typeContext _localctx = new Bit_string_typeContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_bit_string_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3373); match(T__204);
			setState(3375);
			_la = _input.LA(1);
			if (_la==T__19) {
				{
				setState(3374); match(T__19);
				}
			}

			setState(3381);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3377); match(LEFT_PAREN);
				setState(3378); length();
				setState(3379); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_typeContext extends ParserRuleContext {
		public Exact_numeric_typeContext exact_numeric_type() {
			return getRuleContext(Exact_numeric_typeContext.class,0);
		}
		public Approximate_numeric_typeContext approximate_numeric_type() {
			return getRuleContext(Approximate_numeric_typeContext.class,0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumeric_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumeric_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_typeContext numeric_type() throws RecognitionException {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_numeric_type);
		try {
			setState(3385);
			switch (_input.LA(1)) {
			case T__169:
			case T__159:
			case T__116:
			case T__76:
			case T__32:
			case T__27:
				enterOuterAlt(_localctx, 1);
				{
				setState(3383); exact_numeric_type();
				}
				break;
			case T__191:
			case T__68:
			case T__36:
				enterOuterAlt(_localctx, 2);
				{
				setState(3384); approximate_numeric_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exact_numeric_typeContext extends ParserRuleContext {
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(Sql92Parser.COMMA, 0); }
		public ScaleContext scale() {
			return getRuleContext(ScaleContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Exact_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exact_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExact_numeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExact_numeric_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExact_numeric_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exact_numeric_typeContext exact_numeric_type() throws RecognitionException {
		Exact_numeric_typeContext _localctx = new Exact_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_exact_numeric_type);
		int _la;
		try {
			setState(3401);
			switch (_input.LA(1)) {
			case T__169:
			case T__116:
			case T__27:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3387);
				_la = _input.LA(1);
				if ( !(_la==T__169 || _la==T__116 || _la==T__27) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3396);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3388); match(LEFT_PAREN);
					setState(3389); precision();
					setState(3392);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3390); match(COMMA);
						setState(3391); scale();
						}
					}

					setState(3394); match(RIGHT_PAREN);
					}
				}

				}
				}
				break;
			case T__159:
				enterOuterAlt(_localctx, 2);
				{
				setState(3398); match(T__159);
				}
				break;
			case T__32:
				enterOuterAlt(_localctx, 3);
				{
				setState(3399); match(T__32);
				}
				break;
			case T__76:
				enterOuterAlt(_localctx, 4);
				{
				setState(3400); match(T__76);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Approximate_numeric_typeContext extends ParserRuleContext {
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Approximate_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximate_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterApproximate_numeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitApproximate_numeric_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitApproximate_numeric_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Approximate_numeric_typeContext approximate_numeric_type() throws RecognitionException {
		Approximate_numeric_typeContext _localctx = new Approximate_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_approximate_numeric_type);
		int _la;
		try {
			setState(3413);
			switch (_input.LA(1)) {
			case T__36:
				enterOuterAlt(_localctx, 1);
				{
				setState(3403); match(T__36);
				setState(3408);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3404); match(LEFT_PAREN);
					setState(3405); precision();
					setState(3406); match(RIGHT_PAREN);
					}
				}

				}
				break;
			case T__191:
				enterOuterAlt(_localctx, 2);
				{
				setState(3410); match(T__191);
				}
				break;
			case T__68:
				enterOuterAlt(_localctx, 3);
				{
				setState(3411); match(T__68);
				setState(3412); match(T__163);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_typeContext extends ParserRuleContext {
		public Timestamp_precisionContext timestamp_precision() {
			return getRuleContext(Timestamp_precisionContext.class,0);
		}
		public Time_precisionContext time_precision() {
			return getRuleContext(Time_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Datetime_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_typeContext datetime_type() throws RecognitionException {
		Datetime_typeContext _localctx = new Datetime_typeContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_datetime_type);
		int _la;
		try {
			setState(3437);
			switch (_input.LA(1)) {
			case T__87:
				enterOuterAlt(_localctx, 1);
				{
				setState(3415); match(T__87);
				}
				break;
			case T__90:
			case T__48:
				enterOuterAlt(_localctx, 2);
				{
				setState(3430);
				switch (_input.LA(1)) {
				case T__90:
					{
					setState(3416); match(T__90);
					setState(3421);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(3417); match(LEFT_PAREN);
						setState(3418); time_precision();
						setState(3419); match(RIGHT_PAREN);
						}
					}

					}
					break;
				case T__48:
					{
					setState(3423); match(T__48);
					setState(3428);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(3424); match(LEFT_PAREN);
						setState(3425); timestamp_precision();
						setState(3426); match(RIGHT_PAREN);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3435);
				_la = _input.LA(1);
				if (_la==T__189) {
					{
					setState(3432); match(T__189);
					setState(3433); match(T__90);
					setState(3434); match(T__18);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_fractional_seconds_precisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public Time_fractional_seconds_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_fractional_seconds_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_fractional_seconds_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_fractional_seconds_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_fractional_seconds_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_fractional_seconds_precisionContext time_fractional_seconds_precision() throws RecognitionException {
		Time_fractional_seconds_precisionContext _localctx = new Time_fractional_seconds_precisionContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_time_fractional_seconds_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3439); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_precisionContext extends ParserRuleContext {
		public Time_fractional_seconds_precisionContext time_fractional_seconds_precision() {
			return getRuleContext(Time_fractional_seconds_precisionContext.class,0);
		}
		public Time_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_precisionContext time_precision() throws RecognitionException {
		Time_precisionContext _localctx = new Time_precisionContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_time_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3441); time_fractional_seconds_precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_precisionContext extends ParserRuleContext {
		public Time_fractional_seconds_precisionContext time_fractional_seconds_precision() {
			return getRuleContext(Time_fractional_seconds_precisionContext.class,0);
		}
		public Timestamp_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTimestamp_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTimestamp_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTimestamp_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timestamp_precisionContext timestamp_precision() throws RecognitionException {
		Timestamp_precisionContext _localctx = new Timestamp_precisionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_timestamp_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443); time_fractional_seconds_precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_typeContext extends ParserRuleContext {
		public Interval_qualifierContext interval_qualifier() {
			return getRuleContext(Interval_qualifierContext.class,0);
		}
		public Interval_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_typeContext interval_type() throws RecognitionException {
		Interval_typeContext _localctx = new Interval_typeContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_interval_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3445); match(T__69);
			setState(3446); interval_qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_qualifierContext extends ParserRuleContext {
		public Sigle_datetime_fieldContext sigle_datetime_field() {
			return getRuleContext(Sigle_datetime_fieldContext.class,0);
		}
		public Start_fieldContext start_field() {
			return getRuleContext(Start_fieldContext.class,0);
		}
		public End_fieldContext end_field() {
			return getRuleContext(End_fieldContext.class,0);
		}
		public Interval_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_qualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_qualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_qualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_qualifierContext interval_qualifier() throws RecognitionException {
		Interval_qualifierContext _localctx = new Interval_qualifierContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_interval_qualifier);
		try {
			setState(3453);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3448); start_field();
				setState(3449); match(T__94);
				setState(3450); end_field();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3452); sigle_datetime_field();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_fieldContext extends ParserRuleContext {
		public Interval_leading_field_precisionContext interval_leading_field_precision() {
			return getRuleContext(Interval_leading_field_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Non_second_datetime_fieldContext non_second_datetime_field() {
			return getRuleContext(Non_second_datetime_fieldContext.class,0);
		}
		public Start_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStart_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStart_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStart_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_fieldContext start_field() throws RecognitionException {
		Start_fieldContext _localctx = new Start_fieldContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_start_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3455); non_second_datetime_field();
			setState(3460);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3456); match(LEFT_PAREN);
				setState(3457); interval_leading_field_precision();
				setState(3458); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_second_datetime_fieldContext extends ParserRuleContext {
		public Non_second_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_second_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNon_second_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNon_second_datetime_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNon_second_datetime_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_second_datetime_fieldContext non_second_datetime_field() throws RecognitionException {
		Non_second_datetime_fieldContext _localctx = new Non_second_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_non_second_datetime_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3462);
			_la = _input.LA(1);
			if ( !(_la==T__203 || _la==T__185 || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (T__170 - 69)) | (1L << (T__115 - 69)) | (1L << (T__111 - 69)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_leading_field_precisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public Interval_leading_field_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_leading_field_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_leading_field_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_leading_field_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_leading_field_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_leading_field_precisionContext interval_leading_field_precision() throws RecognitionException {
		Interval_leading_field_precisionContext _localctx = new Interval_leading_field_precisionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_interval_leading_field_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3464); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_fieldContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Interval_fractional_seconds_precisionContext interval_fractional_seconds_precision() {
			return getRuleContext(Interval_fractional_seconds_precisionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Non_second_datetime_fieldContext non_second_datetime_field() {
			return getRuleContext(Non_second_datetime_fieldContext.class,0);
		}
		public End_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterEnd_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitEnd_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitEnd_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_fieldContext end_field() throws RecognitionException {
		End_fieldContext _localctx = new End_fieldContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_end_field);
		try {
			setState(3472);
			switch (_input.LA(1)) {
			case T__203:
			case T__185:
			case T__170:
			case T__115:
			case T__111:
				enterOuterAlt(_localctx, 1);
				{
				setState(3466); non_second_datetime_field();
				}
				break;
			case T__174:
				enterOuterAlt(_localctx, 2);
				{
				setState(3467); match(T__174);
				setState(3468); match(LEFT_PAREN);
				setState(3469); interval_fractional_seconds_precision();
				setState(3470); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_fractional_seconds_precisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public Interval_fractional_seconds_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_fractional_seconds_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_fractional_seconds_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_fractional_seconds_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_fractional_seconds_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_fractional_seconds_precisionContext interval_fractional_seconds_precision() throws RecognitionException {
		Interval_fractional_seconds_precisionContext _localctx = new Interval_fractional_seconds_precisionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_interval_fractional_seconds_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3474); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sigle_datetime_fieldContext extends ParserRuleContext {
		public Interval_leading_field_precisionContext interval_leading_field_precision() {
			return getRuleContext(Interval_leading_field_precisionContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(Sql92Parser.LEFT_PAREN, i);
		}
		public TerminalNode COMMA() { return getToken(Sql92Parser.COMMA, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(Sql92Parser.RIGHT_PAREN); }
		public Interval_fractional_seconds_precisionContext interval_fractional_seconds_precision() {
			return getRuleContext(Interval_fractional_seconds_precisionContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(Sql92Parser.LEFT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(Sql92Parser.RIGHT_PAREN, i);
		}
		public Non_second_datetime_fieldContext non_second_datetime_field() {
			return getRuleContext(Non_second_datetime_fieldContext.class,0);
		}
		public Sigle_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sigle_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSigle_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSigle_datetime_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSigle_datetime_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sigle_datetime_fieldContext sigle_datetime_field() throws RecognitionException {
		Sigle_datetime_fieldContext _localctx = new Sigle_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_sigle_datetime_field);
		int _la;
		try {
			setState(3497);
			switch (_input.LA(1)) {
			case T__203:
			case T__185:
			case T__170:
			case T__115:
			case T__111:
				enterOuterAlt(_localctx, 1);
				{
				setState(3476); non_second_datetime_field();
				setState(3481);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(3477); match(LEFT_PAREN);
					setState(3478); interval_leading_field_precision();
					setState(3479); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case T__174:
				enterOuterAlt(_localctx, 2);
				{
				setState(3483); match(T__174);
				setState(3495);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(3484); match(LEFT_PAREN);
					setState(3485); interval_leading_field_precision();
					setState(3491);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3486); match(COMMA);
						setState(3487); match(LEFT_PAREN);
						setState(3488); interval_fractional_seconds_precision();
						setState(3489); match(RIGHT_PAREN);
						}
					}

					setState(3493); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_value_specificationContext extends ParserRuleContext {
		public Dynamic_parameter_specificationContext dynamic_parameter_specification() {
			return getRuleContext(Dynamic_parameter_specificationContext.class,0);
		}
		public Variable_specificationContext variable_specification() {
			return getRuleContext(Variable_specificationContext.class,0);
		}
		public Parameter_specificationContext parameter_specification() {
			return getRuleContext(Parameter_specificationContext.class,0);
		}
		public General_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGeneral_value_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGeneral_value_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGeneral_value_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_value_specificationContext general_value_specification() throws RecognitionException {
		General_value_specificationContext _localctx = new General_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_general_value_specification);
		try {
			setState(3507);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3499); parameter_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3500); dynamic_parameter_specification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3501); variable_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3502); match(T__20);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3503); match(T__102);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3504); match(T__95);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3505); match(T__98);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3506); match(T__121);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specificationContext extends ParserRuleContext {
		public Indicator_parameterContext indicator_parameter() {
			return getRuleContext(Indicator_parameterContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Parameter_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specificationContext parameter_specification() throws RecognitionException {
		Parameter_specificationContext _localctx = new Parameter_specificationContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_parameter_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3509); parameter_name();
			setState(3511);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(3510); indicator_parameter();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indicator_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Indicator_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indicator_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIndicator_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIndicator_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIndicator_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indicator_parameterContext indicator_parameter() throws RecognitionException {
		Indicator_parameterContext _localctx = new Indicator_parameterContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_indicator_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3513); match(T__17);
			setState(3514); parameter_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_parameter_specificationContext extends ParserRuleContext {
		public TerminalNode QUESTION_MARK() { return getToken(Sql92Parser.QUESTION_MARK, 0); }
		public Dynamic_parameter_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_parameter_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_parameter_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_parameter_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_parameter_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_parameter_specificationContext dynamic_parameter_specification() throws RecognitionException {
		Dynamic_parameter_specificationContext _localctx = new Dynamic_parameter_specificationContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_dynamic_parameter_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3516); match(QUESTION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_specificationContext extends ParserRuleContext {
		public Indicator_variableContext indicator_variable() {
			return getRuleContext(Indicator_variableContext.class,0);
		}
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Variable_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterVariable_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitVariable_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitVariable_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_specificationContext variable_specification() throws RecognitionException {
		Variable_specificationContext _localctx = new Variable_specificationContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_variable_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3518); embedded_variable_name();
			setState(3520);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(3519); indicator_variable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indicator_variableContext extends ParserRuleContext {
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Indicator_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indicator_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIndicator_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIndicator_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIndicator_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indicator_variableContext indicator_variable() throws RecognitionException {
		Indicator_variableContext _localctx = new Indicator_variableContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_indicator_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3523);
			_la = _input.LA(1);
			if (_la==T__17) {
				{
				setState(3522); match(T__17);
				}
			}

			setState(3525); embedded_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Embedded_variable_nameContext extends ParserRuleContext {
		public Host_identifierContext host_identifier() {
			return getRuleContext(Host_identifierContext.class,0);
		}
		public TerminalNode COLON() { return getToken(Sql92Parser.COLON, 0); }
		public Embedded_variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_embedded_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterEmbedded_variable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitEmbedded_variable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitEmbedded_variable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Embedded_variable_nameContext embedded_variable_name() throws RecognitionException {
		Embedded_variable_nameContext _localctx = new Embedded_variable_nameContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_embedded_variable_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3527); match(COLON);
			setState(3528); host_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Host_identifierContext extends ParserRuleContext {
		public Pli_host_identifierContext pli_host_identifier() {
			return getRuleContext(Pli_host_identifierContext.class,0);
		}
		public Mumps_host_identifierContext mumps_host_identifier() {
			return getRuleContext(Mumps_host_identifierContext.class,0);
		}
		public Cobol_host_identifierContext cobol_host_identifier() {
			return getRuleContext(Cobol_host_identifierContext.class,0);
		}
		public Fortran_host_identifierContext fortran_host_identifier() {
			return getRuleContext(Fortran_host_identifierContext.class,0);
		}
		public Pascal_host_identifierContext pascal_host_identifier() {
			return getRuleContext(Pascal_host_identifierContext.class,0);
		}
		public C_host_identifierContext c_host_identifier() {
			return getRuleContext(C_host_identifierContext.class,0);
		}
		public Ada_host_identifierContext ada_host_identifier() {
			return getRuleContext(Ada_host_identifierContext.class,0);
		}
		public Host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterHost_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitHost_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitHost_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Host_identifierContext host_identifier() throws RecognitionException {
		Host_identifierContext _localctx = new Host_identifierContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_host_identifier);
		try {
			setState(3537);
			switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3530); ada_host_identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3531); c_host_identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3532); cobol_host_identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3533); fortran_host_identifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3534); mumps_host_identifier();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3535); pascal_host_identifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3536); pli_host_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_identifierContext extends ParserRuleContext {
		public TerminalNode SQL_LANGUAGE_IDENTIFIER() { return getToken(Sql92Parser.SQL_LANGUAGE_IDENTIFIER, 0); }
		public General_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGeneral_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGeneral_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGeneral_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_identifierContext general_identifier() throws RecognitionException {
		General_identifierContext _localctx = new General_identifierContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_general_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3539); match(SQL_LANGUAGE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ada_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Ada_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ada_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAda_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAda_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAda_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ada_host_identifierContext ada_host_identifier() throws RecognitionException {
		Ada_host_identifierContext _localctx = new Ada_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_ada_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3541); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public C_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterC_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitC_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitC_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_host_identifierContext c_host_identifier() throws RecognitionException {
		C_host_identifierContext _localctx = new C_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_c_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3543); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cobol_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Cobol_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cobol_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCobol_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCobol_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCobol_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cobol_host_identifierContext cobol_host_identifier() throws RecognitionException {
		Cobol_host_identifierContext _localctx = new Cobol_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_cobol_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fortran_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Fortran_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fortran_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFortran_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFortran_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFortran_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fortran_host_identifierContext fortran_host_identifier() throws RecognitionException {
		Fortran_host_identifierContext _localctx = new Fortran_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_fortran_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3547); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mumps_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Mumps_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mumps_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterMumps_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitMumps_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitMumps_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mumps_host_identifierContext mumps_host_identifier() throws RecognitionException {
		Mumps_host_identifierContext _localctx = new Mumps_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_mumps_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3549); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pascal_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Pascal_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pascal_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPascal_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPascal_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPascal_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pascal_host_identifierContext pascal_host_identifier() throws RecognitionException {
		Pascal_host_identifierContext _localctx = new Pascal_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_pascal_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pli_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Pli_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pli_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPli_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPli_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPli_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pli_host_identifierContext pli_host_identifier() throws RecognitionException {
		Pli_host_identifierContext _localctx = new Pli_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_pli_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3553); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_target_specificationContext extends ParserRuleContext {
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Simple_target_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_target_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_target_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_target_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_target_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_target_specificationContext simple_target_specification() throws RecognitionException {
		Simple_target_specificationContext _localctx = new Simple_target_specificationContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_simple_target_specification);
		try {
			setState(3557);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3555); parameter_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3556); embedded_variable_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_value_specificationContext extends ParserRuleContext {
		public General_value_specificationContext general_value_specification() {
			return getRuleContext(General_value_specificationContext.class,0);
		}
		public Unsigned_literalContext unsigned_literal() {
			return getRuleContext(Unsigned_literalContext.class,0);
		}
		public Unsigned_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnsigned_value_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnsigned_value_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnsigned_value_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unsigned_value_specificationContext unsigned_value_specification() throws RecognitionException {
		Unsigned_value_specificationContext _localctx = new Unsigned_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_unsigned_value_specification);
		try {
			setState(3561);
			switch (_input.LA(1)) {
			case T__228:
			case T__125:
			case T__90:
			case T__87:
			case T__69:
			case T__48:
			case T__7:
			case UNDERSCORE:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3559); unsigned_literal();
				}
				break;
			case T__121:
			case T__102:
			case T__98:
			case T__95:
			case T__20:
			case COLON:
			case QUESTION_MARK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3560); general_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Language_clauseContext extends ParserRuleContext {
		public TerminalNode LANGUAGE_NAME() { return getToken(Sql92Parser.LANGUAGE_NAME, 0); }
		public Language_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_language_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLanguage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLanguage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLanguage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Language_clauseContext language_clause() throws RecognitionException {
		Language_clauseContext _localctx = new Language_clauseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_language_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3563); match(T__133);
			setState(3564); match(LANGUAGE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_fieldContext extends ParserRuleContext {
		public Datetime_fieldContext datetime_field() {
			return getRuleContext(Datetime_fieldContext.class,0);
		}
		public Time_zone_fieldContext time_zone_field() {
			return getRuleContext(Time_zone_fieldContext.class,0);
		}
		public Extract_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtract_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtract_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtract_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_fieldContext extract_field() throws RecognitionException {
		Extract_fieldContext _localctx = new Extract_fieldContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_extract_field);
		try {
			setState(3568);
			switch (_input.LA(1)) {
			case T__203:
			case T__185:
			case T__174:
			case T__170:
			case T__115:
			case T__111:
				enterOuterAlt(_localctx, 1);
				{
				setState(3566); datetime_field();
				}
				break;
			case T__181:
			case T__26:
				enterOuterAlt(_localctx, 2);
				{
				setState(3567); time_zone_field();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_fieldContext extends ParserRuleContext {
		public Non_second_datetime_fieldContext non_second_datetime_field() {
			return getRuleContext(Non_second_datetime_fieldContext.class,0);
		}
		public Datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_fieldContext datetime_field() throws RecognitionException {
		Datetime_fieldContext _localctx = new Datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_datetime_field);
		try {
			setState(3572);
			switch (_input.LA(1)) {
			case T__203:
			case T__185:
			case T__170:
			case T__115:
			case T__111:
				enterOuterAlt(_localctx, 1);
				{
				setState(3570); non_second_datetime_field();
				}
				break;
			case T__174:
				enterOuterAlt(_localctx, 2);
				{
				setState(3571); match(T__174);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zone_fieldContext extends ParserRuleContext {
		public Time_zone_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_zone_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_zone_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_zone_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_zone_fieldContext time_zone_field() throws RecognitionException {
		Time_zone_fieldContext _localctx = new Time_zone_fieldContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_time_zone_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3574);
			_la = _input.LA(1);
			if ( !(_la==T__181 || _la==T__26) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_targetContext extends ParserRuleContext {
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Cast_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCast_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCast_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCast_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_targetContext cast_target() throws RecognitionException {
		Cast_targetContext _localctx = new Cast_targetContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_cast_target);
		try {
			setState(3578);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case ALPHA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3576); domain_name();
				}
				break;
			case T__204:
			case T__191:
			case T__169:
			case T__159:
			case T__116:
			case T__113:
			case T__112:
			case T__90:
			case T__87:
			case T__83:
			case T__76:
			case T__69:
			case T__68:
			case T__59:
			case T__48:
			case T__46:
			case T__36:
			case T__32:
			case T__27:
				enterOuterAlt(_localctx, 2);
				{
				setState(3577); data_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_specificationContext extends ParserRuleContext {
		public Trim_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_specificationContext trim_specification() throws RecognitionException {
		Trim_specificationContext _localctx = new Trim_specificationContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_trim_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3580);
			_la = _input.LA(1);
			if ( !(_la==T__233 || _la==T__96 || _la==T__52) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truth_valueContext extends ParserRuleContext {
		public Truth_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truth_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTruth_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTruth_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTruth_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truth_valueContext truth_value() throws RecognitionException {
		Truth_valueContext _localctx = new Truth_valueContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_truth_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3582);
			_la = _input.LA(1);
			if ( !(_la==T__198 || _la==T__119 || _la==T__84) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_specificationContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(Sql92Parser.NULL, 0); }
		public Null_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNull_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNull_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNull_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_specificationContext null_specification() throws RecognitionException {
		Null_specificationContext _localctx = new Null_specificationContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_null_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3584); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_specificationContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public Default_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDefault_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDefault_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDefault_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_specificationContext default_specification() throws RecognitionException {
		Default_specificationContext _localctx = new Default_specificationContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_default_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3586); match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_opContext extends ParserRuleContext {
		public TerminalNode LESS_THAN() { return getToken(Sql92Parser.LESS_THAN, 0); }
		public TerminalNode GREATER_THAN_OR_EQ() { return getToken(Sql92Parser.GREATER_THAN_OR_EQ, 0); }
		public TerminalNode GREATER_THAN() { return getToken(Sql92Parser.GREATER_THAN, 0); }
		public TerminalNode LESS_THAN_OR_EQ() { return getToken(Sql92Parser.LESS_THAN_OR_EQ, 0); }
		public TerminalNode NOT_EQ() { return getToken(Sql92Parser.NOT_EQ, 0); }
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterComp_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitComp_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitComp_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_opContext comp_op() throws RecognitionException {
		Comp_opContext _localctx = new Comp_opContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_comp_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3588);
			_la = _input.LA(1);
			if ( !(((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (LESS_THAN - 257)) | (1L << (LESS_THAN_OR_EQ - 257)) | (1L << (EQ - 257)) | (1L << (NOT_EQ - 257)) | (1L << (GREATER_THAN - 257)) | (1L << (GREATER_THAN_OR_EQ - 257)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_typeContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(Sql92Parser.COUNT, 0); }
		public TerminalNode SUM() { return getToken(Sql92Parser.SUM, 0); }
		public TerminalNode AVG() { return getToken(Sql92Parser.AVG, 0); }
		public TerminalNode MIN() { return getToken(Sql92Parser.MIN, 0); }
		public TerminalNode MAX() { return getToken(Sql92Parser.MAX, 0); }
		public Set_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_function_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_function_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_function_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_function_typeContext set_function_type() throws RecognitionException {
		Set_function_typeContext _localctx = new Set_function_typeContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_set_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3590);
			_la = _input.LA(1);
			if ( !(((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (AVG - 276)) | (1L << (SUM - 276)) | (1L << (MIN - 276)) | (1L << (MAX - 276)) | (1L << (COUNT - 276)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_qualifierContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(Sql92Parser.DISTINCT, 0); }
		public Set_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_qualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_qualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_qualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_qualifierContext set_qualifier() throws RecognitionException {
		Set_qualifierContext _localctx = new Set_qualifierContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_set_qualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifierContext extends ParserRuleContext {
		public AllContext all() {
			return getRuleContext(AllContext.class,0);
		}
		public SomeContext some() {
			return getRuleContext(SomeContext.class,0);
		}
		public QuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuantifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuantifierContext quantifier() throws RecognitionException {
		QuantifierContext _localctx = new QuantifierContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_quantifier);
		try {
			setState(3596);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3594); all();
				}
				break;
			case SOME:
			case ANY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3595); some();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public AllContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAll(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAll(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAll(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllContext all() throws RecognitionException {
		AllContext _localctx = new AllContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_all);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3598); match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SomeContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(Sql92Parser.SOME, 0); }
		public TerminalNode ANY() { return getToken(Sql92Parser.ANY, 0); }
		public SomeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_some; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSome(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSome(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSome(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SomeContext some() throws RecognitionException {
		SomeContext _localctx = new SomeContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_some);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3600);
			_la = _input.LA(1);
			if ( !(_la==SOME || _la==ANY) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3602); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrecision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrecision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3604); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScaleContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public ScaleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scale; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterScale(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitScale(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitScale(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScaleContext scale() throws RecognitionException {
		ScaleContext _localctx = new ScaleContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_scale);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3606); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Authorization_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAuthorization_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAuthorization_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAuthorization_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Authorization_identifierContext authorization_identifier() throws RecognitionException {
		Authorization_identifierContext _localctx = new Authorization_identifierContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_authorization_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3610); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Correlation_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCorrelation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCorrelation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCorrelation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Correlation_nameContext correlation_name() throws RecognitionException {
		Correlation_nameContext _localctx = new Correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3612); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_nameContext statement_name() throws RecognitionException {
		Statement_nameContext _localctx = new Statement_nameContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_statement_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3614); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQualified_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQualified_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQualified_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_identifierContext qualified_identifier() throws RecognitionException {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_qualified_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3616); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_table_nameContext extends ParserRuleContext {
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public Local_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLocal_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLocal_table_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLocal_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_table_nameContext local_table_name() throws RecognitionException {
		Local_table_nameContext _localctx = new Local_table_nameContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_local_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618); qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifierContext extends ParserRuleContext {
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifierContext qualifier() throws RecognitionException {
		QualifierContext _localctx = new QualifierContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_qualifier);
		try {
			setState(3622);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3620); table_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3621); correlation_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_local_table_nameContext extends ParserRuleContext {
		public Local_table_nameContext local_table_name() {
			return getRuleContext(Local_table_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Qualified_local_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_local_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQualified_local_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQualified_local_table_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQualified_local_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_local_table_nameContext qualified_local_table_name() throws RecognitionException {
		Qualified_local_table_nameContext _localctx = new Qualified_local_table_nameContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_qualified_local_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3624); match(T__135);
			setState(3625); match(PERIOD);
			setState(3626); local_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_referenceContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public QualifierContext qualifier() {
			return getRuleContext(QualifierContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_reference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_reference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_referenceContext column_reference() throws RecognitionException {
		Column_referenceContext _localctx = new Column_referenceContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_column_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3631);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				setState(3628); qualifier();
				setState(3629); match(PERIOD);
				}
				break;
			}
			setState(3633); column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Domain_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDomain_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDomain_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDomain_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_nameContext domain_name() throws RecognitionException {
		Domain_nameContext _localctx = new Domain_nameContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_domain_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3635); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_qualified_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3640);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				setState(3637); schema_name();
				setState(3638); match(PERIOD);
				}
				break;
			}
			setState(3642); qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(Sql92Parser.COLON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3644); match(COLON);
			setState(3645); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Form_of_use_conversionContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Form_of_use_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_form_of_use_conversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterForm_of_use_conversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitForm_of_use_conversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitForm_of_use_conversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Form_of_use_conversionContext form_of_use_conversion() throws RecognitionException {
		Form_of_use_conversionContext _localctx = new Form_of_use_conversionContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_form_of_use_conversion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3647); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_nameContext translation_name() throws RecognitionException {
		Translation_nameContext _localctx = new Translation_nameContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_translation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3649); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nondoublequote_characterContext extends ParserRuleContext {
		public Nondoublequote_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nondoublequote_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNondoublequote_character(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNondoublequote_character(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNondoublequote_character(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nondoublequote_characterContext nondoublequote_character() throws RecognitionException {
		Nondoublequote_characterContext _localctx = new Nondoublequote_characterContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_nondoublequote_character);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3651);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==DOUBLE_QUOTE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Doublequote_symbolContext extends ParserRuleContext {
		public Doublequote_symbolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doublequote_symbol; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDoublequote_symbol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDoublequote_symbol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDoublequote_symbol(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Doublequote_symbolContext doublequote_symbol() throws RecognitionException {
		Doublequote_symbolContext _localctx = new Doublequote_symbolContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_doublequote_symbol);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3653); match(T__101);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(Sql92Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(Sql92Parser.MINUS_SIGN, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3655);
			_la = _input.LA(1);
			if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeperatorContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(Sql92Parser.NEWLINE, 0); }
		public TerminalNode WHITE_SPACE() { return getToken(Sql92Parser.WHITE_SPACE, 0); }
		public TerminalNode COMMENT() { return getToken(Sql92Parser.COMMENT, 0); }
		public SeperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSeperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSeperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSeperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeperatorContext seperator() throws RecognitionException {
		SeperatorContext _localctx = new SeperatorContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_seperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3657);
			_la = _input.LA(1);
			if ( !(((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (WHITE_SPACE - 240)) | (1L << (NEWLINE - 240)) | (1L << (COMMENT - 240)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 95: return joined_table_sempred((Joined_tableContext)_localctx, predIndex);
		case 207: return non_join_query_expression_sempred((Non_join_query_expressionContext)_localctx, predIndex);
		case 210: return query_term_sempred((Query_termContext)_localctx, predIndex);
		case 227: return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		case 249: return numeric_value_expression_sempred((Numeric_value_expressionContext)_localctx, predIndex);
		case 250: return term_sempred((TermContext)_localctx, predIndex);
		case 260: return datetime_value_expression_sempred((Datetime_value_expressionContext)_localctx, predIndex);
		case 261: return interval_value_expression_sempred((Interval_value_expressionContext)_localctx, predIndex);
		case 267: return interval_term_sempred((Interval_termContext)_localctx, predIndex);
		case 290: return character_value_expression_sempred((Character_value_expressionContext)_localctx, predIndex);
		case 306: return bit_value_expression_sempred((Bit_value_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean interval_value_expression_sempred(Interval_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean character_value_expression_sempred(Character_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean joined_table_sempred(Joined_tableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return precpred(_ctx, 4);
		case 1: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return precpred(_ctx, 3);
		case 5: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean interval_term_sempred(Interval_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean datetime_value_expression_sempred(Datetime_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean query_term_sempred(Query_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean numeric_value_expression_sempred(Numeric_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean bit_value_expression_sempred(Bit_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean non_join_query_expression_sempred(Non_join_query_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return precpred(_ctx, 3);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u012d\u0e4e\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\3\2\3\2\7\2\u03ad"+
		"\n\2\f\2\16\2\u03b0\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u03bb"+
		"\n\3\3\4\3\4\5\4\u03bf\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u03ca"+
		"\n\5\3\6\3\6\3\6\3\6\5\6\u03d0\n\6\3\6\6\6\u03d3\n\6\r\6\16\6\u03d4\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u03de\n\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3"+
		"\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u03f1\n\13\3\f\3\f"+
		"\3\f\5\f\u03f6\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u03ff\n\f\3\r\3\r\3"+
		"\r\3\r\3\r\3\r\3\r\5\r\u0408\n\r\3\r\3\r\3\r\3\r\5\r\u040e\n\r\3\r\3\r"+
		"\5\r\u0412\n\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20\5\20\u041b\n\20\3\20"+
		"\3\20\5\20\u041f\n\20\3\20\5\20\u0422\n\20\3\20\5\20\u0425\n\20\3\21\5"+
		"\21\u0428\n\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\5\22\u0432\n\22"+
		"\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u043e\n\24\3\24"+
		"\3\24\3\24\5\24\u0443\n\24\3\25\3\25\3\25\3\26\3\26\3\26\5\26\u044b\n"+
		"\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u0455\n\27\f\27\16\27"+
		"\u0458\13\27\3\27\3\27\3\27\5\27\u045d\n\27\3\30\3\30\3\30\5\30\u0462"+
		"\n\30\3\31\3\31\3\31\7\31\u0467\n\31\f\31\16\31\u046a\13\31\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\5\32\u0473\n\32\3\32\5\32\u0476\n\32\3\33\3"+
		"\33\3\34\5\34\u047b\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\5\34\u0487\n\34\3\35\3\35\5\35\u048b\n\35\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\5\36\u0495\n\36\3\37\3\37\5\37\u0499\n\37\3 \3 \3 "+
		"\3 \3 \3 \3 \3 \5 \u04a3\n \3!\3!\3!\3!\3!\3!\3!\3\"\3\"\5\"\u04ae\n\""+
		"\3#\3#\3$\3$\3%\3%\3&\3&\3&\3&\3&\5&\u04bb\n&\3\'\3\'\3\'\3\'\3(\3(\3"+
		"(\3(\5(\u04c5\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3*\3*\3+\3+\3,\3,\3-\3"+
		"-\3-\5-\u04da\n-\3.\3.\3.\3.\3.\3.\3.\3/\3/\5/\u04e5\n/\3\60\3\60\3\61"+
		"\3\61\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\5\63\u04f8\n\63\3\64\3\64\3\64\3\64\3\64\3\65\3\65\3\66\3\66\3\66\3\66"+
		"\3\66\3\67\3\67\3\67\3\67\3\67\5\67\u050b\n\67\38\38\58\u050f\n8\38\3"+
		"8\39\39\39\3:\3:\5:\u0518\n:\3:\3:\3:\3;\3;\5;\u051f\n;\3<\3<\3<\3=\3"+
		"=\3=\3>\3>\5>\u0529\n>\3>\3>\3>\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3A\3A\3"+
		"A\3A\3A\3B\3B\3B\3B\5B\u0541\nB\3B\3B\3B\3B\3B\3B\3B\7B\u054a\nB\fB\16"+
		"B\u054d\13B\3B\3B\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3E\3E\3E\3E\3F\3F\3F\3"+
		"F\3G\3G\3G\3G\3H\3H\3H\3H\3H\3I\3I\3I\3I\5I\u0570\nI\3J\3J\3J\3K\3K\3"+
		"K\3L\3L\3L\3M\3M\3M\3M\3N\3N\3N\3N\3N\3N\5N\u0585\nN\3O\3O\3O\3P\3P\5"+
		"P\u058c\nP\3P\5P\u058f\nP\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u059b\nQ\3"+
		"R\3R\3R\5R\u05a0\nR\3S\3S\3S\7S\u05a5\nS\fS\16S\u05a8\13S\3T\3T\5T\u05ac"+
		"\nT\3U\3U\3U\3V\3V\5V\u05b3\nV\3V\3V\3V\3V\3V\3W\3W\3W\3X\3X\5X\u05bf"+
		"\nX\3Y\3Y\3Y\7Y\u05c4\nY\fY\16Y\u05c7\13Y\3Z\3Z\3Z\3Z\3Z\5Z\u05ce\nZ\3"+
		"[\3[\3[\3\\\3\\\3\\\7\\\u05d6\n\\\f\\\16\\\u05d9\13\\\3]\3]\5]\u05dd\n"+
		"]\3]\5]\u05e0\n]\3]\5]\u05e3\n]\3^\3^\3^\3^\7^\u05e9\n^\f^\16^\u05ec\13"+
		"^\3_\3_\5_\u05f0\n_\3`\3`\5`\u05f4\n`\3`\3`\3`\5`\u05f9\n`\3a\3a\3a\3"+
		"a\3a\3a\5a\u0601\na\3a\3a\3a\3a\3a\3a\5a\u0609\na\3a\5a\u060c\na\3a\3"+
		"a\3a\5a\u0611\na\7a\u0613\na\fa\16a\u0616\13a\3b\5b\u0619\nb\3b\3b\3b"+
		"\3b\3b\5b\u0620\nb\3c\3c\3d\3d\3e\3e\3e\5e\u0629\ne\3e\5e\u062c\ne\3f"+
		"\3f\3g\3g\5g\u0632\ng\3h\3h\3h\3i\3i\3i\3i\3i\3j\3j\3k\3k\3k\3l\3l\3l"+
		"\3m\3m\3m\3m\3m\5m\u0649\nm\3n\3n\3n\3n\3n\3n\3n\3n\3o\3o\3o\3o\3o\5o"+
		"\u0658\no\3p\3p\3p\3p\3p\3q\3q\3q\3q\5q\u0663\nq\3q\3q\3q\5q\u0668\nq"+
		"\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\3s\3t\3t\3t\7t\u0678\nt\ft\16t\u067b\13"+
		"t\3u\3u\3u\3u\3v\3v\3w\3w\3w\5w\u0686\nw\3x\3x\3x\3x\3x\3x\5x\u068e\n"+
		"x\3y\3y\3y\5y\u0693\ny\3z\3z\3z\3z\3z\7z\u069a\nz\fz\16z\u069d\13z\3{"+
		"\3{\3{\5{\u06a2\n{\3|\3|\3|\3|\3}\3}\3}\3}\3}\5}\u06ad\n}\3~\3~\3~\3\177"+
		"\3\177\3\177\3\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082\u06c1\n\u0082\f\u0082\16\u0082"+
		"\u06c4\13\u0082\5\u0082\u06c6\n\u0082\3\u0083\3\u0083\5\u0083\u06ca\n"+
		"\u0083\3\u0084\3\u0084\5\u0084\u06ce\n\u0084\3\u0085\3\u0085\3\u0085\5"+
		"\u0085\u06d3\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3"+
		"\u0087\5\u0087\u06dc\n\u0087\3\u0087\3\u0087\5\u0087\u06e0\n\u0087\3\u0087"+
		"\5\u0087\u06e3\n\u0087\3\u0088\3\u0088\3\u0089\3\u0089\3\u008a\3\u008a"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\5\u008c\u06f1\n\u008c"+
		"\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e\5\u008e\u06f9\n\u008e"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0700\n\u008f\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\5\u0091\u0708\n\u0091\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0096"+
		"\3\u0096\5\u0096\u071e\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\5\u0097\u0727\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\5\u0098\u072d\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\5\u0099\u0735\n\u0099\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c"+
		"\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u074d"+
		"\n\u009f\f\u009f\16\u009f\u0750\13\u009f\5\u009f\u0752\n\u009f\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0785\n\u00a4\3\u00a5\3\u00a5\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\7\u00a7\u0794\n\u00a7\f\u00a7\16\u00a7\u0797\13\u00a7\5\u00a7"+
		"\u0799\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ad\3\u00ad\5\u00ad\u07ae\n\u00ad\3\u00ae\5\u00ae\u07b1\n"+
		"\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b1\3\u00b1\5\u00b1\u07bd\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u07d1\n\u00b5\3\u00b5"+
		"\5\u00b5\u07d4\n\u00b5\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b8\3\u00b8"+
		"\5\u00b8\u07dc\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u07e2\n"+
		"\u00b9\f\u00b9\16\u00b9\u07e5\13\u00b9\3\u00ba\3\u00ba\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc"+
		"\u07f3\n\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u07f8\n\u00bd\3\u00bd\5"+
		"\u00bd\u07fb\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be\5\u00be\u0802"+
		"\n\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0809\n\u00bf"+
		"\3\u00c0\3\u00c0\5\u00c0\u080d\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c2"+
		"\3\u00c2\5\u00c2\u0814\n\u00c2\3\u00c2\5\u00c2\u0817\n\u00c2\3\u00c2\3"+
		"\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u0829\n\u00c4"+
		"\f\u00c4\16\u00c4\u082c\13\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\5\u00c7"+
		"\u083b\n\u00c7\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u0840\n\u00c8\f\u00c8\16"+
		"\u00c8\u0843\13\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0851\n\u00ca"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0858\n\u00cb\f\u00cb"+
		"\16\u00cb\u085b\13\u00cb\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u0874\n\u00ce\5\u00ce\u0876\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3"+
		"\u00d0\3\u00d0\5\u00d0\u087e\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\5\u00d1\u088e\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1"+
		"\u0894\n\u00d1\f\u00d1\16\u00d1\u0897\13\u00d1\3\u00d2\3\u00d2\5\u00d2"+
		"\u089b\n\u00d2\3\u00d2\5\u00d2\u089e\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3"+
		"\u00d3\3\u00d3\3\u00d3\5\u00d3\u08a6\n\u00d3\3\u00d4\3\u00d4\3\u00d4\5"+
		"\u00d4\u08ab\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u08b1\n\u00d4"+
		"\f\u00d4\16\u00d4\u08b4\13\u00d4\3\u00d5\3\u00d5\5\u00d5\u08b8\n\u00d5"+
		"\3\u00d5\5\u00d5\u08bb\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\5\u00d6\u08c3\n\u00d6\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8"+
		"\5\u00d8\u08ca\n\u00d8\3\u00d9\3\u00d9\5\u00d9\u08ce\n\u00d9\3\u00d9\3"+
		"\u00d9\3\u00d9\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u08e0\n\u00dd"+
		"\f\u00dd\16\u00dd\u08e3\13\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00de"+
		"\3\u00df\3\u00df\3\u00df\5\u00df\u08ed\n\u00df\3\u00df\5\u00df\u08f0\n"+
		"\u00df\3\u00df\7\u00df\u08f3\n\u00df\f\u00df\16\u00df\u08f6\13\u00df\3"+
		"\u00df\5\u00df\u08f9\n\u00df\3\u00e0\5\u00e0\u08fc\n\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u0900\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1"+
		"\u0907\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e3\5\u00e3"+
		"\u090f\n\u00e3\3\u00e3\3\u00e3\5\u00e3\u0913\n\u00e3\3\u00e4\3\u00e4\3"+
		"\u00e4\5\u00e4\u0918\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0924\n\u00e5\3\u00e5\5"+
		"\u00e5\u0927\n\u00e5\5\u00e5\u0929\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\7\u00e5\u0931\n\u00e5\f\u00e5\16\u00e5\u0934\13\u00e5"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\5\u00e6\u093f\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8"+
		"\5\u00e8\u0947\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9"+
		"\3\u00e9\5\u00e9\u0950\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u095a\n\u00ea\3\u00eb\3\u00eb\3\u00eb"+
		"\7\u00eb\u095f\n\u00eb\f\u00eb\16\u00eb\u0962\13\u00eb\3\u00ec\3\u00ec"+
		"\5\u00ec\u0966\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u096c\n"+
		"\u00ec\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00f0\3\u00f0"+
		"\5\u00f0\u0976\n\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4"+
		"\5\u00f4\u0987\n\u00f4\3\u00f4\5\u00f4\u098a\n\u00f4\3\u00f4\3\u00f4\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\5\u00f6\u0998\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u099e\n\u00f7\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u09a3\n\u00f8\f\u00f8\16"+
		"\u00f8\u09a6\13\u00f8\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\5\u00fa\u09ae\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\7\u00fb\u09b6\n\u00fb\f\u00fb\16\u00fb\u09b9\13\u00fb\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u09c1\n\u00fc\f\u00fc\16\u00fc"+
		"\u09c4\13\u00fc\3\u00fd\5\u00fd\u09c7\n\u00fd\3\u00fd\3\u00fd\3\u00fe"+
		"\3\u00fe\5\u00fe\u09cd\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\5\u00ff\u09d5\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\5\u0100\u09dc\n\u0100\3\u0101\3\u0101\3\u0101\5\u0101\u09e1\n\u0101\3"+
		"\u0101\3\u0101\3\u0101\3\u0102\3\u0102\3\u0103\3\u0103\5\u0103\u09ea\n"+
		"\u0103\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0105"+
		"\3\u0105\5\u0105\u09f5\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\5\u0106\u09fd\n\u0106\3\u0106\3\u0106\3\u0106\7\u0106\u0a02\n"+
		"\u0106\f\u0106\16\u0106\u0a05\13\u0106\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u0a10\n\u0107\3\u0107"+
		"\3\u0107\3\u0107\7\u0107\u0a15\n\u0107\f\u0107\16\u0107\u0a18\13\u0107"+
		"\3\u0108\3\u0108\3\u0109\3\u0109\5\u0109\u0a1e\n\u0109\3\u010a\3\u010a"+
		"\5\u010a\u0a22\n\u010a\3\u010b\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\5\u010c\u0a2b\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\5\u010d\u0a33\n\u010d\3\u010d\3\u010d\3\u010d\7\u010d\u0a38\n"+
		"\u010d\f\u010d\16\u010d\u0a3b\13\u010d\3\u010e\5\u010e\u0a3e\n\u010e\3"+
		"\u010e\3\u010e\3\u010f\3\u010f\5\u010f\u0a44\n\u010f\3\u0110\3\u0110\3"+
		"\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\7\u0110\u0a52\n\u0110\f\u0110\16\u0110\u0a55\13\u0110\3\u0110"+
		"\3\u0110\5\u0110\u0a59\n\u0110\3\u0111\3\u0111\5\u0111\u0a5d\n\u0111\3"+
		"\u0112\3\u0112\3\u0112\6\u0112\u0a62\n\u0112\r\u0112\16\u0112\u0a63\3"+
		"\u0112\5\u0112\u0a67\n\u0112\3\u0112\3\u0112\3\u0113\3\u0113\6\u0113\u0a6d"+
		"\n\u0113\r\u0113\16\u0113\u0a6e\3\u0113\5\u0113\u0a72\n\u0113\3\u0113"+
		"\3\u0113\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0116"+
		"\3\u0116\3\u0116\3\u0117\3\u0117\3\u0118\3\u0118\5\u0118\u0a84\n\u0118"+
		"\3\u0119\3\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b"+
		"\5\u011b\u0a8f\n\u011b\3\u011c\3\u011c\3\u011c\5\u011c\u0a94\n\u011c\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011f\3\u011f\5\u011f\u0aa6"+
		"\n\u011f\3\u0120\3\u0120\3\u0120\5\u0120\u0aab\n\u0120\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\7\u0124\u0ac2\n\u0124\f\u0124\16\u0124\u0ac5\13\u0124\3\u0125"+
		"\3\u0125\5\u0125\u0ac9\n\u0125\3\u0126\3\u0126\5\u0126\u0acd\n\u0126\3"+
		"\u0127\3\u0127\5\u0127\u0ad1\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3"+
		"\u0128\5\u0128\u0ad8\n\u0128\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u0ae3\n\u012a\3\u012a\3\u012a\3"+
		"\u012b\3\u012b\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u0130\5\u0130\u0afd\n\u0130\3\u0130\5\u0130"+
		"\u0b00\n\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u0b0f\n\u0133"+
		"\3\u0133\3\u0133\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\7\u0134"+
		"\u0b19\n\u0134\f\u0134\16\u0134\u0b1c\13\u0134\3\u0135\3\u0135\3\u0136"+
		"\3\u0136\5\u0136\u0b22\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\7\u0139"+
		"\u0b31\n\u0139\f\u0139\16\u0139\u0b34\13\u0139\3\u0139\3\u0139\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\5\u013a\u0b3c\n\u013a\3\u013b\3\u013b\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u0b47\n\u013c"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\7\u013d\u0b4d\n\u013d\f\u013d\16\u013d"+
		"\u0b50\13\u013d\3\u013d\6\u013d\u0b53\n\u013d\r\u013d\16\u013d\u0b54\3"+
		"\u013e\3\u013e\3\u013e\5\u013e\u0b5a\n\u013e\3\u013f\3\u013f\3\u013f\3"+
		"\u013f\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0142\3\u0142"+
		"\3\u0142\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u0b75\n\u0144\3\u0145\3\u0145"+
		"\3\u0145\5\u0145\u0b7a\n\u0145\3\u0145\5\u0145\u0b7d\n\u0145\3\u0145\3"+
		"\u0145\3\u0145\3\u0145\3\u0146\3\u0146\5\u0146\u0b85\n\u0146\3\u0146\5"+
		"\u0146\u0b88\n\u0146\3\u0147\3\u0147\3\u0147\5\u0147\u0b8d\n\u0147\3\u0147"+
		"\5\u0147\u0b90\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0148\3\u0148"+
		"\5\u0148\u0b98\n\u0148\3\u0148\3\u0148\3\u0149\3\u0149\5\u0149\u0b9e\n"+
		"\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\7\u014b\u0ba5\n\u014b\f"+
		"\u014b\16\u014b\u0ba8\13\u014b\3\u014c\3\u014c\3\u014d\3\u014d\5\u014d"+
		"\u0bae\n\u014d\3\u014e\3\u014e\3\u014e\3\u014e\3\u014f\6\u014f\u0bb5\n"+
		"\u014f\r\u014f\16\u014f\u0bb6\3\u0150\3\u0150\5\u0150\u0bbb\n\u0150\3"+
		"\u0151\3\u0151\3\u0151\5\u0151\u0bc0\n\u0151\3\u0151\3\u0151\3\u0152\3"+
		"\u0152\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u0bca\n\u0154\3\u0154\3"+
		"\u0154\6\u0154\u0bce\n\u0154\r\u0154\16\u0154\u0bcf\3\u0154\3\u0154\7"+
		"\u0154\u0bd4\n\u0154\f\u0154\16\u0154\u0bd7\13\u0154\3\u0155\3\u0155\3"+
		"\u0155\5\u0155\u0bdc\n\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0157\3"+
		"\u0157\3\u0158\3\u0158\3\u0159\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b"+
		"\3\u015c\3\u015c\5\u015c\u0bee\n\u015c\3\u015d\3\u015d\3\u015d\3\u015e"+
		"\3\u015e\3\u015f\3\u015f\3\u015f\5\u015f\u0bf8\n\u015f\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\5\u0160\u0bfe\n\u0160\3\u0160\5\u0160\u0c01\n\u0160\3"+
		"\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u0c08\n\u0161\3\u0162\3"+
		"\u0162\3\u0163\3\u0163\3\u0164\3\u0164\5\u0164\u0c10\n\u0164\3\u0164\3"+
		"\u0164\5\u0164\u0c14\n\u0164\5\u0164\u0c16\n\u0164\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\5\u0167\u0c25\n\u0167\3\u0168\3\u0168\5\u0168\u0c29\n\u0168\3"+
		"\u0168\5\u0168\u0c2c\n\u0168\3\u0168\5\u0168\u0c2f\n\u0168\3\u0168\3\u0168"+
		"\5\u0168\u0c33\n\u0168\5\u0168\u0c35\n\u0168\3\u0169\3\u0169\3\u0169\3"+
		"\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016b\3\u016b\3\u016c\3\u016c"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016e\3\u016e"+
		"\3\u016e\3\u016f\3\u016f\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171"+
		"\3\u0171\3\u0172\3\u0172\3\u0172\7\u0172\u0c59\n\u0172\f\u0172\16\u0172"+
		"\u0c5c\13\u0172\3\u0173\3\u0173\5\u0173\u0c60\n\u0173\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\7\u0175\u0c69\n\u0175\f\u0175"+
		"\16\u0175\u0c6c\13\u0175\3\u0176\3\u0176\5\u0176\u0c70\n\u0176\3\u0176"+
		"\5\u0176\u0c73\n\u0176\3\u0177\3\u0177\5\u0177\u0c77\n\u0177\3\u0178\3"+
		"\u0178\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u0c81\n"+
		"\u0179\5\u0179\u0c83\n\u0179\3\u017a\3\u017a\3\u017a\3\u017b\3\u017b\3"+
		"\u017b\3\u017b\3\u017b\3\u017b\3\u017b\5\u017b\u0c8f\n\u017b\3\u017c\5"+
		"\u017c\u0c92\n\u017c\3\u017c\3\u017c\5\u017c\u0c96\n\u017c\3\u017d\3\u017d"+
		"\5\u017d\u0c9a\n\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\5\u017e\u0ca2\n\u017e\3\u017f\3\u017f\3\u017f\6\u017f\u0ca7\n\u017f\r"+
		"\u017f\16\u017f\u0ca8\3\u017f\3\u017f\7\u017f\u0cad\n\u017f\f\u017f\16"+
		"\u017f\u0cb0\13\u017f\3\u0180\3\u0180\3\u0180\6\u0180\u0cb5\n\u0180\r"+
		"\u0180\16\u0180\u0cb6\3\u0180\3\u0180\7\u0180\u0cbb\n\u0180\f\u0180\16"+
		"\u0180\u0cbe\13\u0180\3\u0181\3\u0181\3\u0181\6\u0181\u0cc3\n\u0181\r"+
		"\u0181\16\u0181\u0cc4\3\u0181\3\u0181\7\u0181\u0cc9\n\u0181\f\u0181\16"+
		"\u0181\u0ccc\13\u0181\3\u0182\3\u0182\3\u0182\5\u0182\u0cd1\n\u0182\3"+
		"\u0183\3\u0183\3\u0183\3\u0184\3\u0184\3\u0184\3\u0185\3\u0185\3\u0185"+
		"\3\u0186\3\u0186\5\u0186\u0cde\n\u0186\3\u0186\3\u0186\3\u0186\3\u0187"+
		"\3\u0187\3\u0187\5\u0187\u0ce6\n\u0187\3\u0188\3\u0188\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\5\u0189\u0cef\n\u0189\3\u018a\3\u018a\3\u018a"+
		"\3\u018a\3\u018a\5\u018a\u0cf6\n\u018a\3\u018b\3\u018b\3\u018c\3\u018c"+
		"\3\u018c\7\u018c\u0cfd\n\u018c\f\u018c\16\u018c\u0d00\13\u018c\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\5\u018d\u0d06\n\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\5\u018d\u0d0d\n\u018d\3\u018e\3\u018e\5\u018e\u0d11\n"+
		"\u018e\3\u018e\5\u018e\u0d14\n\u018e\3\u018e\3\u018e\3\u018e\3\u018e\5"+
		"\u018e\u0d1a\n\u018e\3\u018f\3\u018f\3\u018f\5\u018f\u0d1f\n\u018f\3\u018f"+
		"\5\u018f\u0d22\n\u018f\3\u018f\3\u018f\5\u018f\u0d26\n\u018f\5\u018f\u0d28"+
		"\n\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u0d2e\n\u018f\3\u0190"+
		"\3\u0190\5\u0190\u0d32\n\u0190\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190"+
		"\u0d38\n\u0190\3\u0191\3\u0191\5\u0191\u0d3c\n\u0191\3\u0192\3\u0192\3"+
		"\u0192\3\u0192\3\u0192\5\u0192\u0d43\n\u0192\3\u0192\3\u0192\5\u0192\u0d47"+
		"\n\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u0d4c\n\u0192\3\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\5\u0193\u0d53\n\u0193\3\u0193\3\u0193\3\u0193"+
		"\5\u0193\u0d58\n\u0193\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\5\u0194\u0d60\n\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\5\u0194"+
		"\u0d67\n\u0194\5\u0194\u0d69\n\u0194\3\u0194\3\u0194\3\u0194\5\u0194\u0d6e"+
		"\n\u0194\5\u0194\u0d70\n\u0194\3\u0195\3\u0195\3\u0196\3\u0196\3\u0197"+
		"\3\u0197\3\u0198\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\5\u0199\u0d80\n\u0199\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a"+
		"\u0d87\n\u019a\3\u019b\3\u019b\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\3\u019d\3\u019d\5\u019d\u0d93\n\u019d\3\u019e\3\u019e\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u0d9c\n\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u0da6\n\u019f"+
		"\3\u019f\3\u019f\5\u019f\u0daa\n\u019f\5\u019f\u0dac\n\u019f\3\u01a0\3"+
		"\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u0db6\n"+
		"\u01a0\3\u01a1\3\u01a1\5\u01a1\u0dba\n\u01a1\3\u01a2\3\u01a2\3\u01a2\3"+
		"\u01a3\3\u01a3\3\u01a4\3\u01a4\5\u01a4\u0dc3\n\u01a4\3\u01a5\5\u01a5\u0dc6"+
		"\n\u01a5\3\u01a5\3\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u0dd4\n\u01a7\3\u01a8\3\u01a8"+
		"\3\u01a9\3\u01a9\3\u01aa\3\u01aa\3\u01ab\3\u01ab\3\u01ac\3\u01ac\3\u01ad"+
		"\3\u01ad\3\u01ae\3\u01ae\3\u01af\3\u01af\3\u01b0\3\u01b0\5\u01b0\u0de8"+
		"\n\u01b0\3\u01b1\3\u01b1\5\u01b1\u0dec\n\u01b1\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b3\3\u01b3\5\u01b3\u0df3\n\u01b3\3\u01b4\3\u01b4\5\u01b4\u0df7\n"+
		"\u01b4\3\u01b5\3\u01b5\3\u01b6\3\u01b6\5\u01b6\u0dfd\n\u01b6\3\u01b7\3"+
		"\u01b7\3\u01b8\3\u01b8\3\u01b9\3\u01b9\3\u01ba\3\u01ba\3\u01bb\3\u01bb"+
		"\3\u01bc\3\u01bc\3\u01bd\3\u01bd\3\u01be\3\u01be\5\u01be\u0e0f\n\u01be"+
		"\3\u01bf\3\u01bf\3\u01c0\3\u01c0\3\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c3"+
		"\3\u01c3\3\u01c4\3\u01c4\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c7\3\u01c7"+
		"\3\u01c8\3\u01c8\3\u01c9\3\u01c9\3\u01ca\3\u01ca\5\u01ca\u0e29\n\u01ca"+
		"\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u0e32"+
		"\n\u01cc\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01ce\3\u01ce\3\u01ce\5\u01ce"+
		"\u0e3b\n\u01ce\3\u01ce\3\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01d0\3\u01d0"+
		"\3\u01d1\3\u01d1\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d4\3\u01d4\3\u01d5"+
		"\3\u01d5\3\u01d5\2\r\u00c0\u01a0\u01a6\u01c8\u01f4\u01f6\u020a\u020c\u0218"+
		"\u0246\u0266\u01d6\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60"+
		"\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086"+
		"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e"+
		"\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6"+
		"\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce"+
		"\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6"+
		"\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe"+
		"\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116"+
		"\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e"+
		"\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146"+
		"\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e"+
		"\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176"+
		"\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e"+
		"\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6"+
		"\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be"+
		"\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6"+
		"\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee"+
		"\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206"+
		"\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e"+
		"\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236"+
		"\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e"+
		"\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266"+
		"\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e"+
		"\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296"+
		"\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae"+
		"\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6"+
		"\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de"+
		"\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6"+
		"\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e"+
		"\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326"+
		"\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e"+
		"\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356"+
		"\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e"+
		"\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386"+
		"\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e"+
		"\u03a0\u03a2\u03a4\u03a6\u03a8\2(\4\2ss\u00dc\u00dc\4\2\4\4\u00ae\u00ae"+
		"\4\2\u00cf\u00cf\u00dc\u00dc\5\2\24\24cc\u0087\u0087\4\2nn\u0084\u0084"+
		"\4\2JJ\u00eb\u00eb\5\2\u00a4\u00a4\u00b3\u00b3\u00db\u00db\4\2>>\u00bb"+
		"\u00bb\4\2ee\u00e3\u00e3\4\2\22\22\u00c2\u00c2\4\2\u00b7\u00b7\u00dc\u00dc"+
		"\4\2$$``\4\2ZZ\u00e8\u00e8\4\2\u00b1\u00b1\u00b8\u00b8\5\2\'\'TT\u00e5"+
		"\u00e5\5\2\13\13\'(TT\4\2\37\37qq\4\2\u00bf\u00bf\u00db\u00db\3\2\u00f5"+
		"\u00f6\4\2\u00fd\u00fd\u0100\u0100\4\2\36\36vv\4\2\u0099\u0099\u00c7\u00c7"+
		"\4\2\5\5\u0088\u0088\3\2\u0110\u0111\4\2\22\22##\4\2\17\17\u00d5\u00d5"+
		"\3\2\u0080\u0081\5\2HH}}\u00d6\u00d6\7\2&&88GG~~\u0082\u0082\4\2<<\u00d7"+
		"\u00d7\5\2\b\b\u0091\u0091\u00bd\u00bd\5\2++zz\u009d\u009d\3\2\u0103\u0108"+
		"\3\2\u0116\u011a\3\2\u0114\u0115\3\2\u0112\u0113\3\2\u00f7\u00f7\5\2\u00f2"+
		"\u00f2\u00f4\u00f4\u0127\u0127\u0e64\2\u03aa\3\2\2\2\4\u03ba\3\2\2\2\6"+
		"\u03be\3\2\2\2\b\u03c9\3\2\2\2\n\u03cb\3\2\2\2\f\u03dd\3\2\2\2\16\u03df"+
		"\3\2\2\2\20\u03e1\3\2\2\2\22\u03e6\3\2\2\2\24\u03f0\3\2\2\2\26\u03f2\3"+
		"\2\2\2\30\u0400\3\2\2\2\32\u0413\3\2\2\2\34\u0415\3\2\2\2\36\u0417\3\2"+
		"\2\2 \u0427\3\2\2\2\"\u042c\3\2\2\2$\u0433\3\2\2\2&\u0438\3\2\2\2(\u0444"+
		"\3\2\2\2*\u044a\3\2\2\2,\u044c\3\2\2\2.\u0461\3\2\2\2\60\u0463\3\2\2\2"+
		"\62\u0475\3\2\2\2\64\u0477\3\2\2\2\66\u0486\3\2\2\28\u048a\3\2\2\2:\u048c"+
		"\3\2\2\2<\u0498\3\2\2\2>\u04a2\3\2\2\2@\u04a4\3\2\2\2B\u04ad\3\2\2\2D"+
		"\u04af\3\2\2\2F\u04b1\3\2\2\2H\u04b3\3\2\2\2J\u04b5\3\2\2\2L\u04bc\3\2"+
		"\2\2N\u04c4\3\2\2\2P\u04c6\3\2\2\2R\u04d0\3\2\2\2T\u04d2\3\2\2\2V\u04d4"+
		"\3\2\2\2X\u04d9\3\2\2\2Z\u04db\3\2\2\2\\\u04e4\3\2\2\2^\u04e6\3\2\2\2"+
		"`\u04e8\3\2\2\2b\u04ea\3\2\2\2d\u04f7\3\2\2\2f\u04f9\3\2\2\2h\u04fe\3"+
		"\2\2\2j\u0500\3\2\2\2l\u050a\3\2\2\2n\u050c\3\2\2\2p\u0512\3\2\2\2r\u0515"+
		"\3\2\2\2t\u051e\3\2\2\2v\u0520\3\2\2\2x\u0523\3\2\2\2z\u0526\3\2\2\2|"+
		"\u052d\3\2\2\2~\u0532\3\2\2\2\u0080\u0537\3\2\2\2\u0082\u053c\3\2\2\2"+
		"\u0084\u0550\3\2\2\2\u0086\u0555\3\2\2\2\u0088\u055a\3\2\2\2\u008a\u055e"+
		"\3\2\2\2\u008c\u0562\3\2\2\2\u008e\u0566\3\2\2\2\u0090\u056f\3\2\2\2\u0092"+
		"\u0571\3\2\2\2\u0094\u0574\3\2\2\2\u0096\u0577\3\2\2\2\u0098\u057a\3\2"+
		"\2\2\u009a\u0584\3\2\2\2\u009c\u0586\3\2\2\2\u009e\u0589\3\2\2\2\u00a0"+
		"\u059a\3\2\2\2\u00a2\u059f\3\2\2\2\u00a4\u05a1\3\2\2\2\u00a6\u05ab\3\2"+
		"\2\2\u00a8\u05ad\3\2\2\2\u00aa\u05b0\3\2\2\2\u00ac\u05b9\3\2\2\2\u00ae"+
		"\u05be\3\2\2\2\u00b0\u05c0\3\2\2\2\u00b2\u05cd\3\2\2\2\u00b4\u05cf\3\2"+
		"\2\2\u00b6\u05d2\3\2\2\2\u00b8\u05da\3\2\2\2\u00ba\u05e4\3\2\2\2\u00bc"+
		"\u05ef\3\2\2\2\u00be\u05f8\3\2\2\2\u00c0\u0600\3\2\2\2\u00c2\u0618\3\2"+
		"\2\2\u00c4\u0621\3\2\2\2\u00c6\u0623\3\2\2\2\u00c8\u062b\3\2\2\2\u00ca"+
		"\u062d\3\2\2\2\u00cc\u0631\3\2\2\2\u00ce\u0633\3\2\2\2\u00d0\u0636\3\2"+
		"\2\2\u00d2\u063b\3\2\2\2\u00d4\u063d\3\2\2\2\u00d6\u0640\3\2\2\2\u00d8"+
		"\u0648\3\2\2\2\u00da\u064a\3\2\2\2\u00dc\u0652\3\2\2\2\u00de\u0659\3\2"+
		"\2\2\u00e0\u0667\3\2\2\2\u00e2\u0669\3\2\2\2\u00e4\u066b\3\2\2\2\u00e6"+
		"\u0674\3\2\2\2\u00e8\u067c\3\2\2\2\u00ea\u0680\3\2\2\2\u00ec\u0685\3\2"+
		"\2\2\u00ee\u0687\3\2\2\2\u00f0\u0692\3\2\2\2\u00f2\u0694\3\2\2\2\u00f4"+
		"\u06a1\3\2\2\2\u00f6\u06a3\3\2\2\2\u00f8\u06ac\3\2\2\2\u00fa\u06ae\3\2"+
		"\2\2\u00fc\u06b1\3\2\2\2\u00fe\u06b5\3\2\2\2\u0100\u06b7\3\2\2\2\u0102"+
		"\u06c5\3\2\2\2\u0104\u06c7\3\2\2\2\u0106\u06cb\3\2\2\2\u0108\u06d2\3\2"+
		"\2\2\u010a\u06d4\3\2\2\2\u010c\u06e2\3\2\2\2\u010e\u06e4\3\2\2\2\u0110"+
		"\u06e6\3\2\2\2\u0112\u06e8\3\2\2\2\u0114\u06ea\3\2\2\2\u0116\u06f0\3\2"+
		"\2\2\u0118\u06f2\3\2\2\2\u011a\u06f8\3\2\2\2\u011c\u06ff\3\2\2\2\u011e"+
		"\u0701\3\2\2\2\u0120\u0707\3\2\2\2\u0122\u0709\3\2\2\2\u0124\u070d\3\2"+
		"\2\2\u0126\u0711\3\2\2\2\u0128\u0716\3\2\2\2\u012a\u071d\3\2\2\2\u012c"+
		"\u0726\3\2\2\2\u012e\u072c\3\2\2\2\u0130\u072e\3\2\2\2\u0132\u0736\3\2"+
		"\2\2\u0134\u0739\3\2\2\2\u0136\u073b\3\2\2\2\u0138\u073d\3\2\2\2\u013a"+
		"\u0741\3\2\2\2\u013c\u0751\3\2\2\2\u013e\u0753\3\2\2\2\u0140\u0757\3\2"+
		"\2\2\u0142\u0759\3\2\2\2\u0144\u075b\3\2\2\2\u0146\u0784\3\2\2\2\u0148"+
		"\u0786\3\2\2\2\u014a\u0788\3\2\2\2\u014c\u0798\3\2\2\2\u014e\u079a\3\2"+
		"\2\2\u0150\u079e\3\2\2\2\u0152\u07a0\3\2\2\2\u0154\u07a4\3\2\2\2\u0156"+
		"\u07a6\3\2\2\2\u0158\u07ad\3\2\2\2\u015a\u07b0\3\2\2\2\u015c\u07b4\3\2"+
		"\2\2\u015e\u07b6\3\2\2\2\u0160\u07bc\3\2\2\2\u0162\u07be\3\2\2\2\u0164"+
		"\u07c3\3\2\2\2\u0166\u07c8\3\2\2\2\u0168\u07cd\3\2\2\2\u016a\u07d5\3\2"+
		"\2\2\u016c\u07d7\3\2\2\2\u016e\u07db\3\2\2\2\u0170\u07dd\3\2\2\2\u0172"+
		"\u07e6\3\2\2\2\u0174\u07e8\3\2\2\2\u0176\u07f2\3\2\2\2\u0178\u07f4\3\2"+
		"\2\2\u017a\u0801\3\2\2\2\u017c\u0805\3\2\2\2\u017e\u080c\3\2\2\2\u0180"+
		"\u080e\3\2\2\2\u0182\u0811\3\2\2\2\u0184\u081a\3\2\2\2\u0186\u0822\3\2"+
		"\2\2\u0188\u0832\3\2\2\2\u018a\u0834\3\2\2\2\u018c\u083a\3\2\2\2\u018e"+
		"\u083c\3\2\2\2\u0190\u0844\3\2\2\2\u0192\u0850\3\2\2\2\u0194\u0852\3\2"+
		"\2\2\u0196\u085c\3\2\2\2\u0198\u085e\3\2\2\2\u019a\u0875\3\2\2\2\u019c"+
		"\u0877\3\2\2\2\u019e\u087d\3\2\2\2\u01a0\u088d\3\2\2\2\u01a2\u0898\3\2"+
		"\2\2\u01a4\u08a5\3\2\2\2\u01a6\u08aa\3\2\2\2\u01a8\u08b5\3\2\2\2\u01aa"+
		"\u08bc\3\2\2\2\u01ac\u08c4\3\2\2\2\u01ae\u08c9\3\2\2\2\u01b0\u08cb\3\2"+
		"\2\2\u01b2\u08d2\3\2\2\2\u01b4\u08d4\3\2\2\2\u01b6\u08d8\3\2\2\2\u01b8"+
		"\u08db\3\2\2\2\u01ba\u08e6\3\2\2\2\u01bc\u08e9\3\2\2\2\u01be\u08fb\3\2"+
		"\2\2\u01c0\u0906\3\2\2\2\u01c2\u0908\3\2\2\2\u01c4\u090e\3\2\2\2\u01c6"+
		"\u0917\3\2\2\2\u01c8\u0928\3\2\2\2\u01ca\u093e\3\2\2\2\u01cc\u0940\3\2"+
		"\2\2\u01ce\u0944\3\2\2\2\u01d0\u094d\3\2\2\2\u01d2\u0959\3\2\2\2\u01d4"+
		"\u095b\3\2\2\2\u01d6\u0963\3\2\2\2\u01d8\u096d\3\2\2\2\u01da\u096f\3\2"+
		"\2\2\u01dc\u0971\3\2\2\2\u01de\u0973\3\2\2\2\u01e0\u0979\3\2\2\2\u01e2"+
		"\u097e\3\2\2\2\u01e4\u0981\3\2\2\2\u01e6\u0983\3\2\2\2\u01e8\u098d\3\2"+
		"\2\2\u01ea\u0997\3\2\2\2\u01ec\u099d\3\2\2\2\u01ee\u099f\3\2\2\2\u01f0"+
		"\u09a7\3\2\2\2\u01f2\u09ad\3\2\2\2\u01f4\u09af\3\2\2\2\u01f6\u09ba\3\2"+
		"\2\2\u01f8\u09c6\3\2\2\2\u01fa\u09cc\3\2\2\2\u01fc\u09d4\3\2\2\2\u01fe"+
		"\u09db\3\2\2\2\u0200\u09dd\3\2\2\2\u0202\u09e5\3\2\2\2\u0204\u09e9\3\2"+
		"\2\2\u0206\u09eb\3\2\2\2\u0208\u09f4\3\2\2\2\u020a\u09fc\3\2\2\2\u020c"+
		"\u0a0f\3\2\2\2\u020e\u0a19\3\2\2\2\u0210\u0a1b\3\2\2\2\u0212\u0a21\3\2"+
		"\2\2\u0214\u0a23\3\2\2\2\u0216\u0a2a\3\2\2\2\u0218\u0a32\3\2\2\2\u021a"+
		"\u0a3d\3\2\2\2\u021c\u0a41\3\2\2\2\u021e\u0a58\3\2\2\2\u0220\u0a5c\3\2"+
		"\2\2\u0222\u0a5e\3\2\2\2\u0224\u0a6a\3\2\2\2\u0226\u0a75\3\2\2\2\u0228"+
		"\u0a77\3\2\2\2\u022a\u0a7c\3\2\2\2\u022c\u0a7f\3\2\2\2\u022e\u0a83\3\2"+
		"\2\2\u0230\u0a85\3\2\2\2\u0232\u0a87\3\2\2\2\u0234\u0a8e\3\2\2\2\u0236"+
		"\u0a93\3\2\2\2\u0238\u0a95\3\2\2\2\u023a\u0a9c\3\2\2\2\u023c\u0aa5\3\2"+
		"\2\2\u023e\u0aaa\3\2\2\2\u0240\u0aac\3\2\2\2\u0242\u0ab1\3\2\2\2\u0244"+
		"\u0ab6\3\2\2\2\u0246\u0abb\3\2\2\2\u0248\u0ac6\3\2\2\2\u024a\u0acc\3\2"+
		"\2\2\u024c\u0ad0\3\2\2\2\u024e\u0ad7\3\2\2\2\u0250\u0ad9\3\2\2\2\u0252"+
		"\u0adb\3\2\2\2\u0254\u0ae6\3\2\2\2\u0256\u0ae8\3\2\2\2\u0258\u0aea\3\2"+
		"\2\2\u025a\u0aef\3\2\2\2\u025c\u0af6\3\2\2\2\u025e\u0aff\3\2\2\2\u0260"+
		"\u0b03\3\2\2\2\u0262\u0b05\3\2\2\2\u0264\u0b07\3\2\2\2\u0266\u0b12\3\2"+
		"\2\2\u0268\u0b1d\3\2\2\2\u026a\u0b21\3\2\2\2\u026c\u0b23\3\2\2\2\u026e"+
		"\u0b2a\3\2\2\2\u0270\u0b2c\3\2\2\2\u0272\u0b3b\3\2\2\2\u0274\u0b3d\3\2"+
		"\2\2\u0276\u0b46\3\2\2\2\u0278\u0b48\3\2\2\2\u027a\u0b59\3\2\2\2\u027c"+
		"\u0b5b\3\2\2\2\u027e\u0b5f\3\2\2\2\u0280\u0b61\3\2\2\2\u0282\u0b65\3\2"+
		"\2\2\u0284\u0b68\3\2\2\2\u0286\u0b6a\3\2\2\2\u0288\u0b76\3\2\2\2\u028a"+
		"\u0b82\3\2\2\2\u028c\u0b89\3\2\2\2\u028e\u0b97\3\2\2\2\u0290\u0b9d\3\2"+
		"\2\2\u0292\u0b9f\3\2\2\2\u0294\u0ba1\3\2\2\2\u0296\u0ba9\3\2\2\2\u0298"+
		"\u0bad\3\2\2\2\u029a\u0baf\3\2\2\2\u029c\u0bb4\3\2\2\2\u029e\u0bba\3\2"+
		"\2\2\u02a0\u0bbf\3\2\2\2\u02a2\u0bc3\3\2\2\2\u02a4\u0bc5\3\2\2\2\u02a6"+
		"\u0bc9\3\2\2\2\u02a8\u0bdb\3\2\2\2\u02aa\u0bdf\3\2\2\2\u02ac\u0be1\3\2"+
		"\2\2\u02ae\u0be3\3\2\2\2\u02b0\u0be5\3\2\2\2\u02b2\u0be7\3\2\2\2\u02b4"+
		"\u0be9\3\2\2\2\u02b6\u0bed\3\2\2\2\u02b8\u0bef\3\2\2\2\u02ba\u0bf2\3\2"+
		"\2\2\u02bc\u0bf7\3\2\2\2\u02be\u0bf9\3\2\2\2\u02c0\u0c02\3\2\2\2\u02c2"+
		"\u0c09\3\2\2\2\u02c4\u0c0b\3\2\2\2\u02c6\u0c15\3\2\2\2\u02c8\u0c17\3\2"+
		"\2\2\u02ca\u0c1b\3\2\2\2\u02cc\u0c24\3\2\2\2\u02ce\u0c34\3\2\2\2\u02d0"+
		"\u0c36\3\2\2\2\u02d2\u0c39\3\2\2\2\u02d4\u0c3e\3\2\2\2\u02d6\u0c40\3\2"+
		"\2\2\u02d8\u0c47\3\2\2\2\u02da\u0c49\3\2\2\2\u02dc\u0c4c\3\2\2\2\u02de"+
		"\u0c4e\3\2\2\2\u02e0\u0c51\3\2\2\2\u02e2\u0c55\3\2\2\2\u02e4\u0c5d\3\2"+
		"\2\2\u02e6\u0c61\3\2\2\2\u02e8\u0c65\3\2\2\2\u02ea\u0c6d\3\2\2\2\u02ec"+
		"\u0c76\3\2\2\2\u02ee\u0c78\3\2\2\2\u02f0\u0c7a\3\2\2\2\u02f2\u0c84\3\2"+
		"\2\2\u02f4\u0c8e\3\2\2\2\u02f6\u0c95\3\2\2\2\u02f8\u0c99\3\2\2\2\u02fa"+
		"\u0ca1\3\2\2\2\u02fc\u0ca3\3\2\2\2\u02fe\u0cb1\3\2\2\2\u0300\u0cbf\3\2"+
		"\2\2\u0302\u0cd0\3\2\2\2\u0304\u0cd2\3\2\2\2\u0306\u0cd5\3\2\2\2\u0308"+
		"\u0cd8\3\2\2\2\u030a\u0cdb\3\2\2\2\u030c\u0ce5\3\2\2\2\u030e\u0ce7\3\2"+
		"\2\2\u0310\u0ce9\3\2\2\2\u0312\u0cf0\3\2\2\2\u0314\u0cf7\3\2\2\2\u0316"+
		"\u0cf9\3\2\2\2\u0318\u0d0c\3\2\2\2\u031a\u0d13\3\2\2\2\u031c\u0d27\3\2"+
		"\2\2\u031e\u0d2f\3\2\2\2\u0320\u0d3b\3\2\2\2\u0322\u0d4b\3\2\2\2\u0324"+
		"\u0d57\3\2\2\2\u0326\u0d6f\3\2\2\2\u0328\u0d71\3\2\2\2\u032a\u0d73\3\2"+
		"\2\2\u032c\u0d75\3\2\2\2\u032e\u0d77\3\2\2\2\u0330\u0d7f\3\2\2\2\u0332"+
		"\u0d81\3\2\2\2\u0334\u0d88\3\2\2\2\u0336\u0d8a\3\2\2\2\u0338\u0d92\3\2"+
		"\2\2\u033a\u0d94\3\2\2\2\u033c\u0dab\3\2\2\2\u033e\u0db5\3\2\2\2\u0340"+
		"\u0db7\3\2\2\2\u0342\u0dbb\3\2\2\2\u0344\u0dbe\3\2\2\2\u0346\u0dc0\3\2"+
		"\2\2\u0348\u0dc5\3\2\2\2\u034a\u0dc9\3\2\2\2\u034c\u0dd3\3\2\2\2\u034e"+
		"\u0dd5\3\2\2\2\u0350\u0dd7\3\2\2\2\u0352\u0dd9\3\2\2\2\u0354\u0ddb\3\2"+
		"\2\2\u0356\u0ddd\3\2\2\2\u0358\u0ddf\3\2\2\2\u035a\u0de1\3\2\2\2\u035c"+
		"\u0de3\3\2\2\2\u035e\u0de7\3\2\2\2\u0360\u0deb\3\2\2\2\u0362\u0ded\3\2"+
		"\2\2\u0364\u0df2\3\2\2\2\u0366\u0df6\3\2\2\2\u0368\u0df8\3\2\2\2\u036a"+
		"\u0dfc\3\2\2\2\u036c\u0dfe\3\2\2\2\u036e\u0e00\3\2\2\2\u0370\u0e02\3\2"+
		"\2\2\u0372\u0e04\3\2\2\2\u0374\u0e06\3\2\2\2\u0376\u0e08\3\2\2\2\u0378"+
		"\u0e0a\3\2\2\2\u037a\u0e0e\3\2\2\2\u037c\u0e10\3\2\2\2\u037e\u0e12\3\2"+
		"\2\2\u0380\u0e14\3\2\2\2\u0382\u0e16\3\2\2\2\u0384\u0e18\3\2\2\2\u0386"+
		"\u0e1a\3\2\2\2\u0388\u0e1c\3\2\2\2\u038a\u0e1e\3\2\2\2\u038c\u0e20\3\2"+
		"\2\2\u038e\u0e22\3\2\2\2\u0390\u0e24\3\2\2\2\u0392\u0e28\3\2\2\2\u0394"+
		"\u0e2a\3\2\2\2\u0396\u0e31\3\2\2\2\u0398\u0e35\3\2\2\2\u039a\u0e3a\3\2"+
		"\2\2\u039c\u0e3e\3\2\2\2\u039e\u0e41\3\2\2\2\u03a0\u0e43\3\2\2\2\u03a2"+
		"\u0e45\3\2\2\2\u03a4\u0e47\3\2\2\2\u03a6\u0e49\3\2\2\2\u03a8\u0e4b\3\2"+
		"\2\2\u03aa\u03ae\5\4\3\2\u03ab\u03ad\7\u0102\2\2\u03ac\u03ab\3\2\2\2\u03ad"+
		"\u03b0\3\2\2\2\u03ae\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b1\3\2"+
		"\2\2\u03b0\u03ae\3\2\2\2\u03b1\u03b2\7\2\2\3\u03b2\3\3\2\2\2\u03b3\u03bb"+
		"\5\6\4\2\u03b4\u03bb\5\u009aN\2\u03b5\u03bb\5\u00f0y\2\u03b6\u03bb\5\u0108"+
		"\u0085\2\u03b7\u03bb\5\u011c\u008f\2\u03b8\u03bb\5\u012c\u0097\2\u03b9"+
		"\u03bb\5\u0188\u00c5\2\u03ba\u03b3\3\2\2\2\u03ba\u03b4\3\2\2\2\u03ba\u03b5"+
		"\3\2\2\2\u03ba\u03b6\3\2\2\2\u03ba\u03b7\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba"+
		"\u03b9\3\2\2\2\u03bb\5\3\2\2\2\u03bc\u03bf\5\b\5\2\u03bd\u03bf\5d\63\2"+
		"\u03be\u03bc\3\2\2\2\u03be\u03bd\3\2\2\2\u03bf\7\3\2\2\2\u03c0\u03ca\5"+
		"\n\6\2\u03c1\u03ca\5\26\f\2\u03c2\u03ca\5\30\r\2\u03c3\u03ca\5,\27\2\u03c4"+
		"\u03ca\5\36\20\2\u03c5\u03ca\5&\24\2\u03c6\u03ca\5:\36\2\u03c7\u03ca\5"+
		"P)\2\u03c8\u03ca\5\"\22\2\u03c9\u03c0\3\2\2\2\u03c9\u03c1\3\2\2\2\u03c9"+
		"\u03c2\3\2\2\2\u03c9\u03c3\3\2\2\2\u03c9\u03c4\3\2\2\2\u03c9\u03c5\3\2"+
		"\2\2\u03c9\u03c6\3\2\2\2\u03c9\u03c7\3\2\2\2\u03c9\u03c8\3\2\2\2\u03ca"+
		"\t\3\2\2\2\u03cb\u03cc\7\u00a8\2\2\u03cc\u03cd\7\'\2\2\u03cd\u03cf\5\f"+
		"\7\2\u03ce\u03d0\5\20\t\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0"+
		"\u03d2\3\2\2\2\u03d1\u03d3\5\24\13\2\u03d2\u03d1\3\2\2\2\u03d3\u03d4\3"+
		"\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\13\3\2\2\2\u03d6"+
		"\u03de\5\u02a0\u0151\2\u03d7\u03d8\7:\2\2\u03d8\u03de\5\16\b\2\u03d9\u03da"+
		"\5\u02a0\u0151\2\u03da\u03db\7:\2\2\u03db\u03dc\5\16\b\2\u03dc\u03de\3"+
		"\2\2\2\u03dd\u03d6\3\2\2\2\u03dd\u03d7\3\2\2\2\u03dd\u03d9\3\2\2\2\u03de"+
		"\r\3\2\2\2\u03df\u03e0\5\u0386\u01c4\2\u03e0\17\3\2\2\2\u03e1\u03e2\7"+
		"\u0111\2\2\u03e2\u03e3\7\u0080\2\2\u03e3\u03e4\7F\2\2\u03e4\u03e5\5\u02aa"+
		"\u0156\2\u03e5\21\3\2\2\2\u03e6\u03e7\5\u02a8\u0155\2\u03e7\23\3\2\2\2"+
		"\u03e8\u03f1\5\36\20\2\u03e9\u03f1\5\26\f\2\u03ea\u03f1\5\30\r\2\u03eb"+
		"\u03f1\5,\27\2\u03ec\u03f1\5\"\22\2\u03ed\u03f1\5&\24\2\u03ee\u03f1\5"+
		":\36\2\u03ef\u03f1\5P)\2\u03f0\u03e8\3\2\2\2\u03f0\u03e9\3\2\2\2\u03f0"+
		"\u03ea\3\2\2\2\u03f0\u03eb\3\2\2\2\u03f0\u03ec\3\2\2\2\u03f0\u03ed\3\2"+
		"\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03ef\3\2\2\2\u03f1\25\3\2\2\2\u03f2\u03f5"+
		"\7\u00a8\2\2\u03f3\u03f4\t\2\2\2\u03f4\u03f6\7S\2\2\u03f5\u03f3\3\2\2"+
		"\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\7\13\2\2\u03f8"+
		"\u03f9\5\u02b6\u015c\2\u03f9\u03fe\5\u01b8\u00dd\2\u03fa\u03fb\7\u00aa"+
		"\2\2\u03fb\u03fc\7\u00ca\2\2\u03fc\u03fd\t\3\2\2\u03fd\u03ff\7\u00ab\2"+
		"\2\u03fe\u03fa\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\27\3\2\2\2\u0400\u0401"+
		"\7\u00a8\2\2\u0401\u0402\7W\2\2\u0402\u0407\5\u02b6\u015c\2\u0403\u0404"+
		"\7\u00fb\2\2\u0404\u0405\5\32\16\2\u0405\u0406\7\u00fc\2\2\u0406\u0408"+
		"\3\2\2\2\u0407\u0403\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409\3\2\2\2\u0409"+
		"\u040a\7B\2\2\u040a\u0411\5\u019e\u00d0\2\u040b\u040d\7\64\2\2\u040c\u040e"+
		"\5\34\17\2\u040d\u040c\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u040f\3\2\2\2"+
		"\u040f\u0410\7\26\2\2\u0410\u0412\7\u00a7\2\2\u0411\u040b\3\2\2\2\u0411"+
		"\u0412\3\2\2\2\u0412\31\3\2\2\2\u0413\u0414\5\u0316\u018c\2\u0414\33\3"+
		"\2\2\2\u0415\u0416\t\4\2\2\u0416\35\3\2\2\2\u0417\u0418\7\u00a8\2\2\u0418"+
		"\u041a\7\30\2\2\u0419\u041b\7B\2\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2"+
		"\2\2\u041b\u041c\3\2\2\2\u041c\u041e\5\u0318\u018d\2\u041d\u041f\5\u02f2"+
		"\u017a\2\u041e\u041d\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421\3\2\2\2\u0420"+
		"\u0422\5 \21\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0424\3\2"+
		"\2\2\u0423\u0425\5\u02da\u016e\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2"+
		"\2\u0425\37\3\2\2\2\u0426\u0428\5\u02b8\u015d\2\u0427\u0426\3\2\2\2\u0427"+
		"\u0428\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042a\5\u01c2\u00e2\2\u042a\u042b"+
		"\5\u02ce\u0168\2\u042b!\3\2\2\2\u042c\u042d\7\u00a8\2\2\u042d\u042e\7"+
		"b\2\2\u042e\u042f\5\u02ba\u015e\2\u042f\u0431\5$\23\2\u0430\u0432\5\u02ce"+
		"\u0168\2\u0431\u0430\3\2\2\2\u0431\u0432\3\2\2\2\u0432#\3\2\2\2\u0433"+
		"\u0434\7\26\2\2\u0434\u0435\7\u00fb\2\2\u0435\u0436\5\u01c8\u00e5\2\u0436"+
		"\u0437\7\u00fc\2\2\u0437%\3\2\2\2\u0438\u0439\7\u00a8\2\2\u0439\u043a"+
		"\7\u0080\2\2\u043a\u043b\7F\2\2\u043b\u043d\5\u02a8\u0155\2\u043c\u043e"+
		"\7B\2\2\u043d\u043c\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u043f\3\2\2\2\u043f"+
		"\u0442\5(\25\2\u0440\u0443\5\u02da\u016e\2\u0441\u0443\5L\'\2\u0442\u0440"+
		"\3\2\2\2\u0442\u0441\3\2\2\2\u0442\u0443\3\2\2\2\u0443\'\3\2\2\2\u0444"+
		"\u0445\7M\2\2\u0445\u0446\5*\26\2\u0446)\3\2\2\2\u0447\u044b\5\u02ac\u0157"+
		"\2\u0448\u044b\5\u02ae\u0158\2\u0449\u044b\5\22\n\2\u044a\u0447\3\2\2"+
		"\2\u044a\u0448\3\2\2\2\u044a\u0449\3\2\2\2\u044b+\3\2\2\2\u044c\u044d"+
		"\7\u00d8\2\2\u044d\u044e\5.\30\2\u044e\u044f\7\u00aa\2\2\u044f\u0450\5"+
		"\66\34\2\u0450\u0451\7\u0093\2\2\u0451\u0456\58\35\2\u0452\u0453\7\u00fe"+
		"\2\2\u0453\u0455\58\35\2\u0454\u0452\3\2\2\2\u0455\u0458\3\2\2\2\u0456"+
		"\u0454\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u045c\3\2\2\2\u0458\u0456\3\2"+
		"\2\2\u0459\u045a\7\64\2\2\u045a\u045b\7\u00d8\2\2\u045b\u045d\7\u00a7"+
		"\2\2\u045c\u0459\3\2\2\2\u045c\u045d\3\2\2\2\u045d-\3\2\2\2\u045e\u045f"+
		"\7\u0114\2\2\u045f\u0462\7\u00a6\2\2\u0460\u0462\5\60\31\2\u0461\u045e"+
		"\3\2\2\2\u0461\u0460\3\2\2\2\u0462/\3\2\2\2\u0463\u0468\5\62\32\2\u0464"+
		"\u0465\7\u00fe\2\2\u0465\u0467\5\62\32\2\u0466\u0464\3\2\2\2\u0467\u046a"+
		"\3\2\2\2\u0468\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469\61\3\2\2\2\u046a"+
		"\u0468\3\2\2\2\u046b\u0476\7\u00d0\2\2\u046c\u0476\7\4\2\2\u046d\u0472"+
		"\t\5\2\2\u046e\u046f\7\u00fb\2\2\u046f\u0470\5\64\33\2\u0470\u0471\7\u00fc"+
		"\2\2\u0471\u0473\3\2\2\2\u0472\u046e\3\2\2\2\u0472\u0473\3\2\2\2\u0473"+
		"\u0476\3\2\2\2\u0474\u0476\7\u00a9\2\2\u0475\u046b\3\2\2\2\u0475\u046c"+
		"\3\2\2\2\u0475\u046d\3\2\2\2\u0475\u0474\3\2\2\2\u0476\63\3\2\2\2\u0477"+
		"\u0478\5\u0316\u018c\2\u0478\65\3\2\2\2\u0479\u047b\7\13\2\2\u047a\u0479"+
		"\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u0487\5\u02b6\u015c"+
		"\2\u047d\u047e\7\30\2\2\u047e\u0487\5\u0398\u01cd\2\u047f\u0480\7\u00b5"+
		"\2\2\u0480\u0487\5\u02dc\u016f\2\u0481\u0482\7\u0080\2\2\u0482\u0483\7"+
		"F\2\2\u0483\u0487\5\u02a8\u0155\2\u0484\u0485\7\20\2\2\u0485\u0487\5\u03a0"+
		"\u01d1\2\u0486\u047a\3\2\2\2\u0486\u047d\3\2\2\2\u0486\u047f\3\2\2\2\u0486"+
		"\u0481\3\2\2\2\u0486\u0484\3\2\2\2\u0487\67\3\2\2\2\u0488\u048b\7\u00f1"+
		"\2\2\u0489\u048b\5\u0386\u01c4\2\u048a\u0488\3\2\2\2\u048a\u0489\3\2\2"+
		"\2\u048b9\3\2\2\2\u048c\u048d\7\u00a8\2\2\u048d\u048e\7\u00b5\2\2\u048e"+
		"\u048f\5\u02dc\u016f\2\u048f\u0490\7\"\2\2\u0490\u0491\5\u02aa\u0156\2"+
		"\u0491\u0492\7\u008e\2\2\u0492\u0494\5<\37\2\u0493\u0495\5N(\2\u0494\u0493"+
		"\3\2\2\2\u0494\u0495\3\2\2\2\u0495;\3\2\2\2\u0496\u0499\5> \2\u0497\u0499"+
		"\5J&\2\u0498\u0496\3\2\2\2\u0498\u0497\3\2\2\2\u0499=\3\2\2\2\u049a\u04a3"+
		"\5@!\2\u049b\u04a3\5H%\2\u049c\u049d\7\17\2\2\u049d\u049e\7\u00fb\2\2"+
		"\u049e\u049f\5\u02dc\u016f\2\u049f\u04a0\7\u00fc\2\2\u04a0\u04a3\3\2\2"+
		"\2\u04a1\u04a3\7\u0111\2\2\u04a2\u049a\3\2\2\2\u04a2\u049b\3\2\2\2\u04a2"+
		"\u049c\3\2\2\2\u04a2\u04a1\3\2\2\2\u04a3?\3\2\2\2\u04a4\u04a5\7\u0085"+
		"\2\2\u04a5\u04a6\7\u00fb\2\2\u04a6\u04a7\7\u00fa\2\2\u04a7\u04a8\5B\""+
		"\2\u04a8\u04a9\7\u00fa\2\2\u04a9\u04aa\7\u00fc\2\2\u04aaA\3\2\2\2\u04ab"+
		"\u04ae\5D#\2\u04ac\u04ae\5F$\2\u04ad\u04ab\3\2\2\2\u04ad\u04ac\3\2\2\2"+
		"\u04aeC\3\2\2\2\u04af\u04b0\5\u02dc\u016f\2\u04b0E\3\2\2\2\u04b1\u04b2"+
		"\5\u02dc\u016f\2\u04b2G\3\2\2\2\u04b3\u04b4\5\u02dc\u016f\2\u04b4I\3\2"+
		"\2\2\u04b5\u04b6\7\20\2\2\u04b6\u04ba\5\u03a0\u01d1\2\u04b7\u04b8\7\32"+
		"\2\2\u04b8\u04b9\7\u00b5\2\2\u04b9\u04bb\5\u02dc\u016f\2\u04ba\u04b7\3"+
		"\2\2\2\u04ba\u04bb\3\2\2\2\u04bbK\3\2\2\2\u04bc\u04bd\7\u00b5\2\2\u04bd"+
		"\u04be\7\u008e\2\2\u04be\u04bf\5<\37\2\u04bfM\3\2\2\2\u04c0\u04c1\7\u009f"+
		"\2\2\u04c1\u04c5\7o\2\2\u04c2\u04c3\7o\2\2\u04c3\u04c5\7\u00e7\2\2\u04c4"+
		"\u04c0\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c5O\3\2\2\2\u04c6\u04c7\7\u00a8"+
		"\2\2\u04c7\u04c8\7\20\2\2\u04c8\u04c9\5\u03a0\u01d1\2\u04c9\u04ca\7\""+
		"\2\2\u04ca\u04cb\5R*\2\u04cb\u04cc\7\u0093\2\2\u04cc\u04cd\5\u02aa\u0156"+
		"\2\u04cd\u04ce\7\u008e\2\2\u04ce\u04cf\5V,\2\u04cfQ\3\2\2\2\u04d0\u04d1"+
		"\5\u02aa\u0156\2\u04d1S\3\2\2\2\u04d2\u04d3\5\u02aa\u0156\2\u04d3U\3\2"+
		"\2\2\u04d4\u04d5\5X-\2\u04d5W\3\2\2\2\u04d6\u04da\5Z.\2\u04d7\u04da\7"+
		"\u00ee\2\2\u04d8\u04da\5b\62\2\u04d9\u04d6\3\2\2\2\u04d9\u04d7\3\2\2\2"+
		"\u04d9\u04d8\3\2\2\2\u04daY\3\2\2\2\u04db\u04dc\7\u0085\2\2\u04dc\u04dd"+
		"\7\u00fb\2\2\u04dd\u04de\7\u00fa\2\2\u04de\u04df\5\\/\2\u04df\u04e0\7"+
		"\u00fa\2\2\u04e0\u04e1\7\u00fc\2\2\u04e1[\3\2\2\2\u04e2\u04e5\5^\60\2"+
		"\u04e3\u04e5\5`\61\2\u04e4\u04e2\3\2\2\2\u04e4\u04e3\3\2\2\2\u04e5]\3"+
		"\2\2\2\u04e6\u04e7\5\u03a0\u01d1\2\u04e7_\3\2\2\2\u04e8\u04e9\5\u03a0"+
		"\u01d1\2\u04e9a\3\2\2\2\u04ea\u04eb\5\u03a0\u01d1\2\u04ebc\3\2\2\2\u04ec"+
		"\u04f8\5f\64\2\u04ed\u04f8\5j\66\2\u04ee\u04f8\5~@\2\u04ef\u04f8\5\u0080"+
		"A\2\u04f0\u04f8\5\u0082B\2\u04f1\u04f8\5\u008eH\2\u04f2\u04f8\5\u0084"+
		"C\2\u04f3\u04f8\5\u0086D\2\u04f4\u04f8\5\u0088E\2\u04f5\u04f8\5\u008a"+
		"F\2\u04f6\u04f8\5\u008cG\2\u04f7\u04ec\3\2\2\2\u04f7\u04ed\3\2\2\2\u04f7"+
		"\u04ee\3\2\2\2\u04f7\u04ef\3\2\2\2\u04f7\u04f0\3\2\2\2\u04f7\u04f1\3\2"+
		"\2\2\u04f7\u04f2\3\2\2\2\u04f7\u04f3\3\2\2\2\u04f7\u04f4\3\2\2\2\u04f7"+
		"\u04f5\3\2\2\2\u04f7\u04f6\3\2\2\2\u04f8e\3\2\2\2\u04f9\u04fa\7\u008d"+
		"\2\2\u04fa\u04fb\7\'\2\2\u04fb\u04fc\5\u02a0\u0151\2\u04fc\u04fd\5h\65"+
		"\2\u04fdg\3\2\2\2\u04fe\u04ff\t\6\2\2\u04ffi\3\2\2\2\u0500\u0501\7*\2"+
		"\2\u0501\u0502\7\13\2\2\u0502\u0503\5\u02b6\u015c\2\u0503\u0504\5l\67"+
		"\2\u0504k\3\2\2\2\u0505\u050b\5n8\2\u0506\u050b\5r:\2\u0507\u050b\5z>"+
		"\2\u0508\u050b\5p9\2\u0509\u050b\5|?\2\u050a\u0505\3\2\2\2\u050a\u0506"+
		"\3\2\2\2\u050a\u0507\3\2\2\2\u050a\u0508\3\2\2\2\u050a\u0509\3\2\2\2\u050b"+
		"m\3\2\2\2\u050c\u050e\7\u0083\2\2\u050d\u050f\7(\2\2\u050e\u050d\3\2\2"+
		"\2\u050e\u050f\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0511\5\u01bc\u00df\2"+
		"\u0511o\3\2\2\2\u0512\u0513\7\u0083\2\2\u0513\u0514\5\u01c4\u00e3\2\u0514"+
		"q\3\2\2\2\u0515\u0517\7*\2\2\u0516\u0518\7(\2\2\u0517\u0516\3\2\2\2\u0517"+
		"\u0518\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u051a\5\u0314\u018b\2\u051a\u051b"+
		"\5t;\2\u051bs\3\2\2\2\u051c\u051f\5v<\2\u051d\u051f\5x=\2\u051e\u051c"+
		"\3\2\2\2\u051e\u051d\3\2\2\2\u051fu\3\2\2\2\u0520\u0521\7F\2\2\u0521\u0522"+
		"\5\u02f2\u017a\2\u0522w\3\2\2\2\u0523\u0524\7\u008d\2\2\u0524\u0525\7"+
		"\u0111\2\2\u0525y\3\2\2\2\u0526\u0528\7\u008d\2\2\u0527\u0529\7(\2\2\u0528"+
		"\u0527\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052b\5\u0314"+
		"\u018b\2\u052b\u052c\5h\65\2\u052c{\3\2\2\2\u052d\u052e\7\u008d\2\2\u052e"+
		"\u052f\7@\2\2\u052f\u0530\5\u02ba\u015e\2\u0530\u0531\5h\65\2\u0531}\3"+
		"\2\2\2\u0532\u0533\7\u008d\2\2\u0533\u0534\7\13\2\2\u0534\u0535\5\u02b6"+
		"\u015c\2\u0535\u0536\5h\65\2\u0536\177\3\2\2\2\u0537\u0538\7\u008d\2\2"+
		"\u0538\u0539\7W\2\2\u0539\u053a\5\u02b6\u015c\2\u053a\u053b\5h\65\2\u053b"+
		"\u0081\3\2\2\2\u053c\u0540\7i\2\2\u053d\u053e\7\u00d8\2\2\u053e\u053f"+
		"\7\u00a7\2\2\u053f\u0541\7\"\2\2\u0540\u053d\3\2\2\2\u0540\u0541\3\2\2"+
		"\2\u0541\u0542\3\2\2\2\u0542\u0543\5.\30\2\u0543\u0544\7\u00aa\2\2\u0544"+
		"\u0545\5\66\34\2\u0545\u0546\7\u008e\2\2\u0546\u054b\58\35\2\u0547\u0548"+
		"\7\u00fe\2\2\u0548\u054a\58\35\2\u0549\u0547\3\2\2\2\u054a\u054d\3\2\2"+
		"\2\u054b\u0549\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054e\3\2\2\2\u054d\u054b"+
		"\3\2\2\2\u054e\u054f\5h\65\2\u054f\u0083\3\2\2\2\u0550\u0551\7\u008d\2"+
		"\2\u0551\u0552\7\30\2\2\u0552\u0553\5\u0398\u01cd\2\u0553\u0554\5h\65"+
		"\2\u0554\u0085\3\2\2\2\u0555\u0556\7\u008d\2\2\u0556\u0557\7\u0080\2\2"+
		"\u0557\u0558\7F\2\2\u0558\u0559\5\u02a8\u0155\2\u0559\u0087\3\2\2\2\u055a"+
		"\u055b\7\u008d\2\2\u055b\u055c\7\u00b5\2\2\u055c\u055d\5\u02dc\u016f\2"+
		"\u055d\u0089\3\2\2\2\u055e\u055f\7\u008d\2\2\u055f\u0560\7\20\2\2\u0560"+
		"\u0561\5\u03a0\u01d1\2\u0561\u008b\3\2\2\2\u0562\u0563\7\u008d\2\2\u0563"+
		"\u0564\7b\2\2\u0564\u0565\5\u02ba\u015e\2\u0565\u008d\3\2\2\2\u0566\u0567"+
		"\7*\2\2\u0567\u0568\7\30\2\2\u0568\u0569\5\u0398\u01cd\2\u0569\u056a\5"+
		"\u0090I\2\u056a\u008f\3\2\2\2\u056b\u0570\5\u0092J\2\u056c\u0570\5\u0094"+
		"K\2\u056d\u0570\5\u0096L\2\u056e\u0570\5\u0098M\2\u056f\u056b\3\2\2\2"+
		"\u056f\u056c\3\2\2\2\u056f\u056d\3\2\2\2\u056f\u056e\3\2\2\2\u0570\u0091"+
		"\3\2\2\2\u0571\u0572\7F\2\2\u0572\u0573\5\u02f2\u017a\2\u0573\u0093\3"+
		"\2\2\2\u0574\u0575\7\u008d\2\2\u0575\u0576\7\u0111\2\2\u0576\u0095\3\2"+
		"\2\2\u0577\u0578\7\u0083\2\2\u0578\u0579\5 \21\2\u0579\u0097\3\2\2\2\u057a"+
		"\u057b\7\u008d\2\2\u057b\u057c\7@\2\2\u057c\u057d\5\u02ba\u015e\2\u057d"+
		"\u0099\3\2\2\2\u057e\u0585\5\u009cO\2\u057f\u0585\5\u009eP\2\u0580\u0585"+
		"\5\u00a8U\2\u0581\u0585\5\u00aaV\2\u0582\u0585\5\u00acW\2\u0583\u0585"+
		"\5\u00d8m\2\u0584\u057e\3\2\2\2\u0584\u057f\3\2\2\2\u0584\u0580\3\2\2"+
		"\2\u0584\u0581\3\2\2\2\u0584\u0582\3\2\2\2\u0584\u0583\3\2\2\2\u0585\u009b"+
		"\3\2\2\2\u0586\u0587\7\f\2\2\u0587\u0588\5\u0388\u01c5\2\u0588\u009d\3"+
		"\2\2\2\u0589\u058e\7\u00ef\2\2\u058a\u058c\5\u00a0Q\2\u058b\u058a\3\2"+
		"\2\2\u058b\u058c\3\2\2\2\u058c\u058d\3\2\2\2\u058d\u058f\7\u008e\2\2\u058e"+
		"\u058b\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0591\5\u0388"+
		"\u01c5\2\u0591\u0592\7`\2\2\u0592\u0593\5\u00a4S\2\u0593\u009f\3\2\2\2"+
		"\u0594\u059b\7\u00c9\2\2\u0595\u059b\7\31\2\2\u0596\u059b\7 \2\2\u0597"+
		"\u059b\7\u00e4\2\2\u0598\u0599\t\7\2\2\u0599\u059b\5\u00a2R\2\u059a\u0594"+
		"\3\2\2\2\u059a\u0595\3\2\2\2\u059a\u0596\3\2\2\2\u059a\u0597\3\2\2\2\u059a"+
		"\u0598\3\2\2\2\u059b\u00a1\3\2\2\2\u059c\u05a0\5\u039c\u01cf\2\u059d\u05a0"+
		"\5\u034a\u01a6\2\u059e\u05a0\5\u02f6\u017c\2\u059f\u059c\3\2\2\2\u059f"+
		"\u059d\3\2\2\2\u059f\u059e\3\2\2\2\u05a0\u00a3\3\2\2\2\u05a1\u05a6\5\u00a6"+
		"T\2\u05a2\u05a3\7\u00fe\2\2\u05a3\u05a5\5\u00a6T\2\u05a4\u05a2\3\2\2\2"+
		"\u05a5\u05a8\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u00a5"+
		"\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a9\u05ac\5\u0340\u01a1\2\u05aa\u05ac\5"+
		"\u0346\u01a4\2\u05ab\u05a9\3\2\2\2\u05ab\u05aa\3\2\2\2\u05ac\u00a7\3\2"+
		"\2\2\u05ad\u05ae\7\u00d9\2\2\u05ae\u05af\5\u0388\u01c5\2\u05af\u00a9\3"+
		"\2\2\2\u05b0\u05b2\7\u00d0\2\2\u05b1\u05b3\5\u0378\u01bd\2\u05b2\u05b1"+
		"\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\5\u00aeX"+
		"\2\u05b5\u05b6\7`\2\2\u05b6\u05b7\5\u00b6\\\2\u05b7\u05b8\5\u00b8]\2\u05b8"+
		"\u00ab\3\2\2\2\u05b9\u05ba\5\u01b0\u00d9\2\u05ba\u05bb\5\u02e6\u0174\2"+
		"\u05bb\u00ad\3\2\2\2\u05bc\u05bf\7\u00fd\2\2\u05bd\u05bf\5\u00b0Y\2\u05be"+
		"\u05bc\3\2\2\2\u05be\u05bd\3\2\2\2\u05bf\u00af\3\2\2\2\u05c0\u05c5\5\u00b2"+
		"Z\2\u05c1\u05c2\7\u00fe\2\2\u05c2\u05c4\5\u00b2Z\2\u05c3\u05c1\3\2\2\2"+
		"\u05c4\u05c7\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u00b1"+
		"\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c8\u05ce\5\u00b4[\2\u05c9\u05ca\5\u0392"+
		"\u01ca\2\u05ca\u05cb\7\u00ff\2\2\u05cb\u05cc\7\u00fd\2\2\u05cc\u05ce\3"+
		"\2\2\2\u05cd\u05c8\3\2\2\2\u05cd\u05c9\3\2\2\2\u05ce\u00b3\3\2\2\2\u05cf"+
		"\u05d0\5\u01f2\u00fa\2\u05d0\u05d1\5\u02de\u0170\2\u05d1\u00b5\3\2\2\2"+
		"\u05d2\u05d7\5\u00a6T\2\u05d3\u05d4\7\u00fe\2\2\u05d4\u05d6\5\u00a6T\2"+
		"\u05d5\u05d3\3\2\2\2\u05d6\u05d9\3\2\2\2\u05d7\u05d5\3\2\2\2\u05d7\u05d8"+
		"\3\2\2\2\u05d8\u00b7\3\2\2\2\u05d9\u05d7\3\2\2\2\u05da\u05dc\5\u00ba^"+
		"\2\u05db\u05dd\5\u00d4k\2\u05dc\u05db\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd"+
		"\u05df\3\2\2\2\u05de\u05e0\5\u02e0\u0171\2\u05df\u05de\3\2\2\2\u05df\u05e0"+
		"\3\2\2\2\u05e0\u05e2\3\2\2\2\u05e1\u05e3\5\u00d6l\2\u05e2\u05e1\3\2\2"+
		"\2\u05e2\u05e3\3\2\2\2\u05e3\u00b9\3\2\2\2\u05e4\u05e5\7\u008e\2\2\u05e5"+
		"\u05ea\5\u00bc_\2\u05e6\u05e7\7\u00fe\2\2\u05e7\u05e9\5\u00bc_\2\u05e8"+
		"\u05e6\3\2\2\2\u05e9\u05ec\3\2\2\2\u05ea\u05e8\3\2\2\2\u05ea\u05eb\3\2"+
		"\2\2\u05eb\u00bb\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ed\u05f0\5\u00be`\2\u05ee"+
		"\u05f0\5\u00c0a\2\u05ef\u05ed\3\2\2\2\u05ef\u05ee\3\2\2\2\u05f0\u00bd"+
		"\3\2\2\2\u05f1\u05f3\5\u02b6\u015c\2\u05f2\u05f4\5\u00c2b\2\u05f3\u05f2"+
		"\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f9\3\2\2\2\u05f5\u05f6\5\u00c6d"+
		"\2\u05f6\u05f7\5\u00c2b\2\u05f7\u05f9\3\2\2\2\u05f8\u05f1\3\2\2\2\u05f8"+
		"\u05f5\3\2\2\2\u05f9\u00bf\3\2\2\2\u05fa\u05fb\ba\1\2\u05fb\u05fc\7\u00fb"+
		"\2\2\u05fc\u05fd\5\u00c0a\2\u05fd\u05fe\7\u00fc\2\2\u05fe\u0601\3\2\2"+
		"\2\u05ff\u0601\5\u00be`\2\u0600\u05fa\3\2\2\2\u0600\u05ff\3\2\2\2\u0601"+
		"\u0614\3\2\2\2\u0602\u0603\f\6\2\2\u0603\u0604\7\35\2\2\u0604\u0605\7"+
		"\u009c\2\2\u0605\u0613\5\u00c0a\7\u0606\u0608\f\5\2\2\u0607\u0609\7\u00a0"+
		"\2\2\u0608\u0607\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060b\3\2\2\2\u060a"+
		"\u060c\5\u00c8e\2\u060b\u060a\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060d"+
		"\3\2\2\2\u060d\u060e\7\u009c\2\2\u060e\u0610\5\u00c0a\2\u060f\u0611\5"+
		"\u00ccg\2\u0610\u060f\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0613\3\2\2\2"+
		"\u0612\u0602\3\2\2\2\u0612\u0606\3\2\2\2\u0613\u0616\3\2\2\2\u0614\u0612"+
		"\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u00c1\3\2\2\2\u0616\u0614\3\2\2\2\u0617"+
		"\u0619\7B\2\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061a\3\2"+
		"\2\2\u061a\u061f\5\u038a\u01c6\2\u061b\u061c\7\u00fb\2\2\u061c\u061d\5"+
		"\u00c4c\2\u061d\u061e\7\u00fc\2\2\u061e\u0620\3\2\2\2\u061f\u061b\3\2"+
		"\2\2\u061f\u0620\3\2\2\2\u0620\u00c3\3\2\2\2\u0621\u0622\5\u0316\u018c"+
		"\2\u0622\u00c5\3\2\2\2\u0623\u0624\5\u01e4\u00f3\2\u0624\u00c7\3\2\2\2"+
		"\u0625\u062c\7\177\2\2\u0626\u0628\5\u00caf\2\u0627\u0629\7\u0089\2\2"+
		"\u0628\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062c\3\2\2\2\u062a\u062c"+
		"\7q\2\2\u062b\u0625\3\2\2\2\u062b\u0626\3\2\2\2\u062b\u062a\3\2\2\2\u062c"+
		"\u00c9\3\2\2\2\u062d\u062e\t\b\2\2\u062e\u00cb\3\2\2\2\u062f\u0632\5\u00ce"+
		"h\2\u0630\u0632\5\u00d0i\2\u0631\u062f\3\2\2\2\u0631\u0630\3\2\2\2\u0632"+
		"\u00cd\3\2\2\2\u0633\u0634\7\u00aa\2\2\u0634\u0635\5\u01c8\u00e5\2\u0635"+
		"\u00cf\3\2\2\2\u0636\u0637\7$\2\2\u0637\u0638\7\u00fb\2\2\u0638\u0639"+
		"\5\u00d2j\2\u0639\u063a\7\u00fc\2\2\u063a\u00d1\3\2\2\2\u063b\u063c\5"+
		"\u0316\u018c\2\u063c\u00d3\3\2\2\2\u063d\u063e\7=\2\2\u063e\u063f\5\u01c8"+
		"\u00e5\2\u063f\u00d5\3\2\2\2\u0640\u0641\7V\2\2\u0641\u0642\5\u01c8\u00e5"+
		"\2\u0642\u00d7\3\2\2\2\u0643\u0649\5\u00dan\2\u0644\u0649\5\u00dco\2\u0645"+
		"\u0649\5\u00dep\2\u0646\u0649\5\u00e4s\2\u0647\u0649\5\u00eex\2\u0648"+
		"\u0643\3\2\2\2\u0648\u0644\3\2\2\2\u0648\u0645\3\2\2\2\u0648\u0646\3\2"+
		"\2\2\u0648\u0647\3\2\2\2\u0649\u00d9\3\2\2\2\u064a\u064b\7\4\2\2\u064b"+
		"\u064c\7\u008e\2\2\u064c\u064d\5\u02b6\u015c\2\u064d\u064e\7=\2\2\u064e"+
		"\u064f\7y\2\2\u064f\u0650\7\3\2\2\u0650\u0651\5\u0388\u01c5\2\u0651\u00db"+
		"\3\2\2\2\u0652\u0653\7\4\2\2\u0653\u0654\7\u008e\2\2\u0654\u0657\5\u02b6"+
		"\u015c\2\u0655\u0656\7=\2\2\u0656\u0658\5\u01c8\u00e5\2\u0657\u0655\3"+
		"\2\2\2\u0657\u0658\3\2\2\2\u0658\u00dd\3\2\2\2\u0659\u065a\7\24\2\2\u065a"+
		"\u065b\7`\2\2\u065b\u065c\5\u02b6\u015c\2\u065c\u065d\5\u00e0q\2\u065d"+
		"\u00df\3\2\2\2\u065e\u065f\7\u00fb\2\2\u065f\u0660\5\u00e2r\2\u0660\u0661"+
		"\7\u00fc\2\2\u0661\u0663\3\2\2\2\u0662\u065e\3\2\2\2\u0662\u0663\3\2\2"+
		"\2\u0663\u0664\3\2\2\2\u0664\u0668\5\u019e\u00d0\2\u0665\u0666\7\u0111"+
		"\2\2\u0666\u0668\7^\2\2\u0667\u0662\3\2\2\2\u0667\u0665\3\2\2\2\u0668"+
		"\u00e1\3\2\2\2\u0669\u066a\5\u0316\u018c\2\u066a\u00e3\3\2\2\2\u066b\u066c"+
		"\7c\2\2\u066c\u066d\5\u02b6\u015c\2\u066d\u066e\7F\2\2\u066e\u066f\5\u00e6"+
		"t\2\u066f\u0670\7=\2\2\u0670\u0671\7y\2\2\u0671\u0672\7\3\2\2\u0672\u0673"+
		"\5\u0388\u01c5\2\u0673\u00e5\3\2\2\2\u0674\u0679\5\u00e8u\2\u0675\u0676"+
		"\7\u00fe\2\2\u0676\u0678\5\u00e8u\2\u0677\u0675\3\2\2\2\u0678\u067b\3"+
		"\2\2\2\u0679\u0677\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u00e7\3\2\2\2\u067b"+
		"\u0679\3\2\2\2\u067c\u067d\5\u00eav\2\u067d\u067e\7\u0105\2\2\u067e\u067f"+
		"\5\u00ecw\2\u067f\u00e9\3\2\2\2\u0680\u0681\5\u0314\u018b\2\u0681\u00eb"+
		"\3\2\2\2\u0682\u0686\5\u01f2\u00fa\2\u0683\u0686\5\u0370\u01b9\2\u0684"+
		"\u0686\7\u0111\2\2\u0685\u0682\3\2\2\2\u0685\u0683\3\2\2\2\u0685\u0684"+
		"\3\2\2\2\u0686\u00ed\3\2\2\2\u0687\u0688\7c\2\2\u0688\u0689\5\u02b6\u015c"+
		"\2\u0689\u068a\7F\2\2\u068a\u068d\5\u00e6t\2\u068b\u068c\7=\2\2\u068c"+
		"\u068e\5\u01c8\u00e5\2\u068d\u068b\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u00ef"+
		"\3\2\2\2\u068f\u0693\5\u0100\u0081\2\u0690\u0693\5\u0104\u0083\2\u0691"+
		"\u0693\5\u0106\u0084\2\u0692\u068f\3\2\2\2\u0692\u0690\3\2\2\2\u0692\u0691"+
		"\3\2\2\2\u0693\u00f1\3\2\2\2\u0694\u0695\7F\2\2\u0695\u0696\7h\2\2\u0696"+
		"\u069b\5\u00f4{\2\u0697\u0698\7\u00fe\2\2\u0698\u069a\5\u00f4{\2\u0699"+
		"\u0697\3\2\2\2\u069a\u069d\3\2\2\2\u069b\u0699\3\2\2\2\u069b\u069c\3\2"+
		"\2\2\u069c\u00f3\3\2\2\2\u069d\u069b\3\2\2\2\u069e\u06a2\5\u00f6|\2\u069f"+
		"\u06a2\5\u00fa~\2\u06a0\u06a2\5\u00fc\177\2\u06a1\u069e\3\2\2\2\u06a1"+
		"\u069f\3\2\2\2\u06a1\u06a0\3\2\2\2\u06a2\u00f5\3\2\2\2\u06a3\u06a4\7/"+
		"\2\2\u06a4\u06a5\7\u00e9\2\2\u06a5\u06a6\5\u00f8}\2\u06a6\u00f7\3\2\2"+
		"\2\u06a7\u06a8\7\u0096\2\2\u06a8\u06ad\t\t\2\2\u06a9\u06aa\7|\2\2\u06aa"+
		"\u06ad\7\u0096\2\2\u06ab\u06ad\7;\2\2\u06ac\u06a7\3\2\2\2\u06ac\u06a9"+
		"\3\2\2\2\u06ac\u06ab\3\2\2\2\u06ad\u00f9\3\2\2\2\u06ae\u06af\7\u0096\2"+
		"\2\u06af\u06b0\t\n\2\2\u06b0\u00fb\3\2\2\2\u06b1\u06b2\7K\2\2\u06b2\u06b3"+
		"\7[\2\2\u06b3\u06b4\5\u00fe\u0080\2\u06b4\u00fd\3\2\2\2\u06b5\u06b6\5"+
		"\u00a2R\2\u06b6\u00ff\3\2\2\2\u06b7\u06b8\7F\2\2\u06b8\u06b9\7@\2\2\u06b9"+
		"\u06ba\5\u0102\u0082\2\u06ba\u06bb\t\13\2\2\u06bb\u0101\3\2\2\2\u06bc"+
		"\u06c6\7\u0114\2\2\u06bd\u06c2\5\u02ba\u015e\2\u06be\u06bf\7\u00fe\2\2"+
		"\u06bf\u06c1\5\u02ba\u015e\2\u06c0\u06be\3\2\2\2\u06c1\u06c4\3\2\2\2\u06c2"+
		"\u06c0\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c6\3\2\2\2\u06c4\u06c2\3\2"+
		"\2\2\u06c5\u06bc\3\2\2\2\u06c5\u06bd\3\2\2\2\u06c6\u0103\3\2\2\2\u06c7"+
		"\u06c9\7\u00ca\2\2\u06c8\u06ca\7?\2\2\u06c9\u06c8\3\2\2\2\u06c9\u06ca"+
		"\3\2\2\2\u06ca\u0105\3\2\2\2\u06cb\u06cd\7\u00b9\2\2\u06cc\u06ce\7?\2"+
		"\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u0107\3\2\2\2\u06cf\u06d3"+
		"\5\u010a\u0086\2\u06d0\u06d3\5\u0114\u008b\2\u06d1\u06d3\5\u0118\u008d"+
		"\2\u06d2\u06cf\3\2\2\2\u06d2\u06d0\3\2\2\2\u06d2\u06d1\3\2\2\2\u06d3\u0109"+
		"\3\2\2\2\u06d4\u06d5\7\u00e6\2\2\u06d5\u06d6\7\u0093\2\2\u06d6\u06d7\5"+
		"\u010c\u0087\2\u06d7\u010b\3\2\2\2\u06d8\u06db\5\u010e\u0088\2\u06d9\u06da"+
		"\7B\2\2\u06da\u06dc\5\u0110\u0089\2\u06db\u06d9\3\2\2\2\u06db\u06dc\3"+
		"\2\2\2\u06dc\u06df\3\2\2\2\u06dd\u06de\7\u00dd\2\2\u06de\u06e0\5\u0112"+
		"\u008a\2\u06df\u06dd\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e3\3\2\2\2\u06e1"+
		"\u06e3\7\u0111\2\2\u06e2\u06d8\3\2\2\2\u06e2\u06e1\3\2\2\2\u06e3\u010d"+
		"\3\2\2\2\u06e4\u06e5\5\u00a2R\2\u06e5\u010f\3\2\2\2\u06e6\u06e7\5\u00a2"+
		"R\2\u06e7\u0111\3\2\2\2\u06e8\u06e9\5\u00a2R\2\u06e9\u0113\3\2\2\2\u06ea"+
		"\u06eb\7F\2\2\u06eb\u06ec\7\u00b8\2\2\u06ec\u06ed\5\u0116\u008c\2\u06ed"+
		"\u0115\3\2\2\2\u06ee\u06f1\7\u0111\2\2\u06ef\u06f1\5\u0110\u0089\2\u06f0"+
		"\u06ee\3\2\2\2\u06f0\u06ef\3\2\2\2\u06f1\u0117\3\2\2\2\u06f2\u06f3\7\u00b2"+
		"\2\2\u06f3\u06f4\5\u011a\u008e\2\u06f4\u0119\3\2\2\2\u06f5\u06f9\5\u0116"+
		"\u008c\2\u06f6\u06f9\7\u0114\2\2\u06f7\u06f9\7y\2\2\u06f8\u06f5\3\2\2"+
		"\2\u06f8\u06f6\3\2\2\2\u06f8\u06f7\3\2\2\2\u06f9\u011b\3\2\2\2\u06fa\u0700"+
		"\5\u011e\u0090\2\u06fb\u0700\5\u0122\u0092\2\u06fc\u0700\5\u0124\u0093"+
		"\2\u06fd\u0700\5\u0126\u0094\2\u06fe\u0700\5\u0128\u0095\2\u06ff\u06fa"+
		"\3\2\2\2\u06ff\u06fb\3\2\2\2\u06ff\u06fc\3\2\2\2\u06ff\u06fd\3\2\2\2\u06ff"+
		"\u06fe\3\2\2\2\u0700\u011d\3\2\2\2\u0701\u0702\7F\2\2\u0702\u0703\7T\2"+
		"\2\u0703\u0704\5\u0120\u0091\2\u0704\u011f\3\2\2\2\u0705\u0708\5\u02f6"+
		"\u017c\2\u0706\u0708\5\u033e\u01a0\2\u0707\u0705\3\2\2\2\u0707\u0706\3"+
		"\2\2\2\u0708\u0121\3\2\2\2\u0709\u070a\7F\2\2\u070a\u070b\7\'\2\2\u070b"+
		"\u070c\5\u0120\u0091\2\u070c\u0123\3\2\2\2\u070d\u070e\7F\2\2\u070e\u070f"+
		"\7\u00af\2\2\u070f\u0710\5\u0120\u0091\2\u0710\u0125\3\2\2\2\u0711\u0712"+
		"\7F\2\2\u0712\u0713\7]\2\2\u0713\u0714\7:\2\2\u0714\u0715\5\u0120\u0091"+
		"\2\u0715\u0127\3\2\2\2\u0716\u0717\7F\2\2\u0717\u0718\7\u0097\2\2\u0718"+
		"\u0719\7\u00df\2\2\u0719\u071a\5\u012a\u0096\2\u071a\u0129\3\2\2\2\u071b"+
		"\u071e\5\u020c\u0107\2\u071c\u071e\7\u00dc\2\2\u071d\u071b\3\2\2\2\u071d"+
		"\u071c\3\2\2\2\u071e\u012b\3\2\2\2\u071f\u0727\5\u012e\u0098\2\u0720\u0727"+
		"\5\u0156\u00ac\2\u0721\u0727\5\u015e\u00b0\2\u0722\u0727\5\u0160\u00b1"+
		"\2\u0723\u0727\5\u0168\u00b5\2\u0724\u0727\5\u0174\u00bb\2\u0725\u0727"+
		"\5\u0176\u00bc\2\u0726\u071f\3\2\2\2\u0726\u0720\3\2\2\2\u0726\u0721\3"+
		"\2\2\2\u0726\u0722\3\2\2\2\u0726\u0723\3\2\2\2\u0726\u0724\3\2\2\2\u0726"+
		"\u0725\3\2\2\2\u0727\u012d\3\2\2\2\u0728\u072d\5\u0130\u0099\2\u0729\u072d"+
		"\5\u0138\u009d\2\u072a\u072d\5\u013a\u009e\2\u072b\u072d\5\u014a\u00a6"+
		"\2\u072c\u0728\3\2\2\2\u072c\u0729\3\2\2\2\u072c\u072a\3\2\2\2\u072c\u072b"+
		"\3\2\2\2\u072d\u012f\3\2\2\2\u072e\u072f\7\33\2\2\u072f\u0730\7\u00b4"+
		"\2\2\u0730\u0734\5\u0132\u009a\2\u0731\u0732\7\64\2\2\u0732\u0733\7\u0119"+
		"\2\2\u0733\u0735\5\u0136\u009c\2\u0734\u0731\3\2\2\2\u0734\u0735\3\2\2"+
		"\2\u0735\u0131\3\2\2\2\u0736\u0737\5\u0134\u009b\2\u0737\u0738\5\u00a2"+
		"R\2\u0738\u0133\3\2\2\2\u0739\u073a\t\f\2\2\u073a\u0135\3\2\2\2\u073b"+
		"\u073c\5\u00a2R\2\u073c\u0137\3\2\2\2\u073d\u073e\7\\\2\2\u073e\u073f"+
		"\7\u00b4\2\2\u073f\u0740\5\u0132\u009a\2\u0740\u0139\3\2\2\2\u0741\u0742"+
		"\7F\2\2\u0742\u0743\7\u00b4\2\2\u0743\u0744\5\u0132\u009a\2\u0744\u0745"+
		"\5\u013c\u009f\2\u0745\u013b\3\2\2\2\u0746\u0752\5\u013e\u00a0\2\u0747"+
		"\u0748\7x\2\2\u0748\u0749\5\u0142\u00a2\2\u0749\u074e\5\u0144\u00a3\2"+
		"\u074a\u074b\7\u00fe\2\2\u074b\u074d\5\u0144\u00a3\2\u074c\u074a\3\2\2"+
		"\2\u074d\u0750\3\2\2\2\u074e\u074c\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0752"+
		"\3\2\2\2\u0750\u074e\3\2\2\2\u0751\u0746\3\2\2\2\u0751\u0747\3\2\2\2\u0752"+
		"\u013d\3\2\2\2\u0753\u0754\7\u011a\2\2\u0754\u0755\7\u0105\2\2\u0755\u0756"+
		"\5\u0140\u00a1\2\u0756\u013f\3\2\2\2\u0757\u0758\5\u00a2R\2\u0758\u0141"+
		"\3\2\2\2\u0759\u075a\5\u00a2R\2\u075a\u0143\3\2\2\2\u075b\u075c\5\u0146"+
		"\u00a4\2\u075c\u075d\7\u0105\2\2\u075d\u075e\5\u0148\u00a5\2\u075e\u0145"+
		"\3\2\2\2\u075f\u0785\7\u00d2\2\2\u0760\u0785\7\u00e2\2\2\u0761\u0762\7"+
		"\66\2\2\u0762\u0785\7\u00e2\2\2\u0763\u0764\7\n\2\2\u0764\u0785\7\u00e2"+
		"\2\2\u0765\u0766\7\n\2\2\u0766\u0767\7\66\2\2\u0767\u0785\7\u00e2\2\2"+
		"\u0768\u0785\7N\2\2\u0769\u0785\7\u008a\2\2\u076a\u076b\7\u0086\2\2\u076b"+
		"\u076c\7\u00ac\2\2\u076c\u0785\7p\2\2\u076d\u076e\7\u0086\2\2\u076e\u076f"+
		"\7\u00ac\2\2\u076f\u0785\7N\2\2\u0770\u0785\7d\2\2\u0771\u0785\7\u00e0"+
		"\2\2\u0772\u0785\7a\2\2\u0773\u0785\7\u00e5\2\2\u0774\u0785\7_\2\2\u0775"+
		"\u0776\7\u00b5\2\2\u0776\u0785\7T\2\2\u0777\u0778\7\u00b5\2\2\u0778\u0785"+
		"\7\'\2\2\u0779\u077a\7\u00b5\2\2\u077a\u0785\7\u00e5\2\2\u077b\u077c\7"+
		"\u0080\2\2\u077c\u077d\7F\2\2\u077d\u0785\7T\2\2\u077e\u077f\7\u0080\2"+
		"\2\u077f\u0780\7F\2\2\u0780\u0785\7\'\2\2\u0781\u0782\7\u0080\2\2\u0782"+
		"\u0783\7F\2\2\u0783\u0785\7\u00e5\2\2\u0784\u075f\3\2\2\2\u0784\u0760"+
		"\3\2\2\2\u0784\u0761\3\2\2\2\u0784\u0763\3\2\2\2\u0784\u0765\3\2\2\2\u0784"+
		"\u0768\3\2\2\2\u0784\u0769\3\2\2\2\u0784\u076a\3\2\2\2\u0784\u076d\3\2"+
		"\2\2\u0784\u0770\3\2\2\2\u0784\u0771\3\2\2\2\u0784\u0772\3\2\2\2\u0784"+
		"\u0773\3\2\2\2\u0784\u0774\3\2\2\2\u0784\u0775\3\2\2\2\u0784\u0777\3\2"+
		"\2\2\u0784\u0779\3\2\2\2\u0784\u077b\3\2\2\2\u0784\u077e\3\2\2\2\u0784"+
		"\u0781\3\2\2\2\u0785\u0147\3\2\2\2\u0786\u0787\5\u00a2R\2\u0787\u0149"+
		"\3\2\2\2\u0788\u0789\7M\2\2\u0789\u078a\7\u00b4\2\2\u078a\u078b\5\u0132"+
		"\u009a\2\u078b\u078c\5\u014c\u00a7\2\u078c\u014b\3\2\2\2\u078d\u0799\5"+
		"\u014e\u00a8\2\u078e\u078f\7x\2\2\u078f\u0790\5\u0142\u00a2\2\u0790\u0795"+
		"\5\u0152\u00aa\2\u0791\u0792\7\u00fe\2\2\u0792\u0794\5\u0152\u00aa\2\u0793"+
		"\u0791\3\2\2\2\u0794\u0797\3\2\2\2\u0795\u0793\3\2\2\2\u0795\u0796\3\2"+
		"\2\2\u0796\u0799\3\2\2\2\u0797\u0795\3\2\2\2\u0798\u078d\3\2\2\2\u0798"+
		"\u078e\3\2\2\2\u0799\u014d\3\2\2\2\u079a\u079b\5\u0150\u00a9\2\u079b\u079c"+
		"\7\u0105\2\2\u079c\u079d\7\u011a\2\2\u079d\u014f\3\2\2\2\u079e\u079f\5"+
		"\u035e\u01b0\2\u079f\u0151\3\2\2\2\u07a0\u07a1\5\u0154\u00ab\2\u07a1\u07a2"+
		"\7\u0105\2\2\u07a2\u07a3\5\u0146\u00a4\2\u07a3\u0153\3\2\2\2\u07a4\u07a5"+
		"\5\u035e\u01b0\2\u07a5\u0155\3\2\2\2\u07a6\u07a7\7\65\2\2\u07a7\u07a8"+
		"\5\u0158\u00ad\2\u07a8\u07a9\7\u008e\2\2\u07a9\u07aa\5\u015c\u00af\2\u07aa"+
		"\u0157\3\2\2\2\u07ab\u07ae\5\u038c\u01c7\2\u07ac\u07ae\5\u015a\u00ae\2"+
		"\u07ad\u07ab\3\2\2\2\u07ad\u07ac\3\2\2\2\u07ae\u0159\3\2\2\2\u07af\u07b1"+
		"\5\u0134\u009b\2\u07b0\u07af\3\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b2\3"+
		"\2\2\2\u07b2\u07b3\5\u00a2R\2\u07b3\u015b\3\2\2\2\u07b4\u07b5\5\u00a2"+
		"R\2\u07b5\u015d\3\2\2\2\u07b6\u07b7\7\\\2\2\u07b7\u07b8\7\65\2\2\u07b8"+
		"\u07b9\5\u0158\u00ad\2\u07b9\u015f\3\2\2\2\u07ba\u07bd\5\u0162\u00b2\2"+
		"\u07bb\u07bd\5\u0166\u00b4\2\u07bc\u07ba\3\2\2\2\u07bc\u07bb\3\2\2\2\u07bd"+
		"\u0161\3\2\2\2\u07be\u07bf\7\63\2\2\u07bf\u07c0\7\u00a3\2\2\u07c0\u07c1"+
		"\5\u0158\u00ad\2\u07c1\u07c2\5\u0164\u00b3\2\u07c2\u0163\3\2\2\2\u07c3"+
		"\u07c4\t\r\2\2\u07c4\u07c5\7)\2\2\u07c5\u07c6\7\u00b4\2\2\u07c6\u07c7"+
		"\5\u0132\u009a\2\u07c7\u0165\3\2\2\2\u07c8\u07c9\7\63\2\2\u07c9\u07ca"+
		"\7g\2\2\u07ca\u07cb\5\u0158\u00ad\2\u07cb\u07cc\5\u0164\u00b3\2\u07cc"+
		"\u0167\3\2\2\2\u07cd\u07ce\7E\2\2\u07ce\u07d0\5\u0158\u00ad\2\u07cf\u07d1"+
		"\5\u016a\u00b6\2\u07d0\u07cf\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d3\3"+
		"\2\2\2\u07d2\u07d4\5\u016c\u00b7\2\u07d3\u07d2\3\2\2\2\u07d3\u07d4\3\2"+
		"\2\2\u07d4\u0169\3\2\2\2\u07d5\u07d6\5\u016e\u00b8\2\u07d6\u016b\3\2\2"+
		"\2\u07d7\u07d8\5\u016e\u00b8\2\u07d8\u016d\3\2\2\2\u07d9\u07dc\5\u0170"+
		"\u00b9\2\u07da\u07dc\5\u0164\u00b3\2\u07db\u07d9\3\2\2\2\u07db\u07da\3"+
		"\2\2\2\u07dc\u016f\3\2\2\2\u07dd\u07de\t\r\2\2\u07de\u07e3\5\u0172\u00ba"+
		"\2\u07df\u07e0\7\u00fe\2\2\u07e0\u07e2\5\u0172\u00ba\2\u07e1\u07df\3\2"+
		"\2\2\u07e2\u07e5\3\2\2\2\u07e3\u07e1\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4"+
		"\u0171\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e6\u07e7\5\u00a6T\2\u07e7\u0173"+
		"\3\2\2\2\u07e8\u07e9\7E\2\2\u07e9\u07ea\7#\2\2\u07ea\u07eb\5\u015c\u00af"+
		"\2\u07eb\u0175\3\2\2\2\u07ec\u07f3\5\u0178\u00bd\2\u07ed\u07f3\5\u017c"+
		"\u00bf\2\u07ee\u07f3\5\u0180\u00c1\2\u07ef\u07f3\5\u0182\u00c2\2\u07f0"+
		"\u07f3\5\u0184\u00c3\2\u07f1\u07f3\5\u0186\u00c4\2\u07f2\u07ec\3\2\2\2"+
		"\u07f2\u07ed\3\2\2\2\u07f2\u07ee\3\2\2\2\u07f2\u07ef\3\2\2\2\u07f2\u07f0"+
		"\3\2\2\2\u07f2\u07f1\3\2\2\2\u07f3\u0177\3\2\2\2\u07f4\u07f5\7\33\2\2"+
		"\u07f5\u07f7\5\u017a\u00be\2\u07f6\u07f8\7\u00cb\2\2\u07f7\u07f6\3\2\2"+
		"\2\u07f7\u07f8\3\2\2\2\u07f8\u07fa\3\2\2\2\u07f9\u07fb\7.\2\2\u07fa\u07f9"+
		"\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fd\7\u00f0\2"+
		"\2\u07fd\u07fe\7\"\2\2\u07fe\u07ff\5\u015a\u00ae\2\u07ff\u0179\3\2\2\2"+
		"\u0800\u0802\5\u0134\u009b\2\u0801\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802"+
		"\u0803\3\2\2\2\u0803\u0804\5\u00a2R\2\u0804\u017b\3\2\2\2\u0805\u0806"+
		"\7\f\2\2\u0806\u0808\5\u017e\u00c0\2\u0807\u0809\5\u016e\u00b8\2\u0808"+
		"\u0807\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u017d\3\2\2\2\u080a\u080d\5\u0388"+
		"\u01c5\2\u080b\u080d\5\u017a\u00be\2\u080c\u080a\3\2\2\2\u080c\u080b\3"+
		"\2\2\2\u080d\u017f\3\2\2\2\u080e\u080f\7\u00d9\2\2\u080f\u0810\5\u017e"+
		"\u00c0\2\u0810\u0181\3\2\2\2\u0811\u0816\7\u00ef\2\2\u0812\u0814\5\u00a0"+
		"Q\2\u0813\u0812\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0815\3\2\2\2\u0815"+
		"\u0817\7\u008e\2\2\u0816\u0813\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0818"+
		"\3\2\2\2\u0818\u0819\5\u017e\u00c0\2\u0819\u0183\3\2\2\2\u081a\u081b\7"+
		"\4\2\2\u081b\u081c\7\u008e\2\2\u081c\u081d\5\u02b6\u015c\2\u081d\u081e"+
		"\7=\2\2\u081e\u081f\7y\2\2\u081f\u0820\7\3\2\2\u0820\u0821\5\u017e\u00c0"+
		"\2\u0821\u0185\3\2\2\2\u0822\u0823\7c\2\2\u0823\u0824\5\u02b6\u015c\2"+
		"\u0824\u0825\7F\2\2\u0825\u082a\5\u00e8u\2\u0826\u0827\7\u00fe\2\2\u0827"+
		"\u0829\5\u00e8u\2\u0828\u0826\3\2\2\2\u0829\u082c\3\2\2\2\u082a\u0828"+
		"\3\2\2\2\u082a\u082b\3\2\2\2\u082b\u082d\3\2\2\2\u082c\u082a\3\2\2\2\u082d"+
		"\u082e\7=\2\2\u082e\u082f\7y\2\2\u082f\u0830\7\3\2\2\u0830\u0831\5\u017e"+
		"\u00c0\2\u0831\u0187\3\2\2\2\u0832\u0833\5\u018a\u00c6\2\u0833\u0189\3"+
		"\2\2\2\u0834\u0835\7M\2\2\u0835\u0836\7K\2\2\u0836\u0837\5\u018c\u00c7"+
		"\2\u0837\u018b\3\2\2\2\u0838\u083b\5\u018e\u00c8\2\u0839\u083b\5\u0194"+
		"\u00cb\2\u083a\u0838\3\2\2\2\u083a\u0839\3\2\2\2\u083b\u018d\3\2\2\2\u083c"+
		"\u0841\5\u0190\u00c9\2\u083d\u083e\7\u00fe\2\2\u083e\u0840\5\u0190\u00c9"+
		"\2\u083f\u083d\3\2\2\2\u0840\u0843\3\2\2\2\u0841\u083f\3\2\2\2\u0841\u0842"+
		"\3\2\2\2\u0842\u018f\3\2\2\2\u0843\u0841\3\2\2\2\u0844\u0845\5\u035e\u01b0"+
		"\2\u0845\u0846\7\u0105\2\2\u0846\u0847\5\u0192\u00ca\2\u0847\u0191\3\2"+
		"\2\2\u0848\u0851\7,\2\2\u0849\u0851\7\u00c0\2\2\u084a\u084b\7I\2\2\u084b"+
		"\u0851\7f\2\2\u084c\u084d\7\u00c4\2\2\u084d\u0851\7f\2\2\u084e\u084f\7"+
		"\u00c8\2\2\u084f\u0851\7\u011a\2\2\u0850\u0848\3\2\2\2\u0850\u0849\3\2"+
		"\2\2\u0850\u084a\3\2\2\2\u0850\u084c\3\2\2\2\u0850\u084e\3\2\2\2\u0851"+
		"\u0193\3\2\2\2\u0852\u0853\7\u00d4\2\2\u0853\u0854\5\u0196\u00cc\2\u0854"+
		"\u0859\5\u0198\u00cd\2\u0855\u0856\7\u00fe\2\2\u0856\u0858\5\u0198\u00cd"+
		"\2\u0857\u0855\3\2\2\2\u0858\u085b\3\2\2\2\u0859\u0857\3\2\2\2\u0859\u085a"+
		"\3\2\2\2\u085a\u0195\3\2\2\2\u085b\u0859\3\2\2\2\u085c\u085d\5\u00a2R"+
		"\2\u085d\u0197\3\2\2\2\u085e\u085f\5\u035e\u01b0\2\u085f\u0860\7\u0105"+
		"\2\2\u0860\u0861\5\u019a\u00ce\2\u0861\u0199\3\2\2\2\u0862\u0863\7\21"+
		"\2\2\u0863\u0876\7,\2\2\u0864\u0865\7\n\2\2\u0865\u0876\7\5\2\2\u0866"+
		"\u0867\t\16\2\2\u0867\u0876\7\u00c6\2\2\u0868\u0869\t\17\2\2\u0869\u0876"+
		"\7\u00e5\2\2\u086a\u086b\7@\2\2\u086b\u0876\t\20\2\2\u086c\u086d\t\21"+
		"\2\2\u086d\u0876\7\u00e5\2\2\u086e\u0873\7\u0095\2\2\u086f\u0874\7\23"+
		"\2\2\u0870\u0874\7\u00e2\2\2\u0871\u0872\7\66\2\2\u0872\u0874\7\u00e2"+
		"\2\2\u0873\u086f\3\2\2\2\u0873\u0870\3\2\2\2\u0873\u0871\3\2\2\2\u0874"+
		"\u0876\3\2\2\2\u0875\u0862\3\2\2\2\u0875\u0864\3\2\2\2\u0875\u0866\3\2"+
		"\2\2\u0875\u0868\3\2\2\2\u0875\u086a\3\2\2\2\u0875\u086c\3\2\2\2\u0875"+
		"\u086e\3\2\2\2\u0876\u019b\3\2\2\2\u0877\u0878\7\u00fb\2\2\u0878\u0879"+
		"\5\u019e\u00d0\2\u0879\u087a\7\u00fc\2\2\u087a\u019d\3\2\2\2\u087b\u087e"+
		"\5\u01a0\u00d1\2\u087c\u087e\5\u00c0a\2\u087d\u087b\3\2\2\2\u087d\u087c"+
		"\3\2\2\2\u087e\u019f\3\2\2\2\u087f\u0880\b\u00d1\1\2\u0880\u088e\5\u01ae"+
		"\u00d8\2\u0881\u0882\7\u00fb\2\2\u0882\u0883\5\u01a0\u00d1\2\u0883\u0884"+
		"\7\u00fc\2\2\u0884\u088e\3\2\2\2\u0885\u0886\5\u00c0a\2\u0886\u0887\5"+
		"\u01a2\u00d2\2\u0887\u0888\5\u01a6\u00d4\2\u0888\u088e\3\2\2\2\u0889\u088a"+
		"\5\u01a6\u00d4\2\u088a\u088b\5\u01a8\u00d5\2\u088b\u088c\5\u01a4\u00d3"+
		"\2\u088c\u088e\3\2\2\2\u088d\u087f\3\2\2\2\u088d\u0881\3\2\2\2\u088d\u0885"+
		"\3\2\2\2\u088d\u0889\3\2\2\2\u088e\u0895\3\2\2\2\u088f\u0890\f\5\2\2\u0890"+
		"\u0891\5\u01a2\u00d2\2\u0891\u0892\5\u01a6\u00d4\2\u0892\u0894\3\2\2\2"+
		"\u0893\u088f\3\2\2\2\u0894\u0897\3\2\2\2\u0895\u0893\3\2\2\2\u0895\u0896"+
		"\3\2\2\2\u0896\u01a1\3\2\2\2\u0897\u0895\3\2\2\2\u0898\u089a\t\22\2\2"+
		"\u0899\u089b\7\u0114\2\2\u089a\u0899\3\2\2\2\u089a\u089b\3\2\2\2\u089b"+
		"\u089d\3\2\2\2\u089c\u089e\5\u01aa\u00d6\2\u089d\u089c\3\2\2\2\u089d\u089e"+
		"\3\2\2\2\u089e\u01a3\3\2\2\2\u089f\u08a6\5\u01ae\u00d8\2\u08a0\u08a6\5"+
		"\u00c0a\2\u08a1\u08a2\7\u00fb\2\2\u08a2\u08a3\5\u01a0\u00d1\2\u08a3\u08a4"+
		"\7\u00fc\2\2\u08a4\u08a6\3\2\2\2\u08a5\u089f\3\2\2\2\u08a5\u08a0\3\2\2"+
		"\2\u08a5\u08a1\3\2\2\2\u08a6\u01a5\3\2\2\2\u08a7\u08a8\b\u00d4\1\2\u08a8"+
		"\u08ab\5\u01ae\u00d8\2\u08a9\u08ab\5\u00c0a\2\u08aa\u08a7\3\2\2\2\u08aa"+
		"\u08a9\3\2\2\2\u08ab\u08b2\3\2\2\2\u08ac\u08ad\f\3\2\2\u08ad\u08ae\5\u01a8"+
		"\u00d5\2\u08ae\u08af\5\u01a4\u00d3\2\u08af\u08b1\3\2\2\2\u08b0\u08ac\3"+
		"\2\2\2\u08b1\u08b4\3\2\2\2\u08b2\u08b0\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3"+
		"\u01a7\3\2\2\2\u08b4\u08b2\3\2\2\2\u08b5\u08b7\7\25\2\2\u08b6\u08b8\7"+
		"\u0114\2\2\u08b7\u08b6\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08ba\3\2\2\2"+
		"\u08b9\u08bb\5\u01aa\u00d6\2\u08ba\u08b9\3\2\2\2\u08ba\u08bb\3\2\2\2\u08bb"+
		"\u01a9\3\2\2\2\u08bc\u08c2\7\27\2\2\u08bd\u08be\7\u0094\2\2\u08be\u08bf"+
		"\7\u00fb\2\2\u08bf\u08c0\5\u01ac\u00d7\2\u08c0\u08c1\7\u00fc\2\2\u08c1"+
		"\u08c3\3\2\2\2\u08c2\u08bd\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3\u01ab\3\2"+
		"\2\2\u08c4\u08c5\5\u0316\u018c\2\u08c5\u01ad\3\2\2\2\u08c6\u08ca\5\u01b0"+
		"\u00d9\2\u08c7\u08ca\5\u01b2\u00da\2\u08c8\u08ca\5\u01b6\u00dc\2\u08c9"+
		"\u08c6\3\2\2\2\u08c9\u08c7\3\2\2\2\u08c9\u08c8\3\2\2\2\u08ca\u01af\3\2"+
		"\2\2\u08cb\u08cd\7\u00d0\2\2\u08cc\u08ce\5\u0378\u01bd\2\u08cd\u08cc\3"+
		"\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d0\5\u00aeX\2"+
		"\u08d0\u08d1\5\u00b8]\2\u08d1\u01b1\3\2\2\2\u08d2\u08d3\7Q\2\2\u08d3\u01b3"+
		"\3\2\2\2\u08d4\u08d5\5\u01ea\u00f6\2\u08d5\u08d6\7\u00fe\2\2\u08d6\u08d7"+
		"\5\u01ea\u00f6\2\u08d7\u01b5\3\2\2\2\u08d8\u08d9\7\13\2\2\u08d9\u08da"+
		"\5\u02b6\u015c\2\u08da\u01b7\3\2\2\2\u08db\u08dc\7\u00fb\2\2\u08dc\u08e1"+
		"\5\u01ba\u00de\2\u08dd\u08de\7\u00fe\2\2\u08de\u08e0\5\u01ba\u00de\2\u08df"+
		"\u08dd\3\2\2\2\u08e0\u08e3\3\2\2\2\u08e1\u08df\3\2\2\2\u08e1\u08e2\3\2"+
		"\2\2\u08e2\u08e4\3\2\2\2\u08e3\u08e1\3\2\2\2\u08e4\u08e5\7\u00fc\2\2\u08e5"+
		"\u01b9\3\2\2\2\u08e6\u08e7\5\u01bc\u00df\2\u08e7\u08e8\5\u01c4\u00e3\2"+
		"\u08e8\u01bb\3\2\2\2\u08e9\u08ec\5\u0314\u018b\2\u08ea\u08ed\5\u0318\u018d"+
		"\2\u08eb\u08ed\5\u0398\u01cd\2\u08ec\u08ea\3\2\2\2\u08ec\u08eb\3\2\2\2"+
		"\u08ed\u08ef\3\2\2\2\u08ee\u08f0\5\u02f2\u017a\2\u08ef\u08ee\3\2\2\2\u08ef"+
		"\u08f0\3\2\2\2\u08f0\u08f4\3\2\2\2\u08f1\u08f3\5\u01be\u00e0\2\u08f2\u08f1"+
		"\3\2\2\2\u08f3\u08f6\3\2\2\2\u08f4\u08f2\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5"+
		"\u08f8\3\2\2\2\u08f6\u08f4\3\2\2\2\u08f7\u08f9\5\u02da\u016e\2\u08f8\u08f7"+
		"\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9\u01bd\3\2\2\2\u08fa\u08fc\5\u02b8\u015d"+
		"\2\u08fb\u08fa\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u08ff"+
		"\5\u01c0\u00e1\2\u08fe\u0900\5\u02ce\u0168\2\u08ff\u08fe\3\2\2\2\u08ff"+
		"\u0900\3\2\2\2\u0900\u01bf\3\2\2\2\u0901\u0902\7P\2\2\u0902\u0907\7\u0110"+
		"\2\2\u0903\u0907\5\u02bc\u015f\2\u0904\u0907\5\u02be\u0160\2\u0905\u0907"+
		"\5\u01c2\u00e2\2\u0906\u0901\3\2\2\2\u0906\u0903\3\2\2\2\u0906\u0904\3"+
		"\2\2\2\u0906\u0905\3\2\2\2\u0907\u01c1\3\2\2\2\u0908\u0909\7\26\2\2\u0909"+
		"\u090a\7\u00fb\2\2\u090a\u090b\5\u01c8\u00e5\2\u090b\u090c\7\u00fc\2\2"+
		"\u090c\u01c3\3\2\2\2\u090d\u090f\5\u02b8\u015d\2\u090e\u090d\3\2\2\2\u090e"+
		"\u090f\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0912\5\u01c6\u00e4\2\u0911\u0913"+
		"\5\u02d0\u0169\2\u0912\u0911\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u01c5\3"+
		"\2\2\2\u0914\u0918\5\u02d2\u016a\2\u0915\u0918\5\u02d6\u016c\2\u0916\u0918"+
		"\5\u01c2\u00e2\2\u0917\u0914\3\2\2\2\u0917\u0915\3\2\2\2\u0917\u0916\3"+
		"\2\2\2\u0918\u01c7\3\2\2\2\u0919\u091a\b\u00e5\1\2\u091a\u091b\7P\2\2"+
		"\u091b\u0929\5\u01c8\u00e5\6\u091c\u091d\7\u00fb\2\2\u091d\u091e\5\u01c8"+
		"\u00e5\2\u091e\u091f\7\u00fc\2\2\u091f\u0929\3\2\2\2\u0920\u0926\5\u01ca"+
		"\u00e6\2\u0921\u0923\7L\2\2\u0922\u0924\7P\2\2\u0923\u0922\3\2\2\2\u0923"+
		"\u0924\3\2\2\2\u0924\u0925\3\2\2\2\u0925\u0927\5\u036e\u01b8\2\u0926\u0921"+
		"\3\2\2\2\u0926\u0927\3\2\2\2\u0927\u0929\3\2\2\2\u0928\u0919\3\2\2\2\u0928"+
		"\u091c\3\2\2\2\u0928\u0920\3\2\2\2\u0929\u0932\3\2\2\2\u092a\u092b\f\5"+
		"\2\2\u092b\u092c\7\t\2\2\u092c\u0931\5\u01c8\u00e5\6\u092d\u092e\f\4\2"+
		"\2\u092e\u092f\7Y\2\2\u092f\u0931\5\u01c8\u00e5\5\u0930\u092a\3\2\2\2"+
		"\u0930\u092d\3\2\2\2\u0931\u0934\3\2\2\2\u0932\u0930\3\2\2\2\u0932\u0933"+
		"\3\2\2\2\u0933\u01c9\3\2\2\2\u0934\u0932\3\2\2\2\u0935\u093f\5\u01cc\u00e7"+
		"\2\u0936\u093f\5\u01ce\u00e8\2\u0937\u093f\5\u01d0\u00e9\2\u0938\u093f"+
		"\5\u01d6\u00ec\2\u0939\u093f\5\u01de\u00f0\2\u093a\u093f\5\u01e0\u00f1"+
		"\2\u093b\u093f\5\u01e2\u00f2\2\u093c\u093f\5\u01e6\u00f4\2\u093d\u093f"+
		"\5\u01e8\u00f5\2\u093e\u0935\3\2\2\2\u093e\u0936\3\2\2\2\u093e\u0937\3"+
		"\2\2\2\u093e\u0938\3\2\2\2\u093e\u0939\3\2\2\2\u093e\u093a\3\2\2\2\u093e"+
		"\u093b\3\2\2\2\u093e\u093c\3\2\2\2\u093e\u093d\3\2\2\2\u093f\u01cb\3\2"+
		"\2\2\u0940\u0941\5\u01ea\u00f6\2\u0941\u0942\5\u0374\u01bb\2\u0942\u0943"+
		"\5\u01ea\u00f6\2\u0943\u01cd\3\2\2\2\u0944\u0946\5\u01ea\u00f6\2\u0945"+
		"\u0947\7P\2\2\u0946\u0945\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0948\3\2"+
		"\2\2\u0948\u0949\7u\2\2\u0949\u094a\5\u01ea\u00f6\2\u094a\u094b\7\t\2"+
		"\2\u094b\u094c\5\u01ea\u00f6\2\u094c\u01cf\3\2\2\2\u094d\u094f\5\u01ea"+
		"\u00f6\2\u094e\u0950\7P\2\2\u094f\u094e\3\2\2\2\u094f\u0950\3\2\2\2\u0950"+
		"\u0951\3\2\2\2\u0951\u0952\7\7\2\2\u0952\u0953\5\u01d2\u00ea\2\u0953\u01d1"+
		"\3\2\2\2\u0954\u095a\5\u01e4\u00f3\2\u0955\u0956\7\u00fb\2\2\u0956\u0957"+
		"\5\u01d4\u00eb\2\u0957\u0958\7\u00fc\2\2\u0958\u095a\3\2\2\2\u0959\u0954"+
		"\3\2\2\2\u0959\u0955\3\2\2\2\u095a\u01d3\3\2\2\2\u095b\u0960\5\u01f2\u00fa"+
		"\2\u095c\u095d\7\u00fe\2\2\u095d\u095f\5\u01f2\u00fa\2\u095e\u095c\3\2"+
		"\2\2\u095f\u0962\3\2\2\2\u0960\u095e\3\2\2\2\u0960\u0961\3\2\2\2\u0961"+
		"\u01d5\3\2\2\2\u0962\u0960\3\2\2\2\u0963\u0965\5\u01d8\u00ed\2\u0964\u0966"+
		"\7P\2\2\u0965\u0964\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0967\3\2\2\2\u0967"+
		"\u0968\7\u00ce\2\2\u0968\u096b\5\u01da\u00ee\2\u0969\u096a\7O\2\2\u096a"+
		"\u096c\5\u01dc\u00ef\2\u096b\u0969\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u01d7"+
		"\3\2\2\2\u096d\u096e\5\u0246\u0124\2\u096e\u01d9\3\2\2\2\u096f\u0970\5"+
		"\u0246\u0124\2\u0970\u01db\3\2\2\2\u0971\u0972\5\u0246\u0124\2\u0972\u01dd"+
		"\3\2\2\2\u0973\u0975\7L\2\2\u0974\u0976\7P\2\2\u0975\u0974\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u0975\u0976\3\2\2\2\u0976\u0977\3\2\2\2\u0977\u0978\7\u0110\2\2"+
		"\u0978\u01df\3\2\2\2\u0979\u097a\5\u01ea\u00f6\2\u097a\u097b\5\u0374\u01bb"+
		"\2\u097b\u097c\5\u037a\u01be\2\u097c\u097d\5\u01e4\u00f3\2\u097d\u01e1"+
		"\3\2\2\2\u097e\u097f\7\u00d3\2\2\u097f\u0980\5\u01e4\u00f3\2\u0980\u01e3"+
		"\3\2\2\2\u0981\u0982\5\u019c\u00cf\2\u0982\u01e5\3\2\2\2\u0983\u0984\5"+
		"\u01ea\u00f6\2\u0984\u0986\7U\2\2\u0985\u0987\7m\2\2\u0986\u0985\3\2\2"+
		"\2\u0986\u0987\3\2\2\2\u0987\u0989\3\2\2\2\u0988\u098a\t\23\2\2\u0989"+
		"\u0988\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098c\5\u01e4"+
		"\u00f3\2\u098c\u01e7\3\2\2\2\u098d\u098e\5\u01ea\u00f6\2\u098e\u098f\7"+
		"\16\2\2\u098f\u0990\5\u01ea\u00f6\2\u0990\u01e9\3\2\2\2\u0991\u0998\5"+
		"\u01ec\u00f7\2\u0992\u0993\7\u00fb\2\2\u0993\u0994\5\u01ee\u00f8\2\u0994"+
		"\u0995\7\u00fc\2\2\u0995\u0998\3\2\2\2\u0996\u0998\5\u01f0\u00f9\2\u0997"+
		"\u0991\3\2\2\2\u0997\u0992\3\2\2\2\u0997\u0996\3\2\2\2\u0998\u01eb\3\2"+
		"\2\2\u0999\u099a\5\u01f2\u00fa\2\u099a\u099b\5\u0370\u01b9\2\u099b\u099e"+
		"\3\2\2\2\u099c\u099e\5\u0372\u01ba\2\u099d\u0999\3\2\2\2\u099d\u099c\3"+
		"\2\2\2\u099e\u01ed\3\2\2\2\u099f\u09a4\5\u01ec\u00f7\2\u09a0\u09a1\7\u00fe"+
		"\2\2\u09a1\u09a3\5\u01ec\u00f7\2\u09a2\u09a0\3\2\2\2\u09a3\u09a6\3\2\2"+
		"\2\u09a4\u09a2\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u01ef\3\2\2\2\u09a6\u09a4"+
		"\3\2\2\2\u09a7\u09a8\5\u019c\u00cf\2\u09a8\u01f1\3\2\2\2\u09a9\u09ae\5"+
		"\u01f4\u00fb\2\u09aa\u09ae\5\u0208\u0105\2\u09ab\u09ae\5\u020a\u0106\2"+
		"\u09ac\u09ae\5\u020c\u0107\2\u09ad\u09a9\3\2\2\2\u09ad\u09aa\3\2\2\2\u09ad"+
		"\u09ab\3\2\2\2\u09ad\u09ac\3\2\2\2\u09ae\u01f3\3\2\2\2\u09af\u09b0\b\u00fb"+
		"\1\2\u09b0\u09b1\5\u01f6\u00fc\2\u09b1\u09b7\3\2\2\2\u09b2\u09b3\f\3\2"+
		"\2\u09b3\u09b4\t\24\2\2\u09b4\u09b6\5\u01f6\u00fc\2\u09b5\u09b2\3\2\2"+
		"\2\u09b6\u09b9\3\2\2\2\u09b7\u09b5\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u01f5"+
		"\3\2\2\2\u09b9\u09b7\3\2\2\2\u09ba\u09bb\b\u00fc\1\2\u09bb\u09bc\5\u01f8"+
		"\u00fd\2\u09bc\u09c2\3\2\2\2\u09bd\u09be\f\3\2\2\u09be\u09bf\t\25\2\2"+
		"\u09bf\u09c1\5\u01f8\u00fd\2\u09c0\u09bd\3\2\2\2\u09c1\u09c4\3\2\2\2\u09c2"+
		"\u09c0\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u01f7\3\2\2\2\u09c4\u09c2\3\2"+
		"\2\2\u09c5\u09c7\5\u03a6\u01d4\2\u09c6\u09c5\3\2\2\2\u09c6\u09c7\3\2\2"+
		"\2\u09c7\u09c8\3\2\2\2\u09c8\u09c9\5\u01fa\u00fe\2\u09c9\u01f9\3\2\2\2"+
		"\u09ca\u09cd\5\u01fc\u00ff\2\u09cb\u09cd\5\u0236\u011c\2\u09cc\u09ca\3"+
		"\2\2\2\u09cc\u09cb\3\2\2\2\u09cd\u01fb\3\2\2\2\u09ce\u09d5\5\u0360\u01b1"+
		"\2\u09cf\u09d5\5\u0396\u01cc\2\u09d0\u09d5\5\u01fe\u0100\2\u09d1\u09d5"+
		"\5\u0202\u0102\2\u09d2\u09d5\5\u0204\u0103\2\u09d3\u09d5\5\u0206\u0104"+
		"\2\u09d4\u09ce\3\2\2\2\u09d4\u09cf\3\2\2\2\u09d4\u09d0\3\2\2\2\u09d4\u09d1"+
		"\3\2\2\2\u09d4\u09d2\3\2\2\2\u09d4\u09d3\3\2\2\2\u09d5\u01fd\3\2\2\2\u09d6"+
		"\u09d7\7\u011a\2\2\u09d7\u09d8\7\u00fb\2\2\u09d8\u09d9\7\u00fd\2\2\u09d9"+
		"\u09dc\7\u00fc\2\2\u09da\u09dc\5\u0200\u0101\2\u09db\u09d6\3\2\2\2\u09db"+
		"\u09da\3\2\2\2\u09dc\u01ff\3\2\2\2\u09dd\u09de\5\u0376\u01bc\2\u09de\u09e0"+
		"\7\u00fb\2\2\u09df\u09e1\5\u0378\u01bd\2\u09e0\u09df\3\2\2\2\u09e0\u09e1"+
		"\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u09e3\5\u01f2\u00fa\2\u09e3\u09e4\7"+
		"\u00fc\2\2\u09e4\u0201\3\2\2\2\u09e5\u09e6\5\u019c\u00cf\2\u09e6\u0203"+
		"\3\2\2\2\u09e7\u09ea\5\u021e\u0110\2\u09e8\u09ea\5\u0220\u0111\2\u09e9"+
		"\u09e7\3\2\2\2\u09e9\u09e8\3\2\2\2\u09ea\u0205\3\2\2\2\u09eb\u09ec\7\u0090"+
		"\2\2\u09ec\u09ed\7\u00fb\2\2\u09ed\u09ee\5\u0234\u011b\2\u09ee\u09ef\7"+
		"B\2\2\u09ef\u09f0\5\u036a\u01b6\2\u09f0\u09f1\7\u00fc\2\2\u09f1\u0207"+
		"\3\2\2\2\u09f2\u09f5\5\u0246\u0124\2\u09f3\u09f5\5\u0266\u0134\2\u09f4"+
		"\u09f2\3\2\2\2\u09f4\u09f3\3\2\2\2\u09f5\u0209\3\2\2\2\u09f6\u09f7\b\u0106"+
		"\1\2\u09f7\u09fd\5\u020e\u0108\2\u09f8\u09f9\5\u020c\u0107\2\u09f9\u09fa"+
		"\7\u00f5\2\2\u09fa\u09fb\5\u020e\u0108\2\u09fb\u09fd\3\2\2\2\u09fc\u09f6"+
		"\3\2\2\2\u09fc\u09f8\3\2\2\2\u09fd\u0a03\3\2\2\2\u09fe\u09ff\f\3\2\2\u09ff"+
		"\u0a00\t\24\2\2\u0a00\u0a02\5\u0218\u010d\2\u0a01\u09fe\3\2\2\2\u0a02"+
		"\u0a05\3\2\2\2\u0a03\u0a01\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u020b\3\2"+
		"\2\2\u0a05\u0a03\3\2\2\2\u0a06\u0a07\b\u0107\1\2\u0a07\u0a10\5\u0218\u010d"+
		"\2\u0a08\u0a09\7\u00fb\2\2\u0a09\u0a0a\5\u020a\u0106\2\u0a0a\u0a0b\7\u00f6"+
		"\2\2\u0a0b\u0a0c\5\u020e\u0108\2\u0a0c\u0a0d\7\u00fc\2\2\u0a0d\u0a0e\5"+
		"\u0330\u0199\2\u0a0e\u0a10\3\2\2\2\u0a0f\u0a06\3\2\2\2\u0a0f\u0a08\3\2"+
		"\2\2\u0a10\u0a16\3\2\2\2\u0a11\u0a12\f\4\2\2\u0a12\u0a13\t\24\2\2\u0a13"+
		"\u0a15\5\u0218\u010d\2\u0a14\u0a11\3\2\2\2\u0a15\u0a18\3\2\2\2\u0a16\u0a14"+
		"\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u020d\3\2\2\2\u0a18\u0a16\3\2\2\2\u0a19"+
		"\u0a1a\5\u0210\u0109\2\u0a1a\u020f\3\2\2\2\u0a1b\u0a1d\5\u0212\u010a\2"+
		"\u0a1c\u0a1e\5\u0214\u010b\2\u0a1d\u0a1c\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e"+
		"\u0211\3\2\2\2\u0a1f\u0a22\5\u01fc\u00ff\2\u0a20\u0a22\5\u030c\u0187\2"+
		"\u0a21\u0a1f\3\2\2\2\u0a21\u0a20\3\2\2\2\u0a22\u0213\3\2\2\2\u0a23\u0a24"+
		"\7k\2\2\u0a24\u0a25\5\u0216\u010c\2\u0a25\u0215\3\2\2\2\u0a26\u0a2b\7"+
		"\u00dc\2\2\u0a27\u0a28\7\u0097\2\2\u0a28\u0a29\7\u00df\2\2\u0a29\u0a2b"+
		"\5\u020c\u0107\2\u0a2a\u0a26\3\2\2\2\u0a2a\u0a27\3\2\2\2\u0a2b\u0217\3"+
		"\2\2\2\u0a2c\u0a2d\b\u010d\1\2\u0a2d\u0a33\5\u021a\u010e\2\u0a2e\u0a2f"+
		"\5\u01f6\u00fc\2\u0a2f\u0a30\7\u00fd\2\2\u0a30\u0a31\5\u021a\u010e\2\u0a31"+
		"\u0a33\3\2\2\2\u0a32\u0a2c\3\2\2\2\u0a32\u0a2e\3\2\2\2\u0a33\u0a39\3\2"+
		"\2\2\u0a34\u0a35\f\4\2\2\u0a35\u0a36\t\25\2\2\u0a36\u0a38\5\u021a\u010e"+
		"\2\u0a37\u0a34\3\2\2\2\u0a38\u0a3b\3\2\2\2\u0a39\u0a37\3\2\2\2\u0a39\u0a3a"+
		"\3\2\2\2\u0a3a\u0219\3\2\2\2\u0a3b\u0a39\3\2\2\2\u0a3c\u0a3e\5\u03a6\u01d4"+
		"\2\u0a3d\u0a3c\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0a3f\3\2\2\2\u0a3f\u0a40"+
		"\5\u021c\u010f\2\u0a40\u021b\3\2\2\2\u0a41\u0a43\5\u01fc\u00ff\2\u0a42"+
		"\u0a44\5\u0330\u0199\2\u0a43\u0a42\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44\u021d"+
		"\3\2\2\2\u0a45\u0a46\7-\2\2\u0a46\u0a47\7\u00fb\2\2\u0a47\u0a48\5\u01f2"+
		"\u00fa\2\u0a48\u0a49\7\u00fe\2\2\u0a49\u0a4a\5\u01f2\u00fa\2\u0a4a\u0a4b"+
		"\7\u00fc\2\2\u0a4b\u0a59\3\2\2\2\u0a4c\u0a4d\7w\2\2\u0a4d\u0a4e\7\u00fb"+
		"\2\2\u0a4e\u0a53\5\u01f2\u00fa\2\u0a4f\u0a50\7\u00fe\2\2\u0a50\u0a52\5"+
		"\u01f2\u00fa\2\u0a51\u0a4f\3\2\2\2\u0a52\u0a55\3\2\2\2\u0a53\u0a51\3\2"+
		"\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a56\3\2\2\2\u0a55\u0a53\3\2\2\2\u0a56"+
		"\u0a57\7\u00fc\2\2\u0a57\u0a59\3\2\2\2\u0a58\u0a45\3\2\2\2\u0a58\u0a4c"+
		"\3\2\2\2\u0a59\u021f\3\2\2\2\u0a5a\u0a5d\5\u0222\u0112\2\u0a5b\u0a5d\5"+
		"\u0224\u0113\2\u0a5c\u0a5a\3\2\2\2\u0a5c\u0a5b\3\2\2\2\u0a5d\u0221\3\2"+
		"\2\2\u0a5e\u0a5f\7{\2\2\u0a5f\u0a61\5\u0226\u0114\2\u0a60\u0a62\5\u0228"+
		"\u0115\2\u0a61\u0a60\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a61\3\2\2\2\u0a63"+
		"\u0a64\3\2\2\2\u0a64\u0a66\3\2\2\2\u0a65\u0a67\5\u022a\u0116\2\u0a66\u0a65"+
		"\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u0a69\7r\2\2\u0a69"+
		"\u0223\3\2\2\2\u0a6a\u0a6c\7{\2\2\u0a6b\u0a6d\5\u0232\u011a\2\u0a6c\u0a6b"+
		"\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e\u0a6c\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f"+
		"\u0a71\3\2\2\2\u0a70\u0a72\5\u022a\u0116\2\u0a71\u0a70\3\2\2\2\u0a71\u0a72"+
		"\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73\u0a74\7r\2\2\u0a74\u0225\3\2\2\2\u0a75"+
		"\u0a76\5\u01f2\u00fa\2\u0a76\u0227\3\2\2\2\u0a77\u0a78\7\61\2\2\u0a78"+
		"\u0a79\5\u022c\u0117\2\u0a79\u0a7a\7\32\2\2\u0a7a\u0a7b\5\u022e\u0118"+
		"\2\u0a7b\u0229\3\2\2\2\u0a7c\u0a7d\7D\2\2\u0a7d\u0a7e\5\u022e\u0118\2"+
		"\u0a7e\u022b\3\2\2\2\u0a7f\u0a80\5\u01f2\u00fa\2\u0a80\u022d\3\2\2\2\u0a81"+
		"\u0a84\5\u0230\u0119\2\u0a82\u0a84\7\u0110\2\2\u0a83\u0a81\3\2\2\2\u0a83"+
		"\u0a82\3\2\2\2\u0a84\u022f\3\2\2\2\u0a85\u0a86\5\u01f2\u00fa\2\u0a86\u0231"+
		"\3\2\2\2\u0a87\u0a88\7\61\2\2\u0a88\u0a89\5\u01c8\u00e5\2\u0a89\u0a8a"+
		"\7\32\2\2\u0a8a\u0a8b\5\u022e\u0118\2\u0a8b\u0233\3\2\2\2\u0a8c\u0a8f"+
		"\5\u01f2\u00fa\2\u0a8d\u0a8f\7\u0110\2\2\u0a8e\u0a8c\3\2\2\2\u0a8e\u0a8d"+
		"\3\2\2\2\u0a8f\u0235\3\2\2\2\u0a90\u0a94\5\u0238\u011d\2\u0a91\u0a94\5"+
		"\u023a\u011e\2\u0a92\u0a94\5\u023e\u0120\2\u0a93\u0a90\3\2\2\2\u0a93\u0a91"+
		"\3\2\2\2\u0a93\u0a92\3\2\2\2\u0a94\u0237\3\2\2\2\u0a95\u0a96\7\u00a2\2"+
		"\2\u0a96\u0a97\7\u00fb\2\2\u0a97\u0a98\5\u0246\u0124\2\u0a98\u0a99\7\7"+
		"\2\2\u0a99\u0a9a\5\u0246\u0124\2\u0a9a\u0a9b\7\u00fc\2\2\u0a9b\u0239\3"+
		"\2\2\2\u0a9c\u0a9d\7\u009b\2\2\u0a9d\u0a9e\7\u00fb\2\2\u0a9e\u0a9f\5\u0364"+
		"\u01b3\2\u0a9f\u0aa0\7\u008e\2\2\u0aa0\u0aa1\5\u023c\u011f\2\u0aa1\u0aa2"+
		"\7\u00fc\2\2\u0aa2\u023b\3\2\2\2\u0aa3\u0aa6\5\u020a\u0106\2\u0aa4\u0aa6"+
		"\5\u020c\u0107\2\u0aa5\u0aa3\3\2\2\2\u0aa5\u0aa4\3\2\2\2\u0aa6\u023d\3"+
		"\2\2\2\u0aa7\u0aab\5\u0240\u0121\2\u0aa8\u0aab\5\u0242\u0122\2\u0aa9\u0aab"+
		"\5\u0244\u0123\2\u0aaa\u0aa7\3\2\2\2\u0aaa\u0aa8\3\2\2\2\u0aaa\u0aa9\3"+
		"\2\2\2\u0aab\u023f\3\2\2\2\u0aac\u0aad\t\26\2\2\u0aad\u0aae\7\u00fb\2"+
		"\2\u0aae\u0aaf\5\u0208\u0105\2\u0aaf\u0ab0\7\u00fc\2\2\u0ab0\u0241\3\2"+
		"\2\2\u0ab1\u0ab2\7\60\2\2\u0ab2\u0ab3\7\u00fb\2\2\u0ab3\u0ab4\5\u0208"+
		"\u0105\2\u0ab4\u0ab5\7\u00fc\2\2\u0ab5\u0243\3\2\2\2\u0ab6\u0ab7\7\34"+
		"\2\2\u0ab7\u0ab8\7\u00fb\2\2\u0ab8\u0ab9\5\u0208\u0105\2\u0ab9\u0aba\7"+
		"\u00fc\2\2\u0aba\u0245\3\2\2\2\u0abb\u0abc\b\u0124\1\2\u0abc\u0abd\5\u0248"+
		"\u0125\2\u0abd\u0ac3\3\2\2\2\u0abe\u0abf\f\4\2\2\u0abf\u0ac0\7\u010e\2"+
		"\2\u0ac0\u0ac2\5\u0248\u0125\2\u0ac1\u0abe\3\2\2\2\u0ac2\u0ac5\3\2\2\2"+
		"\u0ac3\u0ac1\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0247\3\2\2\2\u0ac5\u0ac3"+
		"\3\2\2\2\u0ac6\u0ac8\5\u024a\u0126\2\u0ac7\u0ac9\5\u02da\u016e\2\u0ac8"+
		"\u0ac7\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0249\3\2\2\2\u0aca\u0acd\5\u01fc"+
		"\u00ff\2\u0acb\u0acd\5\u024c\u0127\2\u0acc\u0aca\3\2\2\2\u0acc\u0acb\3"+
		"\2\2\2\u0acd\u024b\3\2\2\2\u0ace\u0ad1\5\u024e\u0128\2\u0acf\u0ad1\5\u0250"+
		"\u0129\2\u0ad0\u0ace\3\2\2\2\u0ad0\u0acf\3\2\2\2\u0ad1\u024d\3\2\2\2\u0ad2"+
		"\u0ad8\5\u0252\u012a\2\u0ad3\u0ad8\5\u0258\u012d\2\u0ad4\u0ad8\5\u039e"+
		"\u01d0\2\u0ad5\u0ad8\5\u025a\u012e\2\u0ad6\u0ad8\5\u025c\u012f\2\u0ad7"+
		"\u0ad2\3\2\2\2\u0ad7\u0ad3\3\2\2\2\u0ad7\u0ad4\3\2\2\2\u0ad7\u0ad5\3\2"+
		"\2\2\u0ad7\u0ad6\3\2\2\2\u0ad8\u024f\3\2\2\2\u0ad9\u0ada\5\u0264\u0133"+
		"\2\u0ada\u0251\3\2\2\2\u0adb\u0adc\7\u00ed\2\2\u0adc\u0add\7\u00fb\2\2"+
		"\u0add\u0ade\5\u0246\u0124\2\u0ade\u0adf\7\u008e\2\2\u0adf\u0ae2\5\u0254"+
		"\u012b\2\u0ae0\u0ae1\7\"\2\2\u0ae1\u0ae3\5\u0256\u012c\2\u0ae2\u0ae0\3"+
		"\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u0ae5\7\u00fc\2\2"+
		"\u0ae5\u0253\3\2\2\2\u0ae6\u0ae7\5\u01f4\u00fb\2\u0ae7\u0255\3\2\2\2\u0ae8"+
		"\u0ae9\5\u01f4\u00fb\2\u0ae9\u0257\3\2\2\2\u0aea\u0aeb\t\27\2\2\u0aeb"+
		"\u0aec\7\u00fb\2\2\u0aec\u0aed\5\u0246\u0124\2\u0aed\u0aee\7\u00fc\2\2"+
		"\u0aee\u0259\3\2\2\2\u0aef\u0af0\7\u00b0\2\2\u0af0\u0af1\7\u00fb\2\2\u0af1"+
		"\u0af2\5\u0246\u0124\2\u0af2\u0af3\7$\2\2\u0af3\u0af4\5\u03a0\u01d1\2"+
		"\u0af4\u0af5\7\u00fc\2\2\u0af5\u025b\3\2\2\2\u0af6\u0af7\79\2\2\u0af7"+
		"\u0af8\7\u00fb\2\2\u0af8\u0af9\5\u025e\u0130\2\u0af9\u0afa\7\u00fc\2\2"+
		"\u0afa\u025d\3\2\2\2\u0afb\u0afd\5\u036c\u01b7\2\u0afc\u0afb\3\2\2\2\u0afc"+
		"\u0afd\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afe\u0b00\5\u0260\u0131\2\u0aff\u0afc"+
		"\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b02\5\u0262\u0132"+
		"\2\u0b02\u025f\3\2\2\2\u0b03\u0b04\5\u0246\u0124\2\u0b04\u0261\3\2\2\2"+
		"\u0b05\u0b06\5\u0246\u0124\2\u0b06\u0263\3\2\2\2\u0b07\u0b08\7\u00ed\2"+
		"\2\u0b08\u0b09\7\u00fb\2\2\u0b09\u0b0a\5\u0266\u0134\2\u0b0a\u0b0b\7\u008e"+
		"\2\2\u0b0b\u0b0e\5\u0254\u012b\2\u0b0c\u0b0d\7\"\2\2\u0b0d\u0b0f\5\u0256"+
		"\u012c\2\u0b0e\u0b0c\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10"+
		"\u0b11\7\u00fc\2\2\u0b11\u0265\3\2\2\2\u0b12\u0b13\b\u0134\1\2\u0b13\u0b14"+
		"\5\u0268\u0135\2\u0b14\u0b1a\3\2\2\2\u0b15\u0b16\f\4\2\2\u0b16\u0b17\7"+
		"\u010e\2\2\u0b17\u0b19\5\u0268\u0135\2\u0b18\u0b15\3\2\2\2\u0b19\u0b1c"+
		"\3\2\2\2\u0b1a\u0b18\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u0267\3\2\2\2\u0b1c"+
		"\u0b1a\3\2\2\2\u0b1d\u0b1e\5\u026a\u0136\2\u0b1e\u0269\3\2\2\2\u0b1f\u0b22"+
		"\5\u01fc\u00ff\2\u0b20\u0b22\5\u024c\u0127\2\u0b21\u0b1f\3\2\2\2\u0b21"+
		"\u0b20\3\2\2\2\u0b22\u026b\3\2\2\2\u0b23\u0b24\7\u00a1\2\2\u0b24\u0b25"+
		"\5\u026e\u0138\2\u0b25\u0b26\5\u0270\u0139\2\u0b26\u0b27\7\u0102\2\2\u0b27"+
		"\u0b28\5\u0276\u013c\2\u0b28\u0b29\7\u0102\2\2\u0b29\u026d\3\2\2\2\u0b2a"+
		"\u0b2b\5\u028e\u0148\2\u0b2b\u026f\3\2\2\2\u0b2c\u0b2d\7\u00fb\2\2\u0b2d"+
		"\u0b32\5\u0272\u013a\2\u0b2e\u0b2f\7\u00fe\2\2\u0b2f\u0b31\5\u0272\u013a"+
		"\2\u0b30\u0b2e\3\2\2\2\u0b31\u0b34\3\2\2\2\u0b32\u0b30\3\2\2\2\u0b32\u0b33"+
		"\3\2\2\2\u0b33\u0b35\3\2\2\2\u0b34\u0b32\3\2\2\2\u0b35\u0b36\7\u00fc\2"+
		"\2\u0b36\u0271\3\2\2\2\u0b37\u0b38\5\u039c\u01cf\2\u0b38\u0b39\5\u0318"+
		"\u018d\2\u0b39\u0b3c\3\2\2\2\u0b3a\u0b3c\5\u0274\u013b\2\u0b3b\u0b37\3"+
		"\2\2\2\u0b3b\u0b3a\3\2\2\2\u0b3c\u0273\3\2\2\2\u0b3d\u0b3e\t\30\2\2\u0b3e"+
		"\u0275\3\2\2\2\u0b3f\u0b47\5\6\4\2\u0b40\u0b47\5\u009aN\2\u0b41\u0b47"+
		"\5\u00f0y\2\u0b42\u0b47\5\u0108\u0085\2\u0b43\u0b47\5\u011c\u008f\2\u0b44"+
		"\u0b47\5\u012c\u0097\2\u0b45\u0b47\5\u0188\u00c5\2\u0b46\u0b3f\3\2\2\2"+
		"\u0b46\u0b40\3\2\2\2\u0b46\u0b41\3\2\2\2\u0b46\u0b42\3\2\2\2\u0b46\u0b43"+
		"\3\2\2\2\u0b46\u0b44\3\2\2\2\u0b46\u0b45\3\2\2\2\u0b47\u0277\3\2\2\2\u0b48"+
		"\u0b49\5\u027c\u013f\2\u0b49\u0b4a\5\u0362\u01b2\2\u0b4a\u0b4e\5\u0282"+
		"\u0142\2\u0b4b\u0b4d\5\u0286\u0144\2\u0b4c\u0b4b\3\2\2\2\u0b4d\u0b50\3"+
		"\2\2\2\u0b4e\u0b4c\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b52\3\2\2\2\u0b50"+
		"\u0b4e\3\2\2\2\u0b51\u0b53\5\u027a\u013e\2\u0b52\u0b51\3\2\2\2\u0b53\u0b54"+
		"\3\2\2\2\u0b54\u0b52\3\2\2\2\u0b54\u0b55\3\2\2\2\u0b55\u0279\3\2\2\2\u0b56"+
		"\u0b5a\5\u0288\u0145\2\u0b57\u0b5a\5\u028c\u0147\2\u0b58\u0b5a\5\u026c"+
		"\u0137\2\u0b59\u0b56\3\2\2\2\u0b59\u0b57\3\2\2\2\u0b59\u0b58\3\2\2\2\u0b5a"+
		"\u027b\3\2\2\2\u0b5b\u0b5c\7j\2\2\u0b5c\u0b5d\5\u027e\u0140\2\u0b5d\u0b5e"+
		"\5\u0280\u0141\2\u0b5e\u027d\3\2\2\2\u0b5f\u0b60\5\u028e\u0148\2\u0b60"+
		"\u027f\3\2\2\2\u0b61\u0b62\7\u00af\2\2\u0b62\u0b63\7\u00e1\2\2\u0b63\u0b64"+
		"\5\u02aa\u0156\2\u0b64\u0281\3\2\2\2\u0b65\u0b66\7\'\2\2\u0b66\u0b67\5"+
		"\u02a0\u0151\2\u0b67\u0283\3\2\2\2\u0b68\u0b69\5\u0386\u01c4\2\u0b69\u0285"+
		"\3\2\2\2\u0b6a\u0b6b\7!\2\2\u0b6b\u0b6c\7\u00dc\2\2\u0b6c\u0b6d\7S\2\2"+
		"\u0b6d\u0b6e\7\13\2\2\u0b6e\u0b6f\5\u0394\u01cb\2\u0b6f\u0b74\5\u01b8"+
		"\u00dd\2\u0b70\u0b71\7\u00aa\2\2\u0b71\u0b72\7\u00ca\2\2\u0b72\u0b73\t"+
		"\3\2\2\u0b73\u0b75\7\u00ab\2\2\u0b74\u0b70\3\2\2\2\u0b74\u0b75\3\2\2\2"+
		"\u0b75\u0287\3\2\2\2\u0b76\u0b77\7!\2\2\u0b77\u0b79\5\u0388\u01c5\2\u0b78"+
		"\u0b7a\7\u00cb\2\2\u0b79\u0b78\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7c"+
		"\3\2\2\2\u0b7b\u0b7d\7.\2\2\u0b7c\u0b7b\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d"+
		"\u0b7e\3\2\2\2\u0b7e\u0b7f\7\u00f0\2\2\u0b7f\u0b80\7\"\2\2\u0b80\u0b81"+
		"\5\u028a\u0146\2\u0b81\u0289\3\2\2\2\u0b82\u0b84\5\u019e\u00d0\2\u0b83"+
		"\u0b85\5\u02e6\u0174\2\u0b84\u0b83\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0b87"+
		"\3\2\2\2\u0b86\u0b88\5\u02f0\u0179\2\u0b87\u0b86\3\2\2\2\u0b87\u0b88\3"+
		"\2\2\2\u0b88\u028b\3\2\2\2\u0b89\u0b8a\7!\2\2\u0b8a\u0b8c\5\u0388\u01c5"+
		"\2\u0b8b\u0b8d\7\u00cb\2\2\u0b8c\u0b8b\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d"+
		"\u0b8f\3\2\2\2\u0b8e\u0b90\7.\2\2\u0b8f\u0b8e\3\2\2\2\u0b8f\u0b90\3\2"+
		"\2\2\u0b90\u0b91\3\2\2\2\u0b91\u0b92\7\u00f0\2\2\u0b92\u0b93\7\"\2\2\u0b93"+
		"\u0b94\5\u038c\u01c7\2\u0b94\u028d\3\2\2\2\u0b95\u0b96\7\u010a\2\2\u0b96"+
		"\u0b98\5\u02aa\u0156\2\u0b97\u0b95\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0b99"+
		"\3\2\2\2\u0b99\u0b9a\5\u0290\u0149\2\u0b9a\u028f\3\2\2\2\u0b9b\u0b9e\5"+
		"\u0292\u014a\2\u0b9c\u0b9e\5\u029a\u014e\2\u0b9d\u0b9b\3\2\2\2\u0b9d\u0b9c"+
		"\3\2\2\2\u0b9e\u0291\3\2\2\2\u0b9f\u0ba0\5\u0294\u014b\2\u0ba0\u0293\3"+
		"\2\2\2\u0ba1\u0ba6\5\u0296\u014c\2\u0ba2\u0ba5\7\u010a\2\2\u0ba3\u0ba5"+
		"\5\u0298\u014d\2\u0ba4\u0ba2\3\2\2\2\u0ba4\u0ba3\3\2\2\2\u0ba5\u0ba8\3"+
		"\2\2\2\u0ba6\u0ba4\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0295\3\2\2\2\u0ba8"+
		"\u0ba6\3\2\2\2\u0ba9\u0baa\7\u0126\2\2\u0baa\u0297\3\2\2\2\u0bab\u0bae"+
		"\5\u0296\u014c\2\u0bac\u0bae\7\u0125\2\2\u0bad\u0bab\3\2\2\2\u0bad\u0bac"+
		"\3\2\2\2\u0bae\u0299\3\2\2\2\u0baf\u0bb0\7\u00f7\2\2\u0bb0\u0bb1\5\u029c"+
		"\u014f\2\u0bb1\u0bb2\7\u00f7\2\2\u0bb2\u029b\3\2\2\2\u0bb3\u0bb5\5\u029e"+
		"\u0150\2\u0bb4\u0bb3\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bb4\3\2\2\2\u0bb6"+
		"\u0bb7\3\2\2\2\u0bb7\u029d\3\2\2\2\u0bb8\u0bbb\5\u03a2\u01d2\2\u0bb9\u0bbb"+
		"\5\u03a4\u01d3\2\u0bba\u0bb8\3\2\2\2\u0bba\u0bb9\3\2\2\2\u0bbb\u029f\3"+
		"\2\2\2\u0bbc\u0bbd\5\u02a2\u0152\2\u0bbd\u0bbe\7\u00ff\2\2\u0bbe\u0bc0"+
		"\3\2\2\2\u0bbf\u0bbc\3\2\2\2\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1"+
		"\u0bc2\5\u02a4\u0153\2\u0bc2\u02a1\3\2\2\2\u0bc3\u0bc4\5\u028e\u0148\2"+
		"\u0bc4\u02a3\3\2\2\2\u0bc5\u0bc6\5\u028e\u0148\2\u0bc6\u02a5\3\2\2\2\u0bc7"+
		"\u0bc8\7\u010a\2\2\u0bc8\u0bca\5\u02aa\u0156\2\u0bc9\u0bc7\3\2\2\2\u0bc9"+
		"\u0bca\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bd5\7\u012b\2\2\u0bcc\u0bce"+
		"\5\u03a8\u01d5\2\u0bcd\u0bcc\3\2\2\2\u0bce\u0bcf\3\2\2\2\u0bcf\u0bcd\3"+
		"\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd2\7\u012b\2\2"+
		"\u0bd2\u0bd4\3\2\2\2\u0bd3\u0bcd\3\2\2\2\u0bd4\u0bd7\3\2\2\2\u0bd5\u0bd3"+
		"\3\2\2\2\u0bd5\u0bd6\3\2\2\2\u0bd6\u02a7\3\2\2\2\u0bd7\u0bd5\3\2\2\2\u0bd8"+
		"\u0bd9\5\u02a0\u0151\2\u0bd9\u0bda\7\u00ff\2\2\u0bda\u0bdc\3\2\2\2\u0bdb"+
		"\u0bd8\3\2\2\2\u0bdb\u0bdc\3\2\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0bde\7\u012c"+
		"\2\2\u0bde\u02a9\3\2\2\2\u0bdf\u0be0\5\u02a8\u0155\2\u0be0\u02ab\3\2\2"+
		"\2\u0be1\u0be2\5\u02a8\u0155\2\u0be2\u02ad\3\2\2\2\u0be3\u0be4\5\u02a8"+
		"\u0155\2\u0be4\u02af\3\2\2\2\u0be5\u0be6\5\u02a8\u0155\2\u0be6\u02b1\3"+
		"\2\2\2\u0be7\u0be8\5\u02a8\u0155\2\u0be8\u02b3\3\2\2\2\u0be9\u0bea\5\u02a8"+
		"\u0155\2\u0bea\u02b5\3\2\2\2\u0beb\u0bee\5\u039a\u01ce\2\u0bec\u0bee\5"+
		"\u0394\u01cb\2\u0bed\u0beb\3\2\2\2\u0bed\u0bec\3\2\2\2\u0bee\u02b7\3\2"+
		"\2\2\u0bef\u0bf0\7@\2\2\u0bf0\u0bf1\5\u02ba\u015e\2\u0bf1\u02b9\3\2\2"+
		"\2\u0bf2\u0bf3\5\u039a\u01ce\2\u0bf3\u02bb\3\2\2\2\u0bf4\u0bf8\7m\2\2"+
		"\u0bf5\u0bf6\7\u00ba\2\2\u0bf6\u0bf8\7\u00ec\2\2\u0bf7\u0bf4\3\2\2\2\u0bf7"+
		"\u0bf5\3\2\2\2\u0bf8\u02bd\3\2\2\2\u0bf9\u0bfa\7\u0087\2\2\u0bfa\u0bfd"+
		"\5\u02c0\u0161\2\u0bfb\u0bfc\7U\2\2\u0bfc\u0bfe\5\u02c4\u0163\2\u0bfd"+
		"\u0bfb\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c00\3\2\2\2\u0bff\u0c01\5\u02c6"+
		"\u0164\2\u0c00\u0bff\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01\u02bf\3\2\2\2\u0c02"+
		"\u0c07\5\u02b6\u015c\2\u0c03\u0c04\7\u00fb\2\2\u0c04\u0c05\5\u02c2\u0162"+
		"\2\u0c05\u0c06\7\u00fc\2\2\u0c06\u0c08\3\2\2\2\u0c07\u0c03\3\2\2\2\u0c07"+
		"\u0c08\3\2\2\2\u0c08\u02c1\3\2\2\2\u0c09\u0c0a\5\u0316\u018c\2\u0c0a\u02c3"+
		"\3\2\2\2\u0c0b\u0c0c\t\23\2\2\u0c0c\u02c5\3\2\2\2\u0c0d\u0c0f\5\u02c8"+
		"\u0165\2\u0c0e\u0c10\5\u02ca\u0166\2\u0c0f\u0c0e\3\2\2\2\u0c0f\u0c10\3"+
		"\2\2\2\u0c10\u0c16\3\2\2\2\u0c11\u0c13\5\u02ca\u0166\2\u0c12\u0c14\5\u02c8"+
		"\u0165\2\u0c13\u0c12\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c16\3\2\2\2\u0c15"+
		"\u0c0d\3\2\2\2\u0c15\u0c11\3\2\2\2\u0c16\u02c7\3\2\2\2\u0c17\u0c18\7\u00aa"+
		"\2\2\u0c18\u0c19\7c\2\2\u0c19\u0c1a\5\u02cc\u0167\2\u0c1a\u02c9\3\2\2"+
		"\2\u0c1b\u0c1c\7\u00aa\2\2\u0c1c\u0c1d\7\4\2\2\u0c1d\u0c1e\5\u02cc\u0167"+
		"\2\u0c1e\u02cb\3\2\2\2\u0c1f\u0c25\7\u0084\2\2\u0c20\u0c21\7F\2\2\u0c21"+
		"\u0c25\t\31\2\2\u0c22\u0c23\7\u009f\2\2\u0c23\u0c25\7\u00da\2\2\u0c24"+
		"\u0c1f\3\2\2\2\u0c24\u0c20\3\2\2\2\u0c24\u0c22\3\2\2\2\u0c25\u02cd\3\2"+
		"\2\2\u0c26\u0c2b\5\u02d0\u0169\2\u0c27\u0c29\7P\2\2\u0c28\u0c27\3\2\2"+
		"\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2c\7A\2\2\u0c2b\u0c28"+
		"\3\2\2\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u0c35\3\2\2\2\u0c2d\u0c2f\7P\2\2\u0c2e"+
		"\u0c2d\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0c32\7A"+
		"\2\2\u0c31\u0c33\5\u02d0\u0169\2\u0c32\u0c31\3\2\2\2\u0c32\u0c33\3\2\2"+
		"\2\u0c33\u0c35\3\2\2\2\u0c34\u0c26\3\2\2\2\u0c34\u0c2e\3\2\2\2\u0c35\u02cf"+
		"\3\2\2\2\u0c36\u0c37\7\u00c5\2\2\u0c37\u0c38\t\32\2\2\u0c38\u02d1\3\2"+
		"\2\2\u0c39\u0c3a\5\u02bc\u015f\2\u0c3a\u0c3b\7\u00fb\2\2\u0c3b\u0c3c\5"+
		"\u02d4\u016b\2\u0c3c\u0c3d\7\u00fc\2\2\u0c3d\u02d3\3\2\2\2\u0c3e\u0c3f"+
		"\5\u0316\u018c\2\u0c3f\u02d5\3\2\2\2\u0c40\u0c41\7\u0098\2\2\u0c41\u0c42"+
		"\7\u00ec\2\2\u0c42\u0c43\7\u00fb\2\2\u0c43\u0c44\5\u02d8\u016d\2\u0c44"+
		"\u0c45\7\u00fc\2\2\u0c45\u0c46\5\u02be\u0160\2\u0c46\u02d7\3\2\2\2\u0c47"+
		"\u0c48\5\u02c2\u0162\2\u0c48\u02d9\3\2\2\2\u0c49\u0c4a\7X\2\2\u0c4a\u0c4b"+
		"\5\u02dc\u016f\2\u0c4b\u02db\3\2\2\2\u0c4c\u0c4d\5\u039a\u01ce\2\u0c4d"+
		"\u02dd\3\2\2\2\u0c4e\u0c4f\7B\2\2\u0c4f\u0c50\5\u0314\u018b\2\u0c50\u02df"+
		"\3\2\2\2\u0c51\u0c52\7\67\2\2\u0c52\u0c53\7\u0094\2\2\u0c53\u0c54\5\u02e2"+
		"\u0172\2\u0c54\u02e1\3\2\2\2\u0c55\u0c5a\5\u02e4\u0173\2\u0c56\u0c57\7"+
		"\u00fe\2\2\u0c57\u0c59\5\u02e4\u0173\2\u0c58\u0c56\3\2\2\2\u0c59\u0c5c"+
		"\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u02e3\3\2\2\2\u0c5c"+
		"\u0c5a\3\2\2\2\u0c5d\u0c5f\5\u0396\u01cc\2\u0c5e\u0c60\5\u02da\u016e\2"+
		"\u0c5f\u0c5e\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u02e5\3\2\2\2\u0c61\u0c62"+
		"\7\u00be\2\2\u0c62\u0c63\7\u0094\2\2\u0c63\u0c64\5\u02e8\u0175\2\u0c64"+
		"\u02e7\3\2\2\2\u0c65\u0c6a\5\u02ea\u0176\2\u0c66\u0c67\7\u00fe\2\2\u0c67"+
		"\u0c69\5\u02ea\u0176\2\u0c68\u0c66\3\2\2\2\u0c69\u0c6c\3\2\2\2\u0c6a\u0c68"+
		"\3\2\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b\u02e9\3\2\2\2\u0c6c\u0c6a\3\2\2\2\u0c6d"+
		"\u0c6f\5\u02ec\u0177\2\u0c6e\u0c70\5\u02da\u016e\2\u0c6f\u0c6e\3\2\2\2"+
		"\u0c6f\u0c70\3\2\2\2\u0c70\u0c72\3\2\2\2\u0c71\u0c73\5\u02ee\u0178\2\u0c72"+
		"\u0c71\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u02eb\3\2\2\2\u0c74\u0c77\5\u0314"+
		"\u018b\2\u0c75\u0c77\7\u011c\2\2\u0c76\u0c74\3\2\2\2\u0c76\u0c75\3\2\2"+
		"\2\u0c77\u02ed\3\2\2\2\u0c78\u0c79\t\33\2\2\u0c79\u02ef\3\2\2\2\u0c7a"+
		"\u0c82\7\"\2\2\u0c7b\u0c7c\7\u0096\2\2\u0c7c\u0c83\7e\2\2\u0c7d\u0c80"+
		"\7c\2\2\u0c7e\u0c7f\7\3\2\2\u0c7f\u0c81\5\u0316\u018c\2\u0c80\u0c7e\3"+
		"\2\2\2\u0c80\u0c81\3\2\2\2\u0c81\u0c83\3\2\2\2\u0c82\u0c7b\3\2\2\2\u0c82"+
		"\u0c7d\3\2\2\2\u0c83\u02f1\3\2\2\2\u0c84\u0c85\7\u0111\2\2\u0c85\u0c86"+
		"\5\u02f4\u017b\2\u0c86\u02f3\3\2\2\2\u0c87\u0c8f\5\u02f6\u017c\2\u0c88"+
		"\u0c8f\5\u030c\u0187\2\u0c89\u0c8f\7\u00dd\2\2\u0c8a\u0c8f\7\u008b\2\2"+
		"\u0c8b\u0c8f\7\u0092\2\2\u0c8c\u0c8f\7\u008f\2\2\u0c8d\u0c8f\7\u0110\2"+
		"\2\u0c8e\u0c87\3\2\2\2\u0c8e\u0c88\3\2\2\2\u0c8e\u0c89\3\2\2\2\u0c8e\u0c8a"+
		"\3\2\2\2\u0c8e\u0c8b\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8e\u0c8d\3\2\2\2\u0c8f"+
		"\u02f5\3\2\2\2\u0c90\u0c92\5\u03a6\u01d4\2\u0c91\u0c90\3\2\2\2\u0c91\u0c92"+
		"\3\2\2\2\u0c92\u0c93\3\2\2\2\u0c93\u0c96\7\u011c\2\2\u0c94\u0c96\5\u02fa"+
		"\u017e\2\u0c95\u0c91\3\2\2\2\u0c95\u0c94\3\2\2\2\u0c96\u02f7\3\2\2\2\u0c97"+
		"\u0c9a\7\u011c\2\2\u0c98\u0c9a\5\u02fa\u017e\2\u0c99\u0c97\3\2\2\2\u0c99"+
		"\u0c98\3\2\2\2\u0c9a\u02f9\3\2\2\2\u0c9b\u0ca2\5\u02a6\u0154\2\u0c9c\u0ca2"+
		"\5\u02fc\u017f\2\u0c9d\u0ca2\5\u02fe\u0180\2\u0c9e\u0ca2\5\u0300\u0181"+
		"\2\u0c9f\u0ca2\5\u0302\u0182\2\u0ca0\u0ca2\5\u030a\u0186\2\u0ca1\u0c9b"+
		"\3\2\2\2\u0ca1\u0c9c\3\2\2\2\u0ca1\u0c9d\3\2\2\2\u0ca1\u0c9e\3\2\2\2\u0ca1"+
		"\u0c9f\3\2\2\2\u0ca1\u0ca0\3\2\2\2\u0ca2\u02fb\3\2\2\2\u0ca3\u0ca4\7t"+
		"\2\2\u0ca4\u0cae\7\u012b\2\2\u0ca5\u0ca7\5\u03a8\u01d5\2\u0ca6\u0ca5\3"+
		"\2\2\2\u0ca7\u0ca8\3\2\2\2\u0ca8\u0ca6\3\2\2\2\u0ca8\u0ca9\3\2\2\2\u0ca9"+
		"\u0caa\3\2\2\2\u0caa\u0cab\7\u012b\2\2\u0cab\u0cad\3\2\2\2\u0cac\u0ca6"+
		"\3\2\2\2\u0cad\u0cb0\3\2\2\2\u0cae\u0cac\3\2\2\2\u0cae\u0caf\3\2\2\2\u0caf"+
		"\u02fd\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb1\u0cb2\7\u00ea\2\2\u0cb2\u0cbc"+
		"\7\u0128\2\2\u0cb3\u0cb5\5\u03a8\u01d5\2\u0cb4\u0cb3\3\2\2\2\u0cb5\u0cb6"+
		"\3\2\2\2\u0cb6\u0cb4\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8"+
		"\u0cb9\7\u0128\2\2\u0cb9\u0cbb\3\2\2\2\u0cba\u0cb4\3\2\2\2\u0cbb\u0cbe"+
		"\3\2\2\2\u0cbc\u0cba\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u02ff\3\2\2\2\u0cbe"+
		"\u0cbc\3\2\2\2\u0cbf\u0cc0\7\r\2\2\u0cc0\u0cca\7\u0129\2\2\u0cc1\u0cc3"+
		"\5\u03a8\u01d5\2\u0cc2\u0cc1\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc2\3"+
		"\2\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7\7\u0129\2\2"+
		"\u0cc7\u0cc9\3\2\2\2\u0cc8\u0cc2\3\2\2\2\u0cc9\u0ccc\3\2\2\2\u0cca\u0cc8"+
		"\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0301\3\2\2\2\u0ccc\u0cca\3\2\2\2\u0ccd"+
		"\u0cd1\5\u0304\u0183\2\u0cce\u0cd1\5\u0306\u0184\2\u0ccf\u0cd1\5\u0308"+
		"\u0185\2\u0cd0\u0ccd\3\2\2\2\u0cd0\u0cce\3\2\2\2\u0cd0\u0ccf\3\2\2\2\u0cd1"+
		"\u0303\3\2\2\2\u0cd2\u0cd3\7\u009a\2\2\u0cd3\u0cd4\7\u0120\2\2\u0cd4\u0305"+
		"\3\2\2\2\u0cd5\u0cd6\7\u0097\2\2\u0cd6\u0cd7\7\u0122\2\2\u0cd7\u0307\3"+
		"\2\2\2\u0cd8\u0cd9\7\u00c1\2\2\u0cd9\u0cda\7\u011f\2\2\u0cda\u0309\3\2"+
		"\2\2\u0cdb\u0cdd\7\u00ac\2\2\u0cdc\u0cde\5\u03a6\u01d4\2\u0cdd\u0cdc\3"+
		"\2\2\2\u0cdd\u0cde\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf\u0ce0\7\u0124\2\2"+
		"\u0ce0\u0ce1\5\u0330\u0199\2\u0ce1\u030b\3\2\2\2\u0ce2\u0ce6\5\u030e\u0188"+
		"\2\u0ce3\u0ce6\5\u0310\u0189\2\u0ce4\u0ce6\5\u0312\u018a\2\u0ce5\u0ce2"+
		"\3\2\2\2\u0ce5\u0ce3\3\2\2\2\u0ce5\u0ce4\3\2\2\2\u0ce6\u030d\3\2\2\2\u0ce7"+
		"\u0ce8\7\u00bc\2\2\u0ce8\u030f\3\2\2\2\u0ce9\u0cee\7\6\2\2\u0cea\u0ceb"+
		"\7\u00fb\2\2\u0ceb\u0cec\5\u032a\u0196\2\u0cec\u0ced\7\u00fc\2\2\u0ced"+
		"\u0cef\3\2\2\2\u0cee\u0cea\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef\u0311\3\2"+
		"\2\2\u0cf0\u0cf5\7\u00cc\2\2\u0cf1\u0cf2\7\u00fb\2\2\u0cf2\u0cf3\5\u032c"+
		"\u0197\2\u0cf3\u0cf4\7\u00fc\2\2\u0cf4\u0cf6\3\2\2\2\u0cf5\u0cf1\3\2\2"+
		"\2\u0cf5\u0cf6\3\2\2\2\u0cf6\u0313\3\2\2\2\u0cf7\u0cf8\5\u028e\u0148\2"+
		"\u0cf8\u0315\3\2\2\2\u0cf9\u0cfe\5\u0314\u018b\2\u0cfa\u0cfb\7\u00fe\2"+
		"\2\u0cfb\u0cfd\5\u0314\u018b\2\u0cfc\u0cfa\3\2\2\2\u0cfd\u0d00\3\2\2\2"+
		"\u0cfe\u0cfc\3\2\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0317\3\2\2\2\u0d00\u0cfe"+
		"\3\2\2\2\u0d01\u0d05\5\u031a\u018e\2\u0d02\u0d03\7\u0080\2\2\u0d03\u0d04"+
		"\7F\2\2\u0d04\u0d06\5\u02aa\u0156\2\u0d05\u0d02\3\2\2\2\u0d05\u0d06\3"+
		"\2\2\2\u0d06\u0d0d\3\2\2\2\u0d07\u0d0d\5\u031c\u018f\2\u0d08\u0d0d\5\u031e"+
		"\u0190\2\u0d09\u0d0d\5\u0320\u0191\2\u0d0a\u0d0d\5\u0326\u0194\2\u0d0b"+
		"\u0d0d\5\u032e\u0198\2\u0d0c\u0d01\3\2\2\2\u0d0c\u0d07\3\2\2\2\u0d0c\u0d08"+
		"\3\2\2\2\u0d0c\u0d09\3\2\2\2\u0d0c\u0d0a\3\2\2\2\u0d0c\u0d0b\3\2\2\2\u0d0d"+
		"\u0319\3\2\2\2\u0d0e\u0d10\t\34\2\2\u0d0f\u0d11\7\u00de\2\2\u0d10\u0d0f"+
		"\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d14\3\2\2\2\u0d12\u0d14\7\u009e\2"+
		"\2\u0d13\u0d0e\3\2\2\2\u0d13\u0d12\3\2\2\2\u0d14\u0d19\3\2\2\2\u0d15\u0d16"+
		"\7\u00fb\2\2\u0d16\u0d17\5\u0380\u01c1\2\u0d17\u0d18\7\u00fc\2\2\u0d18"+
		"\u0d1a\3\2\2\2\u0d19\u0d15\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u031b\3\2"+
		"\2\2\u0d1b\u0d21\7\u00b6\2\2\u0d1c\u0d1e\t\34\2\2\u0d1d\u0d1f\7\u00de"+
		"\2\2\u0d1e\u0d1d\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f\u0d22\3\2\2\2\u0d20"+
		"\u0d22\7\u009e\2\2\u0d21\u0d1c\3\2\2\2\u0d21\u0d20\3\2\2\2\u0d22\u0d28"+
		"\3\2\2\2\u0d23\u0d25\7\u00c3\2\2\u0d24\u0d26\7\u00de\2\2\u0d25\u0d24\3"+
		"\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d28\3\2\2\2\u0d27\u0d1b\3\2\2\2\u0d27"+
		"\u0d23\3\2\2\2\u0d28\u0d2d\3\2\2\2\u0d29\u0d2a\7\u00fb\2\2\u0d2a\u0d2b"+
		"\5\u0380\u01c1\2\u0d2b\u0d2c\7\u00fc\2\2\u0d2c\u0d2e\3\2\2\2\u0d2d\u0d29"+
		"\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u031d\3\2\2\2\u0d2f\u0d31\7%\2\2\u0d30"+
		"\u0d32\7\u00de\2\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d37"+
		"\3\2\2\2\u0d33\u0d34\7\u00fb\2\2\u0d34\u0d35\5\u0380\u01c1\2\u0d35\u0d36"+
		"\7\u00fc\2\2\u0d36\u0d38\3\2\2\2\u0d37\u0d33\3\2\2\2\u0d37\u0d38\3\2\2"+
		"\2\u0d38\u031f\3\2\2\2\u0d39\u0d3c\5\u0322\u0192\2\u0d3a\u0d3c\5\u0324"+
		"\u0193\2\u0d3b\u0d39\3\2\2\2\u0d3b\u0d3a\3\2\2\2\u0d3c\u0321\3\2\2\2\u0d3d"+
		"\u0d46\t\35\2\2\u0d3e\u0d3f\7\u00fb\2\2\u0d3f\u0d42\5\u0382\u01c2\2\u0d40"+
		"\u0d41\7\u00fe\2\2\u0d41\u0d43\5\u0384\u01c3\2\u0d42\u0d40\3\2\2\2\u0d42"+
		"\u0d43\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d45\7\u00fc\2\2\u0d45\u0d47"+
		"\3\2\2\2\u0d46\u0d3e\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d4c\3\2\2\2\u0d48"+
		"\u0d4c\7R\2\2\u0d49\u0d4c\7\u00d1\2\2\u0d4a\u0d4c\7\u00a5\2\2\u0d4b\u0d3d"+
		"\3\2\2\2\u0d4b\u0d48\3\2\2\2\u0d4b\u0d49\3\2\2\2\u0d4b\u0d4a\3\2\2\2\u0d4c"+
		"\u0323\3\2\2\2\u0d4d\u0d52\7\u00cd\2\2\u0d4e\u0d4f\7\u00fb\2\2\u0d4f\u0d50"+
		"\5\u0382\u01c2\2\u0d50\u0d51\7\u00fc\2\2\u0d51\u0d53\3\2\2\2\u0d52\u0d4e"+
		"\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u0d58\3\2\2\2\u0d54\u0d58\7\62\2\2"+
		"\u0d55\u0d56\7\u00ad\2\2\u0d56\u0d58\7N\2\2\u0d57\u0d4d\3\2\2\2\u0d57"+
		"\u0d54\3\2\2\2\u0d57\u0d55\3\2\2\2\u0d58\u0325\3\2\2\2\u0d59\u0d70\7\u009a"+
		"\2\2\u0d5a\u0d5f\7\u0097\2\2\u0d5b\u0d5c\7\u00fb\2\2\u0d5c\u0d5d\5\u032a"+
		"\u0196\2\u0d5d\u0d5e\7\u00fc\2\2\u0d5e\u0d60\3\2\2\2\u0d5f\u0d5b\3\2\2"+
		"\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d69\3\2\2\2\u0d61\u0d66\7\u00c1\2\2\u0d62"+
		"\u0d63\7\u00fb\2\2\u0d63\u0d64\5\u032c\u0197\2\u0d64\u0d65\7\u00fc\2\2"+
		"\u0d65\u0d67\3\2\2\2\u0d66\u0d62\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d69"+
		"\3\2\2\2\u0d68\u0d5a\3\2\2\2\u0d68\u0d61\3\2\2\2\u0d69\u0d6d\3\2\2\2\u0d6a"+
		"\u0d6b\7\64\2\2\u0d6b\u0d6c\7\u0097\2\2\u0d6c\u0d6e\7\u00df\2\2\u0d6d"+
		"\u0d6a\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d70\3\2\2\2\u0d6f\u0d59\3\2"+
		"\2\2\u0d6f\u0d68\3\2\2\2\u0d70\u0327\3\2\2\2\u0d71\u0d72\7\u011c\2\2\u0d72"+
		"\u0329\3\2\2\2\u0d73\u0d74\5\u0328\u0195\2\u0d74\u032b\3\2\2\2\u0d75\u0d76"+
		"\5\u0328\u0195\2\u0d76\u032d\3\2\2\2\u0d77\u0d78\7\u00ac\2\2\u0d78\u0d79"+
		"\5\u0330\u0199\2\u0d79\u032f\3\2\2\2\u0d7a\u0d7b\5\u0332\u019a\2\u0d7b"+
		"\u0d7c\7\u0093\2\2\u0d7c\u0d7d\5\u0338\u019d\2\u0d7d\u0d80\3\2\2\2\u0d7e"+
		"\u0d80\5\u033c\u019f\2\u0d7f\u0d7a\3\2\2\2\u0d7f\u0d7e\3\2\2\2\u0d80\u0331"+
		"\3\2\2\2\u0d81\u0d86\5\u0334\u019b\2\u0d82\u0d83\7\u00fb\2\2\u0d83\u0d84"+
		"\5\u0336\u019c\2\u0d84\u0d85\7\u00fc\2\2\u0d85\u0d87\3\2\2\2\u0d86\u0d82"+
		"\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0333\3\2\2\2\u0d88\u0d89\t\36\2\2"+
		"\u0d89\u0335\3\2\2\2\u0d8a\u0d8b\7\u011c\2\2\u0d8b\u0337\3\2\2\2\u0d8c"+
		"\u0d93\5\u0334\u019b\2\u0d8d\u0d8e\7C\2\2\u0d8e\u0d8f\7\u00fb\2\2\u0d8f"+
		"\u0d90\5\u033a\u019e\2\u0d90\u0d91\7\u00fc\2\2\u0d91\u0d93\3\2\2\2\u0d92"+
		"\u0d8c\3\2\2\2\u0d92\u0d8d\3\2\2\2\u0d93\u0339\3\2\2\2\u0d94\u0d95\7\u011c"+
		"\2\2\u0d95\u033b\3\2\2\2\u0d96\u0d9b\5\u0334\u019b\2\u0d97\u0d98\7\u00fb"+
		"\2\2\u0d98\u0d99\5\u0336\u019c\2\u0d99\u0d9a\7\u00fc\2\2\u0d9a\u0d9c\3"+
		"\2\2\2\u0d9b\u0d97\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0dac\3\2\2\2\u0d9d"+
		"\u0da9\7C\2\2\u0d9e\u0d9f\7\u00fb\2\2\u0d9f\u0da5\5\u0336\u019c\2\u0da0"+
		"\u0da1\7\u00fe\2\2\u0da1\u0da2\7\u00fb\2\2\u0da2\u0da3\5\u033a\u019e\2"+
		"\u0da3\u0da4\7\u00fc\2\2\u0da4\u0da6\3\2\2\2\u0da5\u0da0\3\2\2\2\u0da5"+
		"\u0da6\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u0da8\7\u00fc\2\2\u0da8\u0daa"+
		"\3\2\2\2\u0da9\u0d9e\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa\u0dac\3\2\2\2\u0dab"+
		"\u0d96\3\2\2\2\u0dab\u0d9d\3\2\2\2\u0dac\u033d\3\2\2\2\u0dad\u0db6\5\u0340"+
		"\u01a1\2\u0dae\u0db6\5\u0344\u01a3\2\u0daf\u0db6\5\u0346\u01a4\2\u0db0"+
		"\u0db6\7\u00dd\2\2\u0db1\u0db6\7\u008b\2\2\u0db2\u0db6\7\u0092\2\2\u0db3"+
		"\u0db6\7\u008f\2\2\u0db4\u0db6\7x\2\2\u0db5\u0dad\3\2\2\2\u0db5\u0dae"+
		"\3\2\2\2\u0db5\u0daf\3\2\2\2\u0db5\u0db0\3\2\2\2\u0db5\u0db1\3\2\2\2\u0db5"+
		"\u0db2\3\2\2\2\u0db5\u0db3\3\2\2\2\u0db5\u0db4\3\2\2\2\u0db6\u033f\3\2"+
		"\2\2\u0db7\u0db9\5\u039c\u01cf\2\u0db8\u0dba\5\u0342\u01a2\2\u0db9\u0db8"+
		"\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0341\3\2\2\2\u0dbb\u0dbc\7\u00e0\2"+
		"\2\u0dbc\u0dbd\5\u039c\u01cf\2\u0dbd\u0343\3\2\2\2\u0dbe\u0dbf\7\u0109"+
		"\2\2\u0dbf\u0345\3\2\2\2\u0dc0\u0dc2\5\u034a\u01a6\2\u0dc1\u0dc3\5\u0348"+
		"\u01a5\2\u0dc2\u0dc1\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0347\3\2\2\2\u0dc4"+
		"\u0dc6\7\u00e0\2\2\u0dc5\u0dc4\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dc7"+
		"\3\2\2\2\u0dc7\u0dc8\5\u034a\u01a6\2\u0dc8\u0349\3\2\2\2\u0dc9\u0dca\7"+
		"\u0101\2\2\u0dca\u0dcb\5\u034c\u01a7\2\u0dcb\u034b\3\2\2\2\u0dcc\u0dd4"+
		"\5\u0350\u01a9\2\u0dcd\u0dd4\5\u0352\u01aa\2\u0dce\u0dd4\5\u0354\u01ab"+
		"\2\u0dcf\u0dd4\5\u0356\u01ac\2\u0dd0\u0dd4\5\u0358\u01ad\2\u0dd1\u0dd4"+
		"\5\u035a\u01ae\2\u0dd2\u0dd4\5\u035c\u01af\2\u0dd3\u0dcc\3\2\2\2\u0dd3"+
		"\u0dcd\3\2\2\2\u0dd3\u0dce\3\2\2\2\u0dd3\u0dcf\3\2\2\2\u0dd3\u0dd0\3\2"+
		"\2\2\u0dd3\u0dd1\3\2\2\2\u0dd3\u0dd2\3\2\2\2\u0dd4\u034d\3\2\2\2\u0dd5"+
		"\u0dd6\7\u012c\2\2\u0dd6\u034f\3\2\2\2\u0dd7\u0dd8\5\u034e\u01a8\2\u0dd8"+
		"\u0351\3\2\2\2\u0dd9\u0dda\5\u034e\u01a8\2\u0dda\u0353\3\2\2\2\u0ddb\u0ddc"+
		"\5\u034e\u01a8\2\u0ddc\u0355\3\2\2\2\u0ddd\u0dde\5\u034e\u01a8\2\u0dde"+
		"\u0357\3\2\2\2\u0ddf\u0de0\5\u034e\u01a8\2\u0de0\u0359\3\2\2\2\u0de1\u0de2"+
		"\5\u034e\u01a8\2\u0de2\u035b\3\2\2\2\u0de3\u0de4\5\u034e\u01a8\2\u0de4"+
		"\u035d\3\2\2\2\u0de5\u0de8\5\u039c\u01cf\2\u0de6\u0de8\5\u034a\u01a6\2"+
		"\u0de7\u0de5\3\2\2\2\u0de7\u0de6\3\2\2\2\u0de8\u035f\3\2\2\2\u0de9\u0dec"+
		"\5\u02f8\u017d\2\u0dea\u0dec\5\u033e\u01a0\2\u0deb\u0de9\3\2\2\2\u0deb"+
		"\u0dea\3\2\2\2\u0dec\u0361\3\2\2\2\u0ded\u0dee\7l\2\2\u0dee\u0def\7\u012a"+
		"\2\2\u0def\u0363\3\2\2\2\u0df0\u0df3\5\u0366\u01b4\2\u0df1\u0df3\5\u0368"+
		"\u01b5\2\u0df2\u0df0\3\2\2\2\u0df2\u0df1\3\2\2\2\u0df3\u0365\3\2\2\2\u0df4"+
		"\u0df7\5\u0334\u019b\2\u0df5\u0df7\7C\2\2\u0df6\u0df4\3\2\2\2\u0df6\u0df5"+
		"\3\2\2\2\u0df7\u0367\3\2\2\2\u0df8\u0df9\t\37\2\2\u0df9\u0369\3\2\2\2"+
		"\u0dfa\u0dfd\5\u0398\u01cd\2\u0dfb\u0dfd\5\u0318\u018d\2\u0dfc\u0dfa\3"+
		"\2\2\2\u0dfc\u0dfb\3\2\2\2\u0dfd\u036b\3\2\2\2\u0dfe\u0dff\t \2\2\u0dff"+
		"\u036d\3\2\2\2\u0e00\u0e01\t!\2\2\u0e01\u036f\3\2\2\2\u0e02\u0e03\7\u0110"+
		"\2\2\u0e03\u0371\3\2\2\2\u0e04\u0e05\7\u0111\2\2\u0e05\u0373\3\2\2\2\u0e06"+
		"\u0e07\t\"\2\2\u0e07\u0375\3\2\2\2\u0e08\u0e09\t#\2\2\u0e09\u0377\3\2"+
		"\2\2\u0e0a\u0e0b\t$\2\2\u0e0b\u0379\3\2\2\2\u0e0c\u0e0f\5\u037c\u01bf"+
		"\2\u0e0d\u0e0f\5\u037e\u01c0\2\u0e0e\u0e0c\3\2\2\2\u0e0e\u0e0d\3\2\2\2"+
		"\u0e0f\u037b\3\2\2\2\u0e10\u0e11\7\u0114\2\2\u0e11\u037d\3\2\2\2\u0e12"+
		"\u0e13\t%\2\2\u0e13\u037f\3\2\2\2\u0e14\u0e15\7\u011c\2\2\u0e15\u0381"+
		"\3\2\2\2\u0e16\u0e17\7\u011c\2\2\u0e17\u0383\3\2\2\2\u0e18\u0e19\7\u011c"+
		"\2\2\u0e19\u0385\3\2\2\2\u0e1a\u0e1b\5\u028e\u0148\2\u0e1b\u0387\3\2\2"+
		"\2\u0e1c\u0e1d\5\u028e\u0148\2\u0e1d\u0389\3\2\2\2\u0e1e\u0e1f\5\u028e"+
		"\u0148\2\u0e1f\u038b\3\2\2\2\u0e20\u0e21\5\u028e\u0148\2\u0e21\u038d\3"+
		"\2\2\2\u0e22\u0e23\5\u028e\u0148\2\u0e23\u038f\3\2\2\2\u0e24\u0e25\5\u038e"+
		"\u01c8\2\u0e25\u0391\3\2\2\2\u0e26\u0e29\5\u02b6\u015c\2\u0e27\u0e29\5"+
		"\u038a\u01c6\2\u0e28\u0e26\3\2\2\2\u0e28\u0e27\3\2\2\2\u0e29\u0393\3\2"+
		"\2\2\u0e2a\u0e2b\7j\2\2\u0e2b\u0e2c\7\u00ff\2\2\u0e2c\u0e2d\5\u0390\u01c9"+
		"\2\u0e2d\u0395\3\2\2\2\u0e2e\u0e2f\5\u0392\u01ca\2\u0e2f\u0e30\7\u00ff"+
		"\2\2\u0e30\u0e32\3\2\2\2\u0e31\u0e2e\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32"+
		"\u0e33\3\2\2\2\u0e33\u0e34\5\u0314\u018b\2\u0e34\u0397\3\2\2\2\u0e35\u0e36"+
		"\5\u039a\u01ce\2\u0e36\u0399\3\2\2\2\u0e37\u0e38\5\u02a0\u0151\2\u0e38"+
		"\u0e39\7\u00ff\2\2\u0e39\u0e3b\3\2\2\2\u0e3a\u0e37\3\2\2\2\u0e3a\u0e3b"+
		"\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0e3d\5\u038e\u01c8\2\u0e3d\u039b\3"+
		"\2\2\2\u0e3e\u0e3f\7\u0101\2\2\u0e3f\u0e40\5\u028e\u0148\2\u0e40\u039d"+
		"\3\2\2\2\u0e41\u0e42\5\u039a\u01ce\2\u0e42\u039f\3\2\2\2\u0e43\u0e44\5"+
		"\u039a\u01ce\2\u0e44\u03a1\3\2\2\2\u0e45\u0e46\n&\2\2\u0e46\u03a3\3\2"+
		"\2\2\u0e47\u0e48\7\u008c\2\2\u0e48\u03a5\3\2\2\2\u0e49\u0e4a\t\24\2\2"+
		"\u0e4a\u03a7\3\2\2\2\u0e4b\u0e4c\t\'\2\2\u0e4c\u03a9\3\2\2\2\u0148\u03ae"+
		"\u03ba\u03be\u03c9\u03cf\u03d4\u03dd\u03f0\u03f5\u03fe\u0407\u040d\u0411"+
		"\u041a\u041e\u0421\u0424\u0427\u0431\u043d\u0442\u044a\u0456\u045c\u0461"+
		"\u0468\u0472\u0475\u047a\u0486\u048a\u0494\u0498\u04a2\u04ad\u04ba\u04c4"+
		"\u04d9\u04e4\u04f7\u050a\u050e\u0517\u051e\u0528\u0540\u054b\u056f\u0584"+
		"\u058b\u058e\u059a\u059f\u05a6\u05ab\u05b2\u05be\u05c5\u05cd\u05d7\u05dc"+
		"\u05df\u05e2\u05ea\u05ef\u05f3\u05f8\u0600\u0608\u060b\u0610\u0612\u0614"+
		"\u0618\u061f\u0628\u062b\u0631\u0648\u0657\u0662\u0667\u0679\u0685\u068d"+
		"\u0692\u069b\u06a1\u06ac\u06c2\u06c5\u06c9\u06cd\u06d2\u06db\u06df\u06e2"+
		"\u06f0\u06f8\u06ff\u0707\u071d\u0726\u072c\u0734\u074e\u0751\u0784\u0795"+
		"\u0798\u07ad\u07b0\u07bc\u07d0\u07d3\u07db\u07e3\u07f2\u07f7\u07fa\u0801"+
		"\u0808\u080c\u0813\u0816\u082a\u083a\u0841\u0850\u0859\u0873\u0875\u087d"+
		"\u088d\u0895\u089a\u089d\u08a5\u08aa\u08b2\u08b7\u08ba\u08c2\u08c9\u08cd"+
		"\u08e1\u08ec\u08ef\u08f4\u08f8\u08fb\u08ff\u0906\u090e\u0912\u0917\u0923"+
		"\u0926\u0928\u0930\u0932\u093e\u0946\u094f\u0959\u0960\u0965\u096b\u0975"+
		"\u0986\u0989\u0997\u099d\u09a4\u09ad\u09b7\u09c2\u09c6\u09cc\u09d4\u09db"+
		"\u09e0\u09e9\u09f4\u09fc\u0a03\u0a0f\u0a16\u0a1d\u0a21\u0a2a\u0a32\u0a39"+
		"\u0a3d\u0a43\u0a53\u0a58\u0a5c\u0a63\u0a66\u0a6e\u0a71\u0a83\u0a8e\u0a93"+
		"\u0aa5\u0aaa\u0ac3\u0ac8\u0acc\u0ad0\u0ad7\u0ae2\u0afc\u0aff\u0b0e\u0b1a"+
		"\u0b21\u0b32\u0b3b\u0b46\u0b4e\u0b54\u0b59\u0b74\u0b79\u0b7c\u0b84\u0b87"+
		"\u0b8c\u0b8f\u0b97\u0b9d\u0ba4\u0ba6\u0bad\u0bb6\u0bba\u0bbf\u0bc9\u0bcf"+
		"\u0bd5\u0bdb\u0bed\u0bf7\u0bfd\u0c00\u0c07\u0c0f\u0c13\u0c15\u0c24\u0c28"+
		"\u0c2b\u0c2e\u0c32\u0c34\u0c5a\u0c5f\u0c6a\u0c6f\u0c72\u0c76\u0c80\u0c82"+
		"\u0c8e\u0c91\u0c95\u0c99\u0ca1\u0ca8\u0cae\u0cb6\u0cbc\u0cc4\u0cca\u0cd0"+
		"\u0cdd\u0ce5\u0cee\u0cf5\u0cfe\u0d05\u0d0c\u0d10\u0d13\u0d19\u0d1e\u0d21"+
		"\u0d25\u0d27\u0d2d\u0d31\u0d37\u0d3b\u0d42\u0d46\u0d4b\u0d52\u0d57\u0d5f"+
		"\u0d66\u0d68\u0d6d\u0d6f\u0d7f\u0d86\u0d92\u0d9b\u0da5\u0da9\u0dab\u0db5"+
		"\u0db9\u0dc2\u0dc5\u0dd3\u0de7\u0deb\u0df2\u0df6\u0dfc\u0e0e\u0e28\u0e31"+
		"\u0e3a";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}