// Generated from D:/Work/Code/Intelij IDEA/SqlParser/src/main/resources\Sql92.g4 by ANTLR 4.x
package com.laudandjolynn.sqlparser;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class Sql92Parser extends Parser {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__1=1, T__0=2, WHITE_SPACE=3, TAB=4, NEWLINE=5, PLUS_SIGN=6, MINUS_SIGN=7, 
		DOUBLE_QUOTE=8, PERCENT=9, AMPERSAND=10, QUOTE=11, LEFT_PAREN=12, RIGHT_PAREN=13, 
		ASTERISK=14, COMMA=15, PERIOD=16, SOLIDUS=17, COLON=18, SEMICOLON=19, 
		LESS_THAN=20, LESS_THAN_OR_EQ=21, EQ=22, NOT_EQ=23, GREATER_THAN=24, GREATER_THAN_OR_EQ=25, 
		QUESTION_MARK=26, UNDERSCORE=27, VERTICAL_BAR=28, LEFT_BRACKET=29, RIGHT_BRACKET=30, 
		CONCATENATION=31, DOUBLE_PERIOD=32, ABSOLUTE=33, ACTION=34, ADA=35, ADD=36, 
		ALL=37, ALLOCATE=38, ALTER=39, AND=40, ANY=41, ARE=42, AS=43, ASC=44, 
		ASSERTION=45, AT=46, AUTHORIZATION=47, LAUTO=48, AVG=49, B_=50, BEGIN=51, 
		BETWEEN=52, BIT=53, BIT_LENGTH=54, BOTH=55, BY=56, C_=57, CASCADE=58, 
		CASCADED=59, CASE=60, CAST=61, CATALOG=62, CATALOG_NAME=63, LCHAR=64, 
		CHAR=65, CHARACTER=66, CHARACTER_LENGTH=67, CHARACTER_SET_CATALOG=68, 
		CHARACTER_SET_NAME=69, CHARACTER_SET_SCHEMA=70, CHAR_LENGTH=71, CHECK=72, 
		CLASS_ORIGIN=73, CLOSE=74, COALESCE=75, COBOL=76, COLLATE=77, COLLATION=78, 
		COLLATION_CATALOG=79, COLLATION_NAME=80, COLLATION_SCHEMA=81, COLUMN=82, 
		COLUMN_NAME=83, COMMAND_FUNCTION=84, COMMIT=85, COMMITTED=86, CONDITION_NUMBER=87, 
		CONNECT=88, CONNECTION=89, CONNECTION_NAME=90, CONST=91, CONSTRAINT=92, 
		CONSTRAINTS=93, CONSTRAINT_CATALOG=94, CONSTRAINT_NAME=95, CONSTRAINT_SCHEMA=96, 
		CONSTRATIN_CATALOG=97, CONTINUE=98, CONVERT=99, CORRESPONDING=100, COUNT=101, 
		CREATE=102, CROSS=103, CURRENT=104, CURRENT_DATE=105, CURRENT_TIME=106, 
		CURRENT_TIMESTAMP=107, CURRENT_USER=108, CURSOR=109, CURSOR_NAME=110, 
		DATA=111, DATE=112, DATETIME_INTERVAL_CODE=113, DATETIME_INTERVAL_PRECISION=114, 
		DAY=115, DEALLOCATE=116, DEC=117, DECIMAL=118, DECLARE=119, DEFAULT=120, 
		DEFERRABLE=121, DEFERRED=122, DELETE=123, DESC=124, DESCRIBE=125, DESCRIPTOR=126, 
		DIAGNOSTICS=127, DISCONNECT=128, DISTINCT=129, DOMAIN=130, DOUBLE=131, 
		LDOUBLE=132, DOUBLE_PRECISION=133, DROP=134, DYNAMIC_FUNCTION=135, EDITION1987=136, 
		EDITION1989=137, EDITION1992=138, ELSE=139, END=140, END_EXEC=141, ESCAPE=142, 
		EXCEPT=143, EXCEPTION=144, EXEC=145, EXECUTE=146, EXISTS=147, LEXTERN=148, 
		EXTERNAL=149, EXTRACT=150, FALSE=151, FETCH=152, FIRST=153, LFLOAT=154, 
		FLOAT=155, FOR=156, FOREIGN=157, FORTRAN=158, FOUND=159, FROM=160, FULL=161, 
		GET=162, GLOBAL=163, GO=164, GOTO=165, GRANT=166, GROUP=167, LGT=168, 
		HAVING=169, HIGH=170, HOUR=171, IDENTITY=172, IMMEDIATE=173, IN=174, INDICATOR=175, 
		INDICATOR_TYPE=176, INITIALLY=177, INNER=178, INPUT=179, INSENSITIVE=180, 
		INSERT=181, INT=182, INTEGER=183, INTEGRITYNO=184, INTEGRITYYES=185, INTERMEDIATE=186, 
		INTERSECT=187, INTERVAL=188, INTO=189, IS=190, LISO=191, ISOLATION=192, 
		JOIN=193, KEY=194, LANGUAGE=195, LAST=196, LEADING=197, LEFT=198, LENGTH=199, 
		LEVEL=200, LIKE=201, LOCAL=202, LLONG=203, LOW=204, LOWER=205, LLT=206, 
		MATCH=207, MAX=208, MESSAGE_LENGTH=209, MESSAGE_OCTET_LENGTH=210, MESSAGE_TEXT=211, 
		MIN=212, MINUTE=213, MODULE=214, MONTH=215, MORE=216, MUMPS=217, N_=218, 
		NAME=219, NAMES=220, NATIONAL=221, NATURAL=222, NCHAR=223, NEXT=224, NO=225, 
		NOT=226, NULL=227, NULLABLE=228, NULLIF=229, NUMBER=230, NUMERIC=231, 
		OCTET_LENGTH=232, OF=233, LOMITTED=234, ON=235, ONLY=236, OPEN=237, OPTION=238, 
		OR=239, ORDER=240, OUTER=241, OUTPUT=242, OVERLAPS=243, PAD=244, PARTIAL=245, 
		PASCAL=246, PLI=247, POSITION=248, PRECISION=249, PREPARE=250, PRESERVE=251, 
		PRIMARY=252, PRIOR=253, PRIVILEGES=254, PROCEDURE=255, PUBLIC=256, READ=257, 
		REAL=258, REFERENCES=259, RELATIVE=260, REPEATABLE=261, RESTRICT=262, 
		RETURNED_LENGTH=263, RETURNED_OCTET_LENGTH=264, RETURNED_SQLSTATE=265, 
		REVOKE=266, RIGHT=267, ROLLBACK=268, ROWS=269, ROW_COUNT=270, SCALE=271, 
		SCHEMA=272, SCHEMA_NAME=273, SCROLL=274, SECOND=275, SECTION=276, SELECT=277, 
		SERIALIZABLE=278, SERVER_NAME=279, SESSION=280, SESSION_USER=281, SET=282, 
		LSHORT=283, SIZE=284, SMALLINT=285, SOME=286, SPACE=287, SQL=288, SQLCODE=289, 
		SQLCODE_TYPE=290, SQLERROR=291, SQLSTATE=292, SQLSTATE_TYPE=293, SQL_STANDARD=294, 
		LSTANDARD=295, LSTATIC=296, SUBCLASS_ORIGIN=297, SUBSTRING=298, SUM=299, 
		SYSTEM_USER=300, TABLE=301, TABLE_NAME=302, TEMPORARY=303, THEN=304, TIME=305, 
		TIMESTAMP=306, TIMEZONE_HOUR=307, TIMEZONE_MINUTE=308, TO=309, TRAILING=310, 
		TRANSACTION=311, TRANSLATE=312, TRANSLATION=313, TRIM=314, TRUE=315, TYPE=316, 
		UNCOMMITTED=317, UNION=318, UNIQUE=319, UNKNOWN=320, UNNAMED=321, UPDATE=322, 
		UPPER=323, USAGE=324, USER=325, USING=326, VALUE=327, VALUES=328, VARCHAR=329, 
		VARYING=330, VIEW=331, LVOLATILE=332, WHEN=333, WHENEVER=334, WHERE=335, 
		WITH=336, WORK=337, WRITE=338, X_=339, YEAR=340, ZONE=341, SIGNED_INTEGER=342, 
		UNSIGNED_INTEGER=343, DECIMAL_LITERAL=344, APPROXIMATE_NUMERIC_LITERAL=345, 
		TIMESTAMP_STRING=346, DATE_STRING=347, DATE_VALUE=348, TIME_STRING=349, 
		TIME_VALUE=350, INTERVAL_STRING=351, COMMENT=352, QUOTE_BIT=353, QUOTE_HEX=354, 
		QUOTE_STRING=355, IDENTIFIER=356;
	public static final String[] tokenNames = {
		"<INVALID>", "'\"\"'", "'~\"'", "' '", "'\t'", "NEWLINE", "'+'", "'-'", 
		"'\"'", "'%'", "'&'", "'''", "'('", "')'", "'*'", "','", "'.'", "'/'", 
		"':'", "';'", "'<'", "'<='", "'='", "NOT_EQ", "'>'", "'>='", "'?'", "'_'", 
		"'|'", "'['", "']'", "'||'", "'..'", "ABSOLUTE", "ACTION", "ADA", "ADD", 
		"ALL", "ALLOCATE", "ALTER", "AND", "ANY", "ARE", "AS", "ASC", "ASSERTION", 
		"AT", "AUTHORIZATION", "'auto'", "AVG", "B_", "BEGIN", "BETWEEN", "BIT", 
		"BIT_LENGTH", "BOTH", "BY", "C_", "CASCADE", "CASCADED", "CASE", "CAST", 
		"CATALOG", "CATALOG_NAME", "'char'", "CHAR", "CHARACTER", "CHARACTER_LENGTH", 
		"CHARACTER_SET_CATALOG", "CHARACTER_SET_NAME", "CHARACTER_SET_SCHEMA", 
		"CHAR_LENGTH", "CHECK", "CLASS_ORIGIN", "CLOSE", "COALESCE", "COBOL", 
		"COLLATE", "COLLATION", "COLLATION_CATALOG", "COLLATION_NAME", "COLLATION_SCHEMA", 
		"COLUMN", "COLUMN_NAME", "COMMAND_FUNCTION", "COMMIT", "COMMITTED", "CONDITION_NUMBER", 
		"CONNECT", "CONNECTION", "CONNECTION_NAME", "'const'", "CONSTRAINT", "CONSTRAINTS", 
		"CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", "CONSTRATIN_CATALOG", 
		"CONTINUE", "CONVERT", "CORRESPONDING", "COUNT", "CREATE", "CROSS", "CURRENT", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", 
		"CURSOR_NAME", "DATA", "DATE", "DATETIME_INTERVAL_CODE", "DATETIME_INTERVAL_PRECISION", 
		"DAY", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFERRABLE", 
		"DEFERRED", "DELETE", "DESC", "DESCRIBE", "DESCRIPTOR", "DIAGNOSTICS", 
		"DISCONNECT", "DISTINCT", "DOMAIN", "DOUBLE", "'double'", "DOUBLE_PRECISION", 
		"DROP", "DYNAMIC_FUNCTION", "'edition1987'", "'edition1989'", "'edition1992'", 
		"ELSE", "END", "END_EXEC", "ESCAPE", "EXCEPT", "EXCEPTION", "EXEC", "EXECUTE", 
		"EXISTS", "'extern'", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIRST", 
		"'float'", "FLOAT", "FOR", "FOREIGN", "FORTRAN", "FOUND", "FROM", "FULL", 
		"GET", "GLOBAL", "GO", "GOTO", "GRANT", "GROUP", "'gt'", "HAVING", "HIGH", 
		"HOUR", "IDENTITY", "IMMEDIATE", "IN", "INDICATOR", "INDICATOR_TYPE", 
		"INITIALLY", "INNER", "INPUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", 
		"INTEGRITYNO", "INTEGRITYYES", "INTERMEDIATE", "INTERSECT", "INTERVAL", 
		"INTO", "IS", "'iso'", "ISOLATION", "JOIN", "KEY", "LANGUAGE", "LAST", 
		"LEADING", "LEFT", "LENGTH", "LEVEL", "LIKE", "LOCAL", "'long'", "LOW", 
		"LOWER", "'lt'", "MATCH", "MAX", "MESSAGE_LENGTH", "MESSAGE_OCTET_LENGTH", 
		"MESSAGE_TEXT", "MIN", "MINUTE", "MODULE", "MONTH", "MORE", "MUMPS", "N_", 
		"NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEXT", "NO", "NOT", 
		"NULL", "NULLABLE", "NULLIF", "NUMBER", "NUMERIC", "OCTET_LENGTH", "OF", 
		"'omitted'", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORDER", "OUTER", "OUTPUT", 
		"OVERLAPS", "PAD", "PARTIAL", "PASCAL", "PLI", "POSITION", "PRECISION", 
		"PREPARE", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURE", 
		"PUBLIC", "READ", "REAL", "REFERENCES", "RELATIVE", "REPEATABLE", "RESTRICT", 
		"RETURNED_LENGTH", "RETURNED_OCTET_LENGTH", "RETURNED_SQLSTATE", "REVOKE", 
		"RIGHT", "ROLLBACK", "ROWS", "ROW_COUNT", "SCALE", "SCHEMA", "SCHEMA_NAME", 
		"SCROLL", "SECOND", "SECTION", "SELECT", "SERIALIZABLE", "SERVER_NAME", 
		"SESSION", "SESSION_USER", "SET", "'short'", "SIZE", "SMALLINT", "SOME", 
		"SPACE", "SQL", "SQLCODE", "SQLCODE_TYPE", "SQLERROR", "SQLSTATE", "SQLSTATE_TYPE", 
		"SQL_STANDARD", "'standard'", "'static'", "SUBCLASS_ORIGIN", "SUBSTRING", 
		"SUM", "SYSTEM_USER", "TABLE", "TABLE_NAME", "TEMPORARY", "THEN", "TIME", 
		"TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING", "TRANSACTION", 
		"TRANSLATE", "TRANSLATION", "TRIM", "TRUE", "TYPE", "UNCOMMITTED", "UNION", 
		"UNIQUE", "UNKNOWN", "UNNAMED", "UPDATE", "UPPER", "USAGE", "USER", "USING", 
		"VALUE", "VALUES", "VARCHAR", "VARYING", "VIEW", "'volatile'", "WHEN", 
		"WHENEVER", "WHERE", "WITH", "WORK", "WRITE", "X_", "YEAR", "ZONE", "SIGNED_INTEGER", 
		"UNSIGNED_INTEGER", "DECIMAL_LITERAL", "APPROXIMATE_NUMERIC_LITERAL", 
		"TIMESTAMP_STRING", "DATE_STRING", "DATE_VALUE", "TIME_STRING", "TIME_VALUE", 
		"INTERVAL_STRING", "COMMENT", "QUOTE_BIT", "QUOTE_HEX", "QUOTE_STRING", 
		"IDENTIFIER"
	};
	public static final int
		RULE_prog = 0, RULE_statement = 1, RULE_direct_sql_statement = 2, RULE_direct_sql_data_statement = 3, 
		RULE_prepable_statement = 4, RULE_prepable_sql_data_statement = 5, RULE_dynamic_single_row_select_statement = 6, 
		RULE_dynamic_select_statement = 7, RULE_prepable_dynamic_delete_statement_positioned = 8, 
		RULE_prepable_dynamic_update_statement_positioned = 9, RULE_prepable_sql_schema_statement = 10, 
		RULE_prepable_sql_transaction_statement = 11, RULE_prepable_sql_session_statement = 12, 
		RULE_sql_schema_statement = 13, RULE_sql_schema_definition_statement = 14, 
		RULE_schema_definition = 15, RULE_schema_name_clause = 16, RULE_schema_authorization_identifier = 17, 
		RULE_schema_character_set_specification = 18, RULE_schema_character_set_name = 19, 
		RULE_schema_element = 20, RULE_table_definition = 21, RULE_view_definition = 22, 
		RULE_view_column_list = 23, RULE_levels_clause = 24, RULE_domain_definition = 25, 
		RULE_domain_constraint = 26, RULE_assertion_definition = 27, RULE_assertion_check = 28, 
		RULE_character_set_definition = 29, RULE_character_set_source = 30, RULE_existing_character_set_name = 31, 
		RULE_grant_definition = 32, RULE_privileges = 33, RULE_action_list = 34, 
		RULE_action = 35, RULE_privileges_column_list = 36, RULE_object_name = 37, 
		RULE_grantee = 38, RULE_collation_definition = 39, RULE_collation_source = 40, 
		RULE_collation_sequence_definition = 41, RULE_external_collation = 42, 
		RULE_external_collation_name = 43, RULE_standard_collation_name = 44, 
		RULE_implementation_defined_collation_name = 45, RULE_schema_collation_name = 46, 
		RULE_translation_collation = 47, RULE_limited_collation_definition = 48, 
		RULE_pad_attribute = 49, RULE_translation_definition = 50, RULE_source_character_set_specification = 51, 
		RULE_target_character_set_specification = 52, RULE_translation_source = 53, 
		RULE_translation_specification = 54, RULE_external_translation = 55, RULE_external_translation_name = 56, 
		RULE_standard_translation_name = 57, RULE_implementation_defined_translation_name = 58, 
		RULE_schema_translation_name = 59, RULE_sql_schema_manipulation_statement = 60, 
		RULE_drop_schema_statement = 61, RULE_drop_behaviour = 62, RULE_alter_table_statement = 63, 
		RULE_alter_table_action = 64, RULE_add_column_definition = 65, RULE_add_table_constraint_definition = 66, 
		RULE_alter_column_definition = 67, RULE_alter_column_action = 68, RULE_set_column_default_clause = 69, 
		RULE_drop_column_default_clause = 70, RULE_drop_column_definition = 71, 
		RULE_drop_table_constraint_definition = 72, RULE_drop_table_statement = 73, 
		RULE_drop_view_statement = 74, RULE_revoke_statement = 75, RULE_drop_domain_statement = 76, 
		RULE_drop_character_set_statement = 77, RULE_drop_collation_statement = 78, 
		RULE_drop_translation_statement = 79, RULE_drop_assertion_statement = 80, 
		RULE_alter_domain_statement = 81, RULE_alter_domain_action = 82, RULE_set_domain_default_clause = 83, 
		RULE_drop_domain_default_clause = 84, RULE_add_domain_constraint_definition = 85, 
		RULE_drop_domain_constraint_definition = 86, RULE_sql_data_statement = 87, 
		RULE_open_statement = 88, RULE_fetch_statement = 89, RULE_fetch_orientation = 90, 
		RULE_simple_value_specification = 91, RULE_fetch_target_list = 92, RULE_target_specification = 93, 
		RULE_close_statement = 94, RULE_select_statement_single_row = 95, RULE_direct_select_statement_multiple_rows = 96, 
		RULE_select_list = 97, RULE_select_sublists = 98, RULE_select_sublist = 99, 
		RULE_derived_column = 100, RULE_select_target_list = 101, RULE_table_expression = 102, 
		RULE_from_clause = 103, RULE_table_reference = 104, RULE_normal_table = 105, 
		RULE_joined_table = 106, RULE_correlation_specification = 107, RULE_derived_column_list = 108, 
		RULE_derived_table = 109, RULE_join_type = 110, RULE_outer_join_type = 111, 
		RULE_join_specification = 112, RULE_join_condition = 113, RULE_named_columns_join = 114, 
		RULE_join_column_list = 115, RULE_where_clause = 116, RULE_having_clause = 117, 
		RULE_sql_data_change_statement = 118, RULE_delete_statement_positioned = 119, 
		RULE_delete_statement_searched = 120, RULE_insert_statement = 121, RULE_insert_columns_and_source = 122, 
		RULE_insert_column_list = 123, RULE_update_statement_position = 124, RULE_set_clause_list = 125, 
		RULE_set_clause = 126, RULE_object_column = 127, RULE_update_source = 128, 
		RULE_update_statement_searched = 129, RULE_sql_transaction_statement = 130, 
		RULE_set_transaction_statement = 131, RULE_trasaction_mode = 132, RULE_isolation_level = 133, 
		RULE_level_of_isolation = 134, RULE_transaction_access_mode = 135, RULE_diagnostics_size = 136, 
		RULE_number_of_conditions = 137, RULE_set_constraints_mode_statement = 138, 
		RULE_constraint_name_list = 139, RULE_commit_statement = 140, RULE_rollback_statement = 141, 
		RULE_sql_connection_statement = 142, RULE_connect_statement = 143, RULE_connection_target = 144, 
		RULE_sql_server_name = 145, RULE_connection_name = 146, RULE_user_name = 147, 
		RULE_set_connection_statement = 148, RULE_connection_object = 149, RULE_disconnect_statement = 150, 
		RULE_disconnect_object = 151, RULE_sql_session_statement = 152, RULE_set_catalog_statement = 153, 
		RULE_value_specification = 154, RULE_set_schema_statement = 155, RULE_set_names_statement = 156, 
		RULE_set_session_authorization_identifier_statement = 157, RULE_set_local_time_zone_statement = 158, 
		RULE_set_time_zone_value = 159, RULE_sql_dynamic_statement = 160, RULE_system_descriptor_statement = 161, 
		RULE_allocate_descriptor_statement = 162, RULE_descriptor_name = 163, 
		RULE_scope_option = 164, RULE_occurences = 165, RULE_deallocate_descriptor_statement = 166, 
		RULE_set_descriptor_statement = 167, RULE_set_descriptor_information = 168, 
		RULE_set_count = 169, RULE_simple_value_specification_1 = 170, RULE_item_number = 171, 
		RULE_set_item_information = 172, RULE_descriptor_item_name = 173, RULE_simple_value_specification_2 = 174, 
		RULE_get_descriptor_statement = 175, RULE_get_descriptor_information = 176, 
		RULE_get_count = 177, RULE_simple_target_specification_1 = 178, RULE_get_item_information = 179, 
		RULE_simple_target_specification_2 = 180, RULE_prepare_statement = 181, 
		RULE_sql_statement_name = 182, RULE_extended_statement_name = 183, RULE_sql_statement_variable = 184, 
		RULE_deallocate_prepared_statement = 185, RULE_describe_statement = 186, 
		RULE_describe_input_statement = 187, RULE_using_descriptor = 188, RULE_describe_output_statement = 189, 
		RULE_execute_statement = 190, RULE_result_using_clause = 191, RULE_parameter_using_clause = 192, 
		RULE_using_clause = 193, RULE_using_arguments = 194, RULE_argument = 195, 
		RULE_execute_immediate_statemnet = 196, RULE_sql_dynamic_data_statement = 197, 
		RULE_allocate_cursor_statement = 198, RULE_extended_cursor_name = 199, 
		RULE_dynamic_open_statement = 200, RULE_dynamic_cursor_name = 201, RULE_dynamic_close_statement = 202, 
		RULE_dynamic_fetch_statement = 203, RULE_dynamic_delete_statement_positioned = 204, 
		RULE_dynamic_update_statement_positioned = 205, RULE_sql_diagnostics_statement = 206, 
		RULE_get_diagnostics_statement = 207, RULE_sql_diagnostics_information = 208, 
		RULE_statement_information = 209, RULE_statement_information_item = 210, 
		RULE_statement_information_item_name = 211, RULE_condition_information = 212, 
		RULE_condition_number = 213, RULE_condition_information_item = 214, RULE_condition_information_item_name = 215, 
		RULE_subquery = 216, RULE_query_expression = 217, RULE_non_join_query_expression = 218, 
		RULE_query_set_rel = 219, RULE_query_primary = 220, RULE_query_term = 221, 
		RULE_query_intersect_rel = 222, RULE_corresponding_spec = 223, RULE_corresponding_column_list = 224, 
		RULE_simple_table = 225, RULE_query_specification = 226, RULE_table_value_constructor = 227, 
		RULE_table_value_constructor_list = 228, RULE_explicit_table = 229, RULE_table_element_list = 230, 
		RULE_table_element = 231, RULE_column_definition = 232, RULE_column_constraint_definition = 233, 
		RULE_column_constraint = 234, RULE_check_constraint_definition = 235, 
		RULE_table_constraint_definition = 236, RULE_table_constraint = 237, RULE_search_condition = 238, 
		RULE_predicate = 239, RULE_comparision_predicate = 240, RULE_between_predicate = 241, 
		RULE_in_predicate = 242, RULE_in_predicate_value = 243, RULE_in_value_list = 244, 
		RULE_like_predicate = 245, RULE_match_value = 246, RULE_pattern = 247, 
		RULE_escape_character = 248, RULE_null_predicate = 249, RULE_quantified_comparision_predicate = 250, 
		RULE_exists_predicate = 251, RULE_table_subquery = 252, RULE_match_predicate = 253, 
		RULE_overlaps_predicate = 254, RULE_row_value_constructor = 255, RULE_row_value_constructor_element = 256, 
		RULE_row_value_constructor_list = 257, RULE_row_subquery = 258, RULE_value_expression = 259, 
		RULE_numeric_value_expression = 260, RULE_term = 261, RULE_factor = 262, 
		RULE_numeric_primary = 263, RULE_value_expression_primary = 264, RULE_set_function_specification = 265, 
		RULE_general_set_function = 266, RULE_scalar_subquery = 267, RULE_case_expression = 268, 
		RULE_cast_specification = 269, RULE_string_value_expression = 270, RULE_datetime_value_expression = 271, 
		RULE_interval_value_expression = 272, RULE_datetime_term = 273, RULE_datetime_factor = 274, 
		RULE_datetime_primary = 275, RULE_time_zone = 276, RULE_time_zone_specifier = 277, 
		RULE_interval_term = 278, RULE_interval_factor = 279, RULE_interval_primary = 280, 
		RULE_case_abbreviation = 281, RULE_case_specification = 282, RULE_simple_case = 283, 
		RULE_searched_case = 284, RULE_case_operand = 285, RULE_simple_when_clause = 286, 
		RULE_else_clause = 287, RULE_when_operand = 288, RULE_result = 289, RULE_result_expression = 290, 
		RULE_searched_when_clause = 291, RULE_cast_operand = 292, RULE_numeric_value_function = 293, 
		RULE_position_expression = 294, RULE_extract_expression = 295, RULE_extract_source = 296, 
		RULE_length_expression = 297, RULE_char_length_expression = 298, RULE_octet_length_expression = 299, 
		RULE_bit_length_expression = 300, RULE_character_value_expression = 301, 
		RULE_character_factor = 302, RULE_character_primary = 303, RULE_string_value_function = 304, 
		RULE_character_value_function = 305, RULE_bit_value_function = 306, RULE_character_substring_function = 307, 
		RULE_start_position = 308, RULE_string_length = 309, RULE_fold = 310, 
		RULE_character_translation = 311, RULE_trim_function = 312, RULE_trim_operands = 313, 
		RULE_trim_character = 314, RULE_trim_source = 315, RULE_bit_substring_function = 316, 
		RULE_bit_value_expression = 317, RULE_bit_factor = 318, RULE_bit_primary = 319, 
		RULE_procedure = 320, RULE_procedure_name = 321, RULE_parameter_declaration_list = 322, 
		RULE_parameter_declaration = 323, RULE_status_parameter = 324, RULE_sql_procedure_statement = 325, 
		RULE_module = 326, RULE_module_contents = 327, RULE_module_name_clause = 328, 
		RULE_module_name = 329, RULE_module_character_set_specification = 330, 
		RULE_module_authorization_clause = 331, RULE_module_authorization_identifier = 332, 
		RULE_temporary_table_declaration = 333, RULE_declare_cursor = 334, RULE_cursor_specification = 335, 
		RULE_dynamic_declare_cursor = 336, RULE_identifier = 337, RULE_actual_identifier = 338, 
		RULE_regular_identifier = 339, RULE_delimited_identifier = 340, RULE_delimited_identifier_body = 341, 
		RULE_delimited_identifier_part = 342, RULE_schema_name = 343, RULE_catalog_name = 344, 
		RULE_character_string_literal = 345, RULE_character_set_name = 346, RULE_character_set_specification = 347, 
		RULE_standard_character_repertoire_name = 348, RULE_table_name = 349, 
		RULE_constraint_name_definition = 350, RULE_constraint_name = 351, RULE_unique_specification = 352, 
		RULE_references_specification = 353, RULE_referenced_table_and_columns = 354, 
		RULE_reference_column_list = 355, RULE_match_type = 356, RULE_referential_triggered_action = 357, 
		RULE_update_rule = 358, RULE_delete_rule = 359, RULE_referential_action = 360, 
		RULE_constraint_attributes = 361, RULE_constraint_check_time = 362, RULE_unique_constraint_definition = 363, 
		RULE_unique_column_list = 364, RULE_referential_constraint_definition = 365, 
		RULE_referencing_columns = 366, RULE_collate_clause = 367, RULE_collation_name = 368, 
		RULE_as_clause = 369, RULE_group_by_clause = 370, RULE_grouping_column_reference_list = 371, 
		RULE_grouping_column_reference = 372, RULE_order_by_clause = 373, RULE_sort_specification_list = 374, 
		RULE_sort_specification = 375, RULE_sort_key = 376, RULE_ordering_specification = 377, 
		RULE_updatability_clause = 378, RULE_default_clause = 379, RULE_default_option = 380, 
		RULE_literal = 381, RULE_unsigned_literal = 382, RULE_general_literal = 383, 
		RULE_national_character_string_literal = 384, RULE_bit_string_literal = 385, 
		RULE_hex_string_literal = 386, RULE_datetime_literal = 387, RULE_date_literal = 388, 
		RULE_time_literal = 389, RULE_timestamp_literal = 390, RULE_interval_literal = 391, 
		RULE_datetime_value_function = 392, RULE_current_date_value_function = 393, 
		RULE_current_time_value_function = 394, RULE_current_timestamp_value_function = 395, 
		RULE_column_name = 396, RULE_column_name_list = 397, RULE_data_type = 398, 
		RULE_character_string_type = 399, RULE_national_character_string_type = 400, 
		RULE_bit_string_type = 401, RULE_numeric_type = 402, RULE_exact_numeric_type = 403, 
		RULE_approximate_numeric_type = 404, RULE_datetime_type = 405, RULE_time_fractional_seconds_precision = 406, 
		RULE_time_precision = 407, RULE_timestamp_precision = 408, RULE_interval_type = 409, 
		RULE_interval_qualifier = 410, RULE_start_field = 411, RULE_non_second_datetime_field = 412, 
		RULE_interval_leading_field_precision = 413, RULE_end_field = 414, RULE_interval_fractional_seconds_precision = 415, 
		RULE_sigle_datetime_field = 416, RULE_general_value_specification = 417, 
		RULE_parameter_specification = 418, RULE_indicator_parameter = 419, RULE_dynamic_parameter_specification = 420, 
		RULE_variable_specification = 421, RULE_indicator_variable = 422, RULE_embedded_variable_name = 423, 
		RULE_host_identifier = 424, RULE_general_identifier = 425, RULE_ada_host_identifier = 426, 
		RULE_c_host_identifier = 427, RULE_cobol_host_identifier = 428, RULE_fortran_host_identifier = 429, 
		RULE_mumps_host_identifier = 430, RULE_pascal_host_identifier = 431, RULE_pli_host_identifier = 432, 
		RULE_simple_target_specification = 433, RULE_unsigned_value_specification = 434, 
		RULE_language_clause = 435, RULE_language_name = 436, RULE_extract_field = 437, 
		RULE_datetime_field = 438, RULE_time_zone_field = 439, RULE_cast_target = 440, 
		RULE_trim_specification = 441, RULE_truth_value = 442, RULE_null_specification = 443, 
		RULE_default_specification = 444, RULE_comp_op = 445, RULE_set_function_type = 446, 
		RULE_set_qualifier = 447, RULE_quantifier = 448, RULE_all = 449, RULE_some = 450, 
		RULE_length = 451, RULE_precision = 452, RULE_scale = 453, RULE_authorization_identifier = 454, 
		RULE_cursor_name = 455, RULE_correlation_name = 456, RULE_statement_name = 457, 
		RULE_qualified_identifier = 458, RULE_local_table_name = 459, RULE_qualified_local_table_name = 460, 
		RULE_column_reference = 461, RULE_domain_name = 462, RULE_qualified_name = 463, 
		RULE_parameter_name = 464, RULE_form_of_use_conversion = 465, RULE_translation_name = 466, 
		RULE_nondoublequote_character = 467, RULE_doublequote_symbol = 468, RULE_sign = 469, 
		RULE_seperator = 470, RULE_keywords = 471, RULE_sql_language_identifier = 472;
	public static final String[] ruleNames = {
		"prog", "statement", "direct_sql_statement", "direct_sql_data_statement", 
		"prepable_statement", "prepable_sql_data_statement", "dynamic_single_row_select_statement", 
		"dynamic_select_statement", "prepable_dynamic_delete_statement_positioned", 
		"prepable_dynamic_update_statement_positioned", "prepable_sql_schema_statement", 
		"prepable_sql_transaction_statement", "prepable_sql_session_statement", 
		"sql_schema_statement", "sql_schema_definition_statement", "schema_definition", 
		"schema_name_clause", "schema_authorization_identifier", "schema_character_set_specification", 
		"schema_character_set_name", "schema_element", "table_definition", "view_definition", 
		"view_column_list", "levels_clause", "domain_definition", "domain_constraint", 
		"assertion_definition", "assertion_check", "character_set_definition", 
		"character_set_source", "existing_character_set_name", "grant_definition", 
		"privileges", "action_list", "action", "privileges_column_list", "object_name", 
		"grantee", "collation_definition", "collation_source", "collation_sequence_definition", 
		"external_collation", "external_collation_name", "standard_collation_name", 
		"implementation_defined_collation_name", "schema_collation_name", "translation_collation", 
		"limited_collation_definition", "pad_attribute", "translation_definition", 
		"source_character_set_specification", "target_character_set_specification", 
		"translation_source", "translation_specification", "external_translation", 
		"external_translation_name", "standard_translation_name", "implementation_defined_translation_name", 
		"schema_translation_name", "sql_schema_manipulation_statement", "drop_schema_statement", 
		"drop_behaviour", "alter_table_statement", "alter_table_action", "add_column_definition", 
		"add_table_constraint_definition", "alter_column_definition", "alter_column_action", 
		"set_column_default_clause", "drop_column_default_clause", "drop_column_definition", 
		"drop_table_constraint_definition", "drop_table_statement", "drop_view_statement", 
		"revoke_statement", "drop_domain_statement", "drop_character_set_statement", 
		"drop_collation_statement", "drop_translation_statement", "drop_assertion_statement", 
		"alter_domain_statement", "alter_domain_action", "set_domain_default_clause", 
		"drop_domain_default_clause", "add_domain_constraint_definition", "drop_domain_constraint_definition", 
		"sql_data_statement", "open_statement", "fetch_statement", "fetch_orientation", 
		"simple_value_specification", "fetch_target_list", "target_specification", 
		"close_statement", "select_statement_single_row", "direct_select_statement_multiple_rows", 
		"select_list", "select_sublists", "select_sublist", "derived_column", 
		"select_target_list", "table_expression", "from_clause", "table_reference", 
		"normal_table", "joined_table", "correlation_specification", "derived_column_list", 
		"derived_table", "join_type", "outer_join_type", "join_specification", 
		"join_condition", "named_columns_join", "join_column_list", "where_clause", 
		"having_clause", "sql_data_change_statement", "delete_statement_positioned", 
		"delete_statement_searched", "insert_statement", "insert_columns_and_source", 
		"insert_column_list", "update_statement_position", "set_clause_list", 
		"set_clause", "object_column", "update_source", "update_statement_searched", 
		"sql_transaction_statement", "set_transaction_statement", "trasaction_mode", 
		"isolation_level", "level_of_isolation", "transaction_access_mode", "diagnostics_size", 
		"number_of_conditions", "set_constraints_mode_statement", "constraint_name_list", 
		"commit_statement", "rollback_statement", "sql_connection_statement", 
		"connect_statement", "connection_target", "sql_server_name", "connection_name", 
		"user_name", "set_connection_statement", "connection_object", "disconnect_statement", 
		"disconnect_object", "sql_session_statement", "set_catalog_statement", 
		"value_specification", "set_schema_statement", "set_names_statement", 
		"set_session_authorization_identifier_statement", "set_local_time_zone_statement", 
		"set_time_zone_value", "sql_dynamic_statement", "system_descriptor_statement", 
		"allocate_descriptor_statement", "descriptor_name", "scope_option", "occurences", 
		"deallocate_descriptor_statement", "set_descriptor_statement", "set_descriptor_information", 
		"set_count", "simple_value_specification_1", "item_number", "set_item_information", 
		"descriptor_item_name", "simple_value_specification_2", "get_descriptor_statement", 
		"get_descriptor_information", "get_count", "simple_target_specification_1", 
		"get_item_information", "simple_target_specification_2", "prepare_statement", 
		"sql_statement_name", "extended_statement_name", "sql_statement_variable", 
		"deallocate_prepared_statement", "describe_statement", "describe_input_statement", 
		"using_descriptor", "describe_output_statement", "execute_statement", 
		"result_using_clause", "parameter_using_clause", "using_clause", "using_arguments", 
		"argument", "execute_immediate_statemnet", "sql_dynamic_data_statement", 
		"allocate_cursor_statement", "extended_cursor_name", "dynamic_open_statement", 
		"dynamic_cursor_name", "dynamic_close_statement", "dynamic_fetch_statement", 
		"dynamic_delete_statement_positioned", "dynamic_update_statement_positioned", 
		"sql_diagnostics_statement", "get_diagnostics_statement", "sql_diagnostics_information", 
		"statement_information", "statement_information_item", "statement_information_item_name", 
		"condition_information", "condition_number", "condition_information_item", 
		"condition_information_item_name", "subquery", "query_expression", "non_join_query_expression", 
		"query_set_rel", "query_primary", "query_term", "query_intersect_rel", 
		"corresponding_spec", "corresponding_column_list", "simple_table", "query_specification", 
		"table_value_constructor", "table_value_constructor_list", "explicit_table", 
		"table_element_list", "table_element", "column_definition", "column_constraint_definition", 
		"column_constraint", "check_constraint_definition", "table_constraint_definition", 
		"table_constraint", "search_condition", "predicate", "comparision_predicate", 
		"between_predicate", "in_predicate", "in_predicate_value", "in_value_list", 
		"like_predicate", "match_value", "pattern", "escape_character", "null_predicate", 
		"quantified_comparision_predicate", "exists_predicate", "table_subquery", 
		"match_predicate", "overlaps_predicate", "row_value_constructor", "row_value_constructor_element", 
		"row_value_constructor_list", "row_subquery", "value_expression", "numeric_value_expression", 
		"term", "factor", "numeric_primary", "value_expression_primary", "set_function_specification", 
		"general_set_function", "scalar_subquery", "case_expression", "cast_specification", 
		"string_value_expression", "datetime_value_expression", "interval_value_expression", 
		"datetime_term", "datetime_factor", "datetime_primary", "time_zone", "time_zone_specifier", 
		"interval_term", "interval_factor", "interval_primary", "case_abbreviation", 
		"case_specification", "simple_case", "searched_case", "case_operand", 
		"simple_when_clause", "else_clause", "when_operand", "result", "result_expression", 
		"searched_when_clause", "cast_operand", "numeric_value_function", "position_expression", 
		"extract_expression", "extract_source", "length_expression", "char_length_expression", 
		"octet_length_expression", "bit_length_expression", "character_value_expression", 
		"character_factor", "character_primary", "string_value_function", "character_value_function", 
		"bit_value_function", "character_substring_function", "start_position", 
		"string_length", "fold", "character_translation", "trim_function", "trim_operands", 
		"trim_character", "trim_source", "bit_substring_function", "bit_value_expression", 
		"bit_factor", "bit_primary", "procedure", "procedure_name", "parameter_declaration_list", 
		"parameter_declaration", "status_parameter", "sql_procedure_statement", 
		"module", "module_contents", "module_name_clause", "module_name", "module_character_set_specification", 
		"module_authorization_clause", "module_authorization_identifier", "temporary_table_declaration", 
		"declare_cursor", "cursor_specification", "dynamic_declare_cursor", "identifier", 
		"actual_identifier", "regular_identifier", "delimited_identifier", "delimited_identifier_body", 
		"delimited_identifier_part", "schema_name", "catalog_name", "character_string_literal", 
		"character_set_name", "character_set_specification", "standard_character_repertoire_name", 
		"table_name", "constraint_name_definition", "constraint_name", "unique_specification", 
		"references_specification", "referenced_table_and_columns", "reference_column_list", 
		"match_type", "referential_triggered_action", "update_rule", "delete_rule", 
		"referential_action", "constraint_attributes", "constraint_check_time", 
		"unique_constraint_definition", "unique_column_list", "referential_constraint_definition", 
		"referencing_columns", "collate_clause", "collation_name", "as_clause", 
		"group_by_clause", "grouping_column_reference_list", "grouping_column_reference", 
		"order_by_clause", "sort_specification_list", "sort_specification", "sort_key", 
		"ordering_specification", "updatability_clause", "default_clause", "default_option", 
		"literal", "unsigned_literal", "general_literal", "national_character_string_literal", 
		"bit_string_literal", "hex_string_literal", "datetime_literal", "date_literal", 
		"time_literal", "timestamp_literal", "interval_literal", "datetime_value_function", 
		"current_date_value_function", "current_time_value_function", "current_timestamp_value_function", 
		"column_name", "column_name_list", "data_type", "character_string_type", 
		"national_character_string_type", "bit_string_type", "numeric_type", "exact_numeric_type", 
		"approximate_numeric_type", "datetime_type", "time_fractional_seconds_precision", 
		"time_precision", "timestamp_precision", "interval_type", "interval_qualifier", 
		"start_field", "non_second_datetime_field", "interval_leading_field_precision", 
		"end_field", "interval_fractional_seconds_precision", "sigle_datetime_field", 
		"general_value_specification", "parameter_specification", "indicator_parameter", 
		"dynamic_parameter_specification", "variable_specification", "indicator_variable", 
		"embedded_variable_name", "host_identifier", "general_identifier", "ada_host_identifier", 
		"c_host_identifier", "cobol_host_identifier", "fortran_host_identifier", 
		"mumps_host_identifier", "pascal_host_identifier", "pli_host_identifier", 
		"simple_target_specification", "unsigned_value_specification", "language_clause", 
		"language_name", "extract_field", "datetime_field", "time_zone_field", 
		"cast_target", "trim_specification", "truth_value", "null_specification", 
		"default_specification", "comp_op", "set_function_type", "set_qualifier", 
		"quantifier", "all", "some", "length", "precision", "scale", "authorization_identifier", 
		"cursor_name", "correlation_name", "statement_name", "qualified_identifier", 
		"local_table_name", "qualified_local_table_name", "column_reference", 
		"domain_name", "qualified_name", "parameter_name", "form_of_use_conversion", 
		"translation_name", "nondoublequote_character", "doublequote_symbol", 
		"sign", "seperator", "keywords", "sql_language_identifier"
	};

	@Override
	public String getGrammarFileName() { return "Sql92.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public Sql92Parser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ProgContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode EOF() { return getToken(Sql92Parser.EOF, 0); }
		public List<TerminalNode> SEMICOLON() { return getTokens(Sql92Parser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(Sql92Parser.SEMICOLON, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterProg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitProg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitProg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgContext prog() throws RecognitionException {
		ProgContext _localctx = new ProgContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(946); statement();
			setState(950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				setState(947); match(SEMICOLON);
				}
				}
				setState(952);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(953); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Prepable_statementContext prepable_statement() {
			return getRuleContext(Prepable_statementContext.class,0);
		}
		public ModuleContext module() {
			return getRuleContext(ModuleContext.class,0);
		}
		public ProcedureContext procedure() {
			return getRuleContext(ProcedureContext.class,0);
		}
		public Direct_sql_statementContext direct_sql_statement() {
			return getRuleContext(Direct_sql_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			setState(959);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(955); direct_sql_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(956); prepable_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(957); procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(958); module();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Direct_sql_statementContext extends ParserRuleContext {
		public Sql_schema_statementContext sql_schema_statement() {
			return getRuleContext(Sql_schema_statementContext.class,0);
		}
		public Sql_transaction_statementContext sql_transaction_statement() {
			return getRuleContext(Sql_transaction_statementContext.class,0);
		}
		public Sql_session_statementContext sql_session_statement() {
			return getRuleContext(Sql_session_statementContext.class,0);
		}
		public Sql_connection_statementContext sql_connection_statement() {
			return getRuleContext(Sql_connection_statementContext.class,0);
		}
		public Direct_sql_data_statementContext direct_sql_data_statement() {
			return getRuleContext(Direct_sql_data_statementContext.class,0);
		}
		public Direct_sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direct_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDirect_sql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDirect_sql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDirect_sql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Direct_sql_statementContext direct_sql_statement() throws RecognitionException {
		Direct_sql_statementContext _localctx = new Direct_sql_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_direct_sql_statement);
		try {
			setState(966);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(961); direct_sql_data_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(962); sql_schema_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(963); sql_transaction_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(964); sql_connection_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(965); sql_session_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Direct_sql_data_statementContext extends ParserRuleContext {
		public Delete_statement_searchedContext delete_statement_searched() {
			return getRuleContext(Delete_statement_searchedContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Update_statement_searchedContext update_statement_searched() {
			return getRuleContext(Update_statement_searchedContext.class,0);
		}
		public Temporary_table_declarationContext temporary_table_declaration() {
			return getRuleContext(Temporary_table_declarationContext.class,0);
		}
		public Direct_select_statement_multiple_rowsContext direct_select_statement_multiple_rows() {
			return getRuleContext(Direct_select_statement_multiple_rowsContext.class,0);
		}
		public Direct_sql_data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direct_sql_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDirect_sql_data_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDirect_sql_data_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDirect_sql_data_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Direct_sql_data_statementContext direct_sql_data_statement() throws RecognitionException {
		Direct_sql_data_statementContext _localctx = new Direct_sql_data_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_direct_sql_data_statement);
		try {
			setState(973);
			switch (_input.LA(1)) {
			case DELETE:
				enterOuterAlt(_localctx, 1);
				{
				setState(968); delete_statement_searched();
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(969); direct_select_statement_multiple_rows();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 3);
				{
				setState(970); insert_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(971); update_statement_searched();
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 5);
				{
				setState(972); temporary_table_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepable_statementContext extends ParserRuleContext {
		public Prepable_sql_transaction_statementContext prepable_sql_transaction_statement() {
			return getRuleContext(Prepable_sql_transaction_statementContext.class,0);
		}
		public Prepable_sql_data_statementContext prepable_sql_data_statement() {
			return getRuleContext(Prepable_sql_data_statementContext.class,0);
		}
		public Prepable_sql_schema_statementContext prepable_sql_schema_statement() {
			return getRuleContext(Prepable_sql_schema_statementContext.class,0);
		}
		public Prepable_sql_session_statementContext prepable_sql_session_statement() {
			return getRuleContext(Prepable_sql_session_statementContext.class,0);
		}
		public Prepable_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepable_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepable_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepable_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepable_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepable_statementContext prepable_statement() throws RecognitionException {
		Prepable_statementContext _localctx = new Prepable_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_prepable_statement);
		try {
			setState(979);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(975); prepable_sql_data_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(976); prepable_sql_schema_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(977); prepable_sql_transaction_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(978); prepable_sql_session_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepable_sql_data_statementContext extends ParserRuleContext {
		public Dynamic_select_statementContext dynamic_select_statement() {
			return getRuleContext(Dynamic_select_statementContext.class,0);
		}
		public Delete_statement_searchedContext delete_statement_searched() {
			return getRuleContext(Delete_statement_searchedContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Update_statement_searchedContext update_statement_searched() {
			return getRuleContext(Update_statement_searchedContext.class,0);
		}
		public Prepable_dynamic_delete_statement_positionedContext prepable_dynamic_delete_statement_positioned() {
			return getRuleContext(Prepable_dynamic_delete_statement_positionedContext.class,0);
		}
		public Dynamic_single_row_select_statementContext dynamic_single_row_select_statement() {
			return getRuleContext(Dynamic_single_row_select_statementContext.class,0);
		}
		public Prepable_dynamic_update_statement_positionedContext prepable_dynamic_update_statement_positioned() {
			return getRuleContext(Prepable_dynamic_update_statement_positionedContext.class,0);
		}
		public Prepable_sql_data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepable_sql_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepable_sql_data_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepable_sql_data_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepable_sql_data_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepable_sql_data_statementContext prepable_sql_data_statement() throws RecognitionException {
		Prepable_sql_data_statementContext _localctx = new Prepable_sql_data_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_prepable_sql_data_statement);
		try {
			setState(988);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(981); delete_statement_searched();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(982); dynamic_single_row_select_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(983); insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(984); dynamic_select_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(985); update_statement_searched();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(986); prepable_dynamic_delete_statement_positioned();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(987); prepable_dynamic_update_statement_positioned();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_single_row_select_statementContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Dynamic_single_row_select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_single_row_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_single_row_select_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_single_row_select_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_single_row_select_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_single_row_select_statementContext dynamic_single_row_select_statement() throws RecognitionException {
		Dynamic_single_row_select_statementContext _localctx = new Dynamic_single_row_select_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_dynamic_single_row_select_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(990); query_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_select_statementContext extends ParserRuleContext {
		public Cursor_specificationContext cursor_specification() {
			return getRuleContext(Cursor_specificationContext.class,0);
		}
		public Dynamic_select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_select_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_select_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_select_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_select_statementContext dynamic_select_statement() throws RecognitionException {
		Dynamic_select_statementContext _localctx = new Dynamic_select_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_dynamic_select_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(992); cursor_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepable_dynamic_delete_statement_positionedContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(Sql92Parser.OF, 0); }
		public TerminalNode CURRENT() { return getToken(Sql92Parser.CURRENT, 0); }
		public TerminalNode DELETE() { return getToken(Sql92Parser.DELETE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Prepable_dynamic_delete_statement_positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepable_dynamic_delete_statement_positioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepable_dynamic_delete_statement_positioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepable_dynamic_delete_statement_positioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepable_dynamic_delete_statement_positioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepable_dynamic_delete_statement_positionedContext prepable_dynamic_delete_statement_positioned() throws RecognitionException {
		Prepable_dynamic_delete_statement_positionedContext _localctx = new Prepable_dynamic_delete_statement_positionedContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_prepable_dynamic_delete_statement_positioned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(994); match(DELETE);
			setState(997);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(995); match(FROM);
				setState(996); table_name();
				}
			}

			setState(999); match(WHERE);
			setState(1000); match(CURRENT);
			setState(1001); match(OF);
			setState(1002); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepable_dynamic_update_statement_positionedContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Set_clauseContext set_clause() {
			return getRuleContext(Set_clauseContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(Sql92Parser.OF, 0); }
		public TerminalNode CURRENT() { return getToken(Sql92Parser.CURRENT, 0); }
		public TerminalNode UPDATE() { return getToken(Sql92Parser.UPDATE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Prepable_dynamic_update_statement_positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepable_dynamic_update_statement_positioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepable_dynamic_update_statement_positioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepable_dynamic_update_statement_positioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepable_dynamic_update_statement_positioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepable_dynamic_update_statement_positionedContext prepable_dynamic_update_statement_positioned() throws RecognitionException {
		Prepable_dynamic_update_statement_positionedContext _localctx = new Prepable_dynamic_update_statement_positionedContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_prepable_dynamic_update_statement_positioned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1004); match(UPDATE);
			setState(1006);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << UNDERSCORE) | (1L << B_) | (1L << C_))) != 0) || _la==MODULE || _la==N_ || _la==X_ || _la==IDENTIFIER) {
				{
				setState(1005); table_name();
				}
			}

			setState(1008); match(SET);
			setState(1009); set_clause();
			setState(1010); match(WHERE);
			setState(1011); match(CURRENT);
			setState(1012); match(OF);
			setState(1013); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepable_sql_schema_statementContext extends ParserRuleContext {
		public Sql_schema_statementContext sql_schema_statement() {
			return getRuleContext(Sql_schema_statementContext.class,0);
		}
		public Prepable_sql_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepable_sql_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepable_sql_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepable_sql_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepable_sql_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepable_sql_schema_statementContext prepable_sql_schema_statement() throws RecognitionException {
		Prepable_sql_schema_statementContext _localctx = new Prepable_sql_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_prepable_sql_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1015); sql_schema_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepable_sql_transaction_statementContext extends ParserRuleContext {
		public Sql_transaction_statementContext sql_transaction_statement() {
			return getRuleContext(Sql_transaction_statementContext.class,0);
		}
		public Prepable_sql_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepable_sql_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepable_sql_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepable_sql_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepable_sql_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepable_sql_transaction_statementContext prepable_sql_transaction_statement() throws RecognitionException {
		Prepable_sql_transaction_statementContext _localctx = new Prepable_sql_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_prepable_sql_transaction_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1017); sql_transaction_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepable_sql_session_statementContext extends ParserRuleContext {
		public Sql_session_statementContext sql_session_statement() {
			return getRuleContext(Sql_session_statementContext.class,0);
		}
		public Prepable_sql_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepable_sql_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepable_sql_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepable_sql_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepable_sql_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepable_sql_session_statementContext prepable_sql_session_statement() throws RecognitionException {
		Prepable_sql_session_statementContext _localctx = new Prepable_sql_session_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_prepable_sql_session_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1019); sql_session_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_schema_statementContext extends ParserRuleContext {
		public Sql_schema_manipulation_statementContext sql_schema_manipulation_statement() {
			return getRuleContext(Sql_schema_manipulation_statementContext.class,0);
		}
		public Sql_schema_definition_statementContext sql_schema_definition_statement() {
			return getRuleContext(Sql_schema_definition_statementContext.class,0);
		}
		public Sql_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_schema_statementContext sql_schema_statement() throws RecognitionException {
		Sql_schema_statementContext _localctx = new Sql_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_sql_schema_statement);
		try {
			setState(1023);
			switch (_input.LA(1)) {
			case CREATE:
			case GRANT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1021); sql_schema_definition_statement();
				}
				break;
			case ALTER:
			case DROP:
			case REVOKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1022); sql_schema_manipulation_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_schema_definition_statementContext extends ParserRuleContext {
		public Domain_definitionContext domain_definition() {
			return getRuleContext(Domain_definitionContext.class,0);
		}
		public Table_definitionContext table_definition() {
			return getRuleContext(Table_definitionContext.class,0);
		}
		public Collation_definitionContext collation_definition() {
			return getRuleContext(Collation_definitionContext.class,0);
		}
		public View_definitionContext view_definition() {
			return getRuleContext(View_definitionContext.class,0);
		}
		public Translation_definitionContext translation_definition() {
			return getRuleContext(Translation_definitionContext.class,0);
		}
		public Character_set_definitionContext character_set_definition() {
			return getRuleContext(Character_set_definitionContext.class,0);
		}
		public Grant_definitionContext grant_definition() {
			return getRuleContext(Grant_definitionContext.class,0);
		}
		public Assertion_definitionContext assertion_definition() {
			return getRuleContext(Assertion_definitionContext.class,0);
		}
		public Schema_definitionContext schema_definition() {
			return getRuleContext(Schema_definitionContext.class,0);
		}
		public Sql_schema_definition_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_schema_definition_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_schema_definition_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_schema_definition_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_schema_definition_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_schema_definition_statementContext sql_schema_definition_statement() throws RecognitionException {
		Sql_schema_definition_statementContext _localctx = new Sql_schema_definition_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_sql_schema_definition_statement);
		try {
			setState(1034);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1025); schema_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1026); table_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1027); view_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1028); grant_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1029); domain_definition();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1030); character_set_definition();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1031); collation_definition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1032); translation_definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1033); assertion_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_definitionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(Sql92Parser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(Sql92Parser.SCHEMA, 0); }
		public Schema_elementContext schema_element(int i) {
			return getRuleContext(Schema_elementContext.class,i);
		}
		public List<Schema_elementContext> schema_element() {
			return getRuleContexts(Schema_elementContext.class);
		}
		public Schema_character_set_specificationContext schema_character_set_specification() {
			return getRuleContext(Schema_character_set_specificationContext.class,0);
		}
		public Schema_name_clauseContext schema_name_clause() {
			return getRuleContext(Schema_name_clauseContext.class,0);
		}
		public Schema_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_definitionContext schema_definition() throws RecognitionException {
		Schema_definitionContext _localctx = new Schema_definitionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_schema_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1036); match(CREATE);
			setState(1037); match(SCHEMA);
			setState(1038); schema_name_clause();
			setState(1040);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(1039); schema_character_set_specification();
				}
			}

			setState(1043); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1042); schema_element();
				}
				}
				setState(1045); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CREATE || _la==GRANT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_name_clauseContext extends ParserRuleContext {
		public Catalog_nameContext catalog_name() {
			return getRuleContext(Catalog_nameContext.class,0);
		}
		public Schema_authorization_identifierContext schema_authorization_identifier() {
			return getRuleContext(Schema_authorization_identifierContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(Sql92Parser.AUTHORIZATION, 0); }
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Schema_name_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_name_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_name_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_name_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_name_clauseContext schema_name_clause() throws RecognitionException {
		Schema_name_clauseContext _localctx = new Schema_name_clauseContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_schema_name_clause);
		try {
			setState(1064);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1050);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(1047); catalog_name();
					setState(1048); match(PERIOD);
					}
					break;
				}
				setState(1052); schema_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1053); match(AUTHORIZATION);
				setState(1054); schema_authorization_identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1058);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(1055); catalog_name();
					setState(1056); match(PERIOD);
					}
					break;
				}
				setState(1060); schema_name();
				setState(1061); match(AUTHORIZATION);
				setState(1062); schema_authorization_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_authorization_identifierContext extends ParserRuleContext {
		public Authorization_identifierContext authorization_identifier() {
			return getRuleContext(Authorization_identifierContext.class,0);
		}
		public Schema_authorization_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_authorization_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_authorization_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_authorization_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_authorization_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_authorization_identifierContext schema_authorization_identifier() throws RecognitionException {
		Schema_authorization_identifierContext _localctx = new Schema_authorization_identifierContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_schema_authorization_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1066); authorization_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_character_set_specificationContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public TerminalNode CHARACTER() { return getToken(Sql92Parser.CHARACTER, 0); }
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Schema_character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_character_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_character_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_character_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_character_set_specificationContext schema_character_set_specification() throws RecognitionException {
		Schema_character_set_specificationContext _localctx = new Schema_character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_schema_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1068); match(DEFAULT);
			setState(1069); match(CHARACTER);
			setState(1070); match(SET);
			setState(1071); character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_character_set_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Schema_character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_character_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_character_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_character_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_character_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_character_set_nameContext schema_character_set_name() throws RecognitionException {
		Schema_character_set_nameContext _localctx = new Schema_character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_schema_character_set_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1073); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_elementContext extends ParserRuleContext {
		public Table_definitionContext table_definition() {
			return getRuleContext(Table_definitionContext.class,0);
		}
		public Domain_definitionContext domain_definition() {
			return getRuleContext(Domain_definitionContext.class,0);
		}
		public Collation_definitionContext collation_definition() {
			return getRuleContext(Collation_definitionContext.class,0);
		}
		public View_definitionContext view_definition() {
			return getRuleContext(View_definitionContext.class,0);
		}
		public Translation_definitionContext translation_definition() {
			return getRuleContext(Translation_definitionContext.class,0);
		}
		public Character_set_definitionContext character_set_definition() {
			return getRuleContext(Character_set_definitionContext.class,0);
		}
		public Grant_definitionContext grant_definition() {
			return getRuleContext(Grant_definitionContext.class,0);
		}
		public Assertion_definitionContext assertion_definition() {
			return getRuleContext(Assertion_definitionContext.class,0);
		}
		public Schema_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_elementContext schema_element() throws RecognitionException {
		Schema_elementContext _localctx = new Schema_elementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_schema_element);
		try {
			setState(1083);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1075); domain_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1076); table_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1077); view_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1078); grant_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1079); assertion_definition();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1080); character_set_definition();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1081); collation_definition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1082); translation_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_definitionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(Sql92Parser.ON, 0); }
		public TerminalNode CREATE() { return getToken(Sql92Parser.CREATE, 0); }
		public TerminalNode GLOBAL() { return getToken(Sql92Parser.GLOBAL, 0); }
		public TerminalNode ROWS() { return getToken(Sql92Parser.ROWS, 0); }
		public TerminalNode TEMPORARY() { return getToken(Sql92Parser.TEMPORARY, 0); }
		public TerminalNode PRESERVE() { return getToken(Sql92Parser.PRESERVE, 0); }
		public TerminalNode COMMIT() { return getToken(Sql92Parser.COMMIT, 0); }
		public Table_element_listContext table_element_list() {
			return getRuleContext(Table_element_listContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(Sql92Parser.DELETE, 0); }
		public TerminalNode LOCAL() { return getToken(Sql92Parser.LOCAL, 0); }
		public TerminalNode TABLE() { return getToken(Sql92Parser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Table_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_definitionContext table_definition() throws RecognitionException {
		Table_definitionContext _localctx = new Table_definitionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_table_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1085); match(CREATE);
			setState(1088);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				setState(1086);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1087); match(TEMPORARY);
				}
			}

			setState(1090); match(TABLE);
			setState(1091); table_name();
			setState(1092); table_element_list();
			setState(1097);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1093); match(ON);
				setState(1094); match(COMMIT);
				setState(1095);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1096); match(ROWS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_definitionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(Sql92Parser.AS, 0); }
		public TerminalNode CHECK() { return getToken(Sql92Parser.CHECK, 0); }
		public TerminalNode VIEW() { return getToken(Sql92Parser.VIEW, 0); }
		public TerminalNode CREATE() { return getToken(Sql92Parser.CREATE, 0); }
		public Levels_clauseContext levels_clause() {
			return getRuleContext(Levels_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(Sql92Parser.WITH, 0); }
		public View_column_listContext view_column_list() {
			return getRuleContext(View_column_listContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode OPTION() { return getToken(Sql92Parser.OPTION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public View_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterView_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitView_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitView_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_definitionContext view_definition() throws RecognitionException {
		View_definitionContext _localctx = new View_definitionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_view_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1099); match(CREATE);
			setState(1100); match(VIEW);
			setState(1101); table_name();
			setState(1106);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1102); match(LEFT_PAREN);
				setState(1103); view_column_list();
				setState(1104); match(RIGHT_PAREN);
				}
			}

			setState(1108); match(AS);
			setState(1109); query_expression();
			setState(1116);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1110); match(WITH);
				setState(1112);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1111); levels_clause();
					}
				}

				setState(1114); match(CHECK);
				setState(1115); match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public View_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterView_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitView_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitView_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_column_listContext view_column_list() throws RecognitionException {
		View_column_listContext _localctx = new View_column_listContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_view_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1118); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Levels_clauseContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(Sql92Parser.LOCAL, 0); }
		public TerminalNode CASCADED() { return getToken(Sql92Parser.CASCADED, 0); }
		public Levels_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levels_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLevels_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLevels_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLevels_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Levels_clauseContext levels_clause() throws RecognitionException {
		Levels_clauseContext _localctx = new Levels_clauseContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_levels_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1120);
			_la = _input.LA(1);
			if ( !(_la==CASCADED || _la==LOCAL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_definitionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(Sql92Parser.AS, 0); }
		public Default_clauseContext default_clause() {
			return getRuleContext(Default_clauseContext.class,0);
		}
		public TerminalNode DOMAIN() { return getToken(Sql92Parser.DOMAIN, 0); }
		public TerminalNode CREATE() { return getToken(Sql92Parser.CREATE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Domain_constraintContext domain_constraint() {
			return getRuleContext(Domain_constraintContext.class,0);
		}
		public Domain_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDomain_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDomain_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDomain_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_definitionContext domain_definition() throws RecognitionException {
		Domain_definitionContext _localctx = new Domain_definitionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_domain_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1122); match(CREATE);
			setState(1123); match(DOMAIN);
			setState(1125);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1124); match(AS);
				}
			}

			setState(1127); data_type();
			setState(1129);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(1128); default_clause();
				}
			}

			setState(1132);
			_la = _input.LA(1);
			if (_la==CHECK || _la==CONSTRAINT) {
				{
				setState(1131); domain_constraint();
				}
			}

			setState(1135);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(1134); collate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_constraintContext extends ParserRuleContext {
		public Constraint_name_definitionContext constraint_name_definition() {
			return getRuleContext(Constraint_name_definitionContext.class,0);
		}
		public Constraint_attributesContext constraint_attributes() {
			return getRuleContext(Constraint_attributesContext.class,0);
		}
		public Check_constraint_definitionContext check_constraint_definition() {
			return getRuleContext(Check_constraint_definitionContext.class,0);
		}
		public Domain_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDomain_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDomain_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDomain_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_constraintContext domain_constraint() throws RecognitionException {
		Domain_constraintContext _localctx = new Domain_constraintContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_domain_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1138);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1137); constraint_name_definition();
				}
			}

			setState(1140); check_constraint_definition();
			setState(1141); constraint_attributes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assertion_definitionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(Sql92Parser.CREATE, 0); }
		public TerminalNode ASSERTION() { return getToken(Sql92Parser.ASSERTION, 0); }
		public Assertion_checkContext assertion_check() {
			return getRuleContext(Assertion_checkContext.class,0);
		}
		public Constraint_attributesContext constraint_attributes() {
			return getRuleContext(Constraint_attributesContext.class,0);
		}
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Assertion_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assertion_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAssertion_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAssertion_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAssertion_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assertion_definitionContext assertion_definition() throws RecognitionException {
		Assertion_definitionContext _localctx = new Assertion_definitionContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_assertion_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1143); match(CREATE);
			setState(1144); match(ASSERTION);
			setState(1145); constraint_name();
			setState(1146); assertion_check();
			setState(1148);
			_la = _input.LA(1);
			if (_la==DEFERRABLE || _la==INITIALLY || _la==NOT) {
				{
				setState(1147); constraint_attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assertion_checkContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(Sql92Parser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Assertion_checkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assertion_check; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAssertion_check(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAssertion_check(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAssertion_check(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assertion_checkContext assertion_check() throws RecognitionException {
		Assertion_checkContext _localctx = new Assertion_checkContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_assertion_check);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1150); match(CHECK);
			setState(1151); match(LEFT_PAREN);
			setState(1152); search_condition(0);
			setState(1153); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_definitionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(Sql92Parser.AS, 0); }
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Limited_collation_definitionContext limited_collation_definition() {
			return getRuleContext(Limited_collation_definitionContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(Sql92Parser.CREATE, 0); }
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(Sql92Parser.CHARACTER, 0); }
		public Character_set_sourceContext character_set_source() {
			return getRuleContext(Character_set_sourceContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Character_set_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_set_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_set_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_set_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_set_definitionContext character_set_definition() throws RecognitionException {
		Character_set_definitionContext _localctx = new Character_set_definitionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_character_set_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1155); match(CREATE);
			setState(1156); match(CHARACTER);
			setState(1157); match(SET);
			setState(1158); character_set_name();
			setState(1160);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1159); match(AS);
				}
			}

			setState(1162); character_set_source();
			setState(1165);
			switch (_input.LA(1)) {
			case COLLATE:
				{
				setState(1163); collate_clause();
				}
				break;
			case COLLATION:
				{
				setState(1164); limited_collation_definition();
				}
				break;
			case EOF:
			case SEMICOLON:
			case CREATE:
			case GRANT:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_sourceContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(Sql92Parser.GET, 0); }
		public Existing_character_set_nameContext existing_character_set_name() {
			return getRuleContext(Existing_character_set_nameContext.class,0);
		}
		public Character_set_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_set_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_set_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_set_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_set_sourceContext character_set_source() throws RecognitionException {
		Character_set_sourceContext _localctx = new Character_set_sourceContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_character_set_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1167); match(GET);
			setState(1168); existing_character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_character_set_nameContext extends ParserRuleContext {
		public Schema_character_set_nameContext schema_character_set_name() {
			return getRuleContext(Schema_character_set_nameContext.class,0);
		}
		public Standard_character_repertoire_nameContext standard_character_repertoire_name() {
			return getRuleContext(Standard_character_repertoire_nameContext.class,0);
		}
		public Existing_character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_character_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExisting_character_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExisting_character_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExisting_character_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Existing_character_set_nameContext existing_character_set_name() throws RecognitionException {
		Existing_character_set_nameContext _localctx = new Existing_character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_existing_character_set_name);
		try {
			setState(1172);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1170); standard_character_repertoire_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1171); schema_character_set_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_definitionContext extends ParserRuleContext {
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(Sql92Parser.ON, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<TerminalNode> GRANT() { return getTokens(Sql92Parser.GRANT); }
		public TerminalNode WITH() { return getToken(Sql92Parser.WITH, 0); }
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public TerminalNode OPTION() { return getToken(Sql92Parser.OPTION, 0); }
		public TerminalNode TO() { return getToken(Sql92Parser.TO, 0); }
		public TerminalNode GRANT(int i) {
			return getToken(Sql92Parser.GRANT, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Grant_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGrant_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGrant_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGrant_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_definitionContext grant_definition() throws RecognitionException {
		Grant_definitionContext _localctx = new Grant_definitionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_grant_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1174); match(GRANT);
			setState(1175); privileges();
			setState(1176); match(ON);
			setState(1177); object_name();
			setState(1178); match(TO);
			setState(1179); grantee();
			setState(1184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1180); match(COMMA);
				setState(1181); grantee();
				}
				}
				setState(1186);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1190);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1187); match(WITH);
				setState(1188); match(GRANT);
				setState(1189); match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public Action_listContext action_list() {
			return getRuleContext(Action_listContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(Sql92Parser.PRIVILEGES, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_privileges);
		try {
			setState(1195);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1192); match(ALL);
				setState(1193); match(PRIVILEGES);
				}
				break;
			case DELETE:
			case INSERT:
			case REFERENCES:
			case SELECT:
			case UPDATE:
			case USAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1194); action_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Action_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public Action_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAction_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAction_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAction_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Action_listContext action_list() throws RecognitionException {
		Action_listContext _localctx = new Action_listContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_action_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1197); action();
			setState(1202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1198); match(COMMA);
				setState(1199); action();
				}
				}
				setState(1204);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public Privileges_column_listContext privileges_column_list() {
			return getRuleContext(Privileges_column_listContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(Sql92Parser.INSERT, 0); }
		public TerminalNode DELETE() { return getToken(Sql92Parser.DELETE, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode UPDATE() { return getToken(Sql92Parser.UPDATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode SELECT() { return getToken(Sql92Parser.SELECT, 0); }
		public TerminalNode USAGE() { return getToken(Sql92Parser.USAGE, 0); }
		public TerminalNode REFERENCES() { return getToken(Sql92Parser.REFERENCES, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_action);
		int _la;
		try {
			setState(1215);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1205); match(SELECT);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1206); match(DELETE);
				}
				break;
			case INSERT:
			case REFERENCES:
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1207);
				_la = _input.LA(1);
				if ( !(_la==INSERT || _la==REFERENCES || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1212);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1208); match(LEFT_PAREN);
					setState(1209); privileges_column_list();
					setState(1210); match(RIGHT_PAREN);
					}
				}

				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1214); match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privileges_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Privileges_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrivileges_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrivileges_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrivileges_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privileges_column_listContext privileges_column_list() throws RecognitionException {
		Privileges_column_listContext _localctx = new Privileges_column_listContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_privileges_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1217); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_nameContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode DOMAIN() { return getToken(Sql92Parser.DOMAIN, 0); }
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(Sql92Parser.CHARACTER, 0); }
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(Sql92Parser.COLLATION, 0); }
		public TerminalNode TABLE() { return getToken(Sql92Parser.TABLE, 0); }
		public TerminalNode TRANSLATION() { return getToken(Sql92Parser.TRANSLATION, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterObject_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitObject_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitObject_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_nameContext object_name() throws RecognitionException {
		Object_nameContext _localctx = new Object_nameContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_object_name);
		int _la;
		try {
			setState(1232);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case MODULE:
			case N_:
			case TABLE:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1220);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1219); match(TABLE);
					}
				}

				setState(1222); table_name();
				}
				break;
			case DOMAIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1223); match(DOMAIN);
				setState(1224); domain_name();
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 3);
				{
				setState(1225); match(COLLATION);
				setState(1226); collation_name();
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 4);
				{
				setState(1227); match(CHARACTER);
				setState(1228); match(SET);
				setState(1229); character_set_name();
				}
				break;
			case TRANSLATION:
				enterOuterAlt(_localctx, 5);
				{
				setState(1230); match(TRANSLATION);
				setState(1231); translation_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public TerminalNode PUBLIC() { return getToken(Sql92Parser.PUBLIC, 0); }
		public Authorization_identifierContext authorization_identifier() {
			return getRuleContext(Authorization_identifierContext.class,0);
		}
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_grantee);
		try {
			setState(1236);
			switch (_input.LA(1)) {
			case PUBLIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1234); match(PUBLIC);
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1235); authorization_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_definitionContext extends ParserRuleContext {
		public Pad_attributeContext pad_attribute() {
			return getRuleContext(Pad_attributeContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(Sql92Parser.CREATE, 0); }
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(Sql92Parser.COLLATION, 0); }
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Collation_sourceContext collation_source() {
			return getRuleContext(Collation_sourceContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Collation_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollation_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollation_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollation_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_definitionContext collation_definition() throws RecognitionException {
		Collation_definitionContext _localctx = new Collation_definitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_collation_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1238); match(CREATE);
			setState(1239); match(COLLATION);
			setState(1240); collation_name();
			setState(1241); match(FOR);
			setState(1242); character_set_specification();
			setState(1243); match(FROM);
			setState(1244); collation_source();
			setState(1246);
			_la = _input.LA(1);
			if (_la==NO || _la==PAD) {
				{
				setState(1245); pad_attribute();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_sourceContext extends ParserRuleContext {
		public Collation_sequence_definitionContext collation_sequence_definition() {
			return getRuleContext(Collation_sequence_definitionContext.class,0);
		}
		public Translation_collationContext translation_collation() {
			return getRuleContext(Translation_collationContext.class,0);
		}
		public Collation_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollation_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollation_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollation_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_sourceContext collation_source() throws RecognitionException {
		Collation_sourceContext _localctx = new Collation_sourceContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_collation_source);
		try {
			setState(1250);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case DEFAULT:
			case DESC:
			case EXTERNAL:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1248); collation_sequence_definition();
				}
				break;
			case TRANSLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1249); translation_collation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_sequence_definitionContext extends ParserRuleContext {
		public External_collationContext external_collation() {
			return getRuleContext(External_collationContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public TerminalNode DESC() { return getToken(Sql92Parser.DESC, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Schema_collation_nameContext schema_collation_name() {
			return getRuleContext(Schema_collation_nameContext.class,0);
		}
		public Collation_sequence_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_sequence_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollation_sequence_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollation_sequence_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollation_sequence_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_sequence_definitionContext collation_sequence_definition() throws RecognitionException {
		Collation_sequence_definitionContext _localctx = new Collation_sequence_definitionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_collation_sequence_definition);
		try {
			setState(1260);
			switch (_input.LA(1)) {
			case EXTERNAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1252); external_collation();
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1253); schema_collation_name();
				}
				break;
			case DESC:
				enterOuterAlt(_localctx, 3);
				{
				setState(1254); match(DESC);
				setState(1255); match(LEFT_PAREN);
				setState(1256); collation_name();
				setState(1257); match(RIGHT_PAREN);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1259); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_collationContext extends ParserRuleContext {
		public TerminalNode QUOTE(int i) {
			return getToken(Sql92Parser.QUOTE, i);
		}
		public List<TerminalNode> QUOTE() { return getTokens(Sql92Parser.QUOTE); }
		public External_collation_nameContext external_collation_name() {
			return getRuleContext(External_collation_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode EXTERNAL() { return getToken(Sql92Parser.EXTERNAL, 0); }
		public External_collationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_collation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExternal_collation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExternal_collation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExternal_collation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_collationContext external_collation() throws RecognitionException {
		External_collationContext _localctx = new External_collationContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_external_collation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1262); match(EXTERNAL);
			setState(1263); match(LEFT_PAREN);
			setState(1264); match(QUOTE);
			setState(1265); external_collation_name();
			setState(1266); match(QUOTE);
			setState(1267); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_collation_nameContext extends ParserRuleContext {
		public Standard_collation_nameContext standard_collation_name() {
			return getRuleContext(Standard_collation_nameContext.class,0);
		}
		public Implementation_defined_collation_nameContext implementation_defined_collation_name() {
			return getRuleContext(Implementation_defined_collation_nameContext.class,0);
		}
		public External_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExternal_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExternal_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExternal_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_collation_nameContext external_collation_name() throws RecognitionException {
		External_collation_nameContext _localctx = new External_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_external_collation_name);
		try {
			setState(1271);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1269); standard_collation_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1270); implementation_defined_collation_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_collation_nameContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Standard_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStandard_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStandard_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStandard_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_collation_nameContext standard_collation_name() throws RecognitionException {
		Standard_collation_nameContext _localctx = new Standard_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_standard_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1273); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_defined_collation_nameContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Implementation_defined_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_defined_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterImplementation_defined_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitImplementation_defined_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitImplementation_defined_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_defined_collation_nameContext implementation_defined_collation_name() throws RecognitionException {
		Implementation_defined_collation_nameContext _localctx = new Implementation_defined_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_implementation_defined_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1275); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_collation_nameContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Schema_collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_collation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_collation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_collation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_collation_nameContext schema_collation_name() throws RecognitionException {
		Schema_collation_nameContext _localctx = new Schema_collation_nameContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_schema_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1277); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_collationContext extends ParserRuleContext {
		public TerminalNode THEN() { return getToken(Sql92Parser.THEN, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(Sql92Parser.COLLATION, 0); }
		public TerminalNode TRANSLATION() { return getToken(Sql92Parser.TRANSLATION, 0); }
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Translation_collationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_collation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_collation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_collation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_collation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_collationContext translation_collation() throws RecognitionException {
		Translation_collationContext _localctx = new Translation_collationContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_translation_collation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1279); match(TRANSLATION);
			setState(1280); translation_name();
			setState(1284);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(1281); match(THEN);
				setState(1282); match(COLLATION);
				setState(1283); collation_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limited_collation_definitionContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(Sql92Parser.COLLATION, 0); }
		public Collation_sourceContext collation_source() {
			return getRuleContext(Collation_sourceContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Limited_collation_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limited_collation_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLimited_collation_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLimited_collation_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLimited_collation_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limited_collation_definitionContext limited_collation_definition() throws RecognitionException {
		Limited_collation_definitionContext _localctx = new Limited_collation_definitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_limited_collation_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1286); match(COLLATION);
			setState(1287); match(FROM);
			setState(1288); collation_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pad_attributeContext extends ParserRuleContext {
		public TerminalNode SPACE() { return getToken(Sql92Parser.SPACE, 0); }
		public TerminalNode NO() { return getToken(Sql92Parser.NO, 0); }
		public TerminalNode PAD() { return getToken(Sql92Parser.PAD, 0); }
		public Pad_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pad_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPad_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPad_attribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPad_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pad_attributeContext pad_attribute() throws RecognitionException {
		Pad_attributeContext _localctx = new Pad_attributeContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_pad_attribute);
		try {
			setState(1294);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1290); match(NO);
				setState(1291); match(PAD);
				}
				break;
			case PAD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1292); match(PAD);
				setState(1293); match(SPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_definitionContext extends ParserRuleContext {
		public Source_character_set_specificationContext source_character_set_specification() {
			return getRuleContext(Source_character_set_specificationContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(Sql92Parser.CREATE, 0); }
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Translation_sourceContext translation_source() {
			return getRuleContext(Translation_sourceContext.class,0);
		}
		public TerminalNode TO() { return getToken(Sql92Parser.TO, 0); }
		public TerminalNode TRANSLATION() { return getToken(Sql92Parser.TRANSLATION, 0); }
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Translation_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_definitionContext translation_definition() throws RecognitionException {
		Translation_definitionContext _localctx = new Translation_definitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_translation_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1296); match(CREATE);
			setState(1297); match(TRANSLATION);
			setState(1298); translation_name();
			setState(1299); match(FOR);
			setState(1300); source_character_set_specification();
			setState(1301); match(TO);
			setState(1302); character_set_specification();
			setState(1303); match(FROM);
			setState(1304); translation_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Source_character_set_specificationContext extends ParserRuleContext {
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Source_character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSource_character_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSource_character_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSource_character_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Source_character_set_specificationContext source_character_set_specification() throws RecognitionException {
		Source_character_set_specificationContext _localctx = new Source_character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_source_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1306); character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_character_set_specificationContext extends ParserRuleContext {
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Target_character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTarget_character_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTarget_character_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTarget_character_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_character_set_specificationContext target_character_set_specification() throws RecognitionException {
		Target_character_set_specificationContext _localctx = new Target_character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_target_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1308); character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_sourceContext extends ParserRuleContext {
		public Translation_specificationContext translation_specification() {
			return getRuleContext(Translation_specificationContext.class,0);
		}
		public Translation_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_sourceContext translation_source() throws RecognitionException {
		Translation_sourceContext _localctx = new Translation_sourceContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_translation_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1310); translation_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_specificationContext extends ParserRuleContext {
		public TerminalNode IDENTITY() { return getToken(Sql92Parser.IDENTITY, 0); }
		public Schema_translation_nameContext schema_translation_name() {
			return getRuleContext(Schema_translation_nameContext.class,0);
		}
		public External_translationContext external_translation() {
			return getRuleContext(External_translationContext.class,0);
		}
		public Translation_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_specificationContext translation_specification() throws RecognitionException {
		Translation_specificationContext _localctx = new Translation_specificationContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_translation_specification);
		try {
			setState(1315);
			switch (_input.LA(1)) {
			case EXTERNAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1312); external_translation();
				}
				break;
			case IDENTITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1313); match(IDENTITY);
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1314); schema_translation_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_translationContext extends ParserRuleContext {
		public TerminalNode QUOTE(int i) {
			return getToken(Sql92Parser.QUOTE, i);
		}
		public List<TerminalNode> QUOTE() { return getTokens(Sql92Parser.QUOTE); }
		public External_translation_nameContext external_translation_name() {
			return getRuleContext(External_translation_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode EXTERNAL() { return getToken(Sql92Parser.EXTERNAL, 0); }
		public External_translationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_translation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExternal_translation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExternal_translation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExternal_translation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_translationContext external_translation() throws RecognitionException {
		External_translationContext _localctx = new External_translationContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_external_translation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1317); match(EXTERNAL);
			setState(1318); match(LEFT_PAREN);
			setState(1319); match(QUOTE);
			setState(1320); external_translation_name();
			setState(1321); match(QUOTE);
			setState(1322); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_translation_nameContext extends ParserRuleContext {
		public Implementation_defined_translation_nameContext implementation_defined_translation_name() {
			return getRuleContext(Implementation_defined_translation_nameContext.class,0);
		}
		public Standard_translation_nameContext standard_translation_name() {
			return getRuleContext(Standard_translation_nameContext.class,0);
		}
		public External_translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExternal_translation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExternal_translation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExternal_translation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_translation_nameContext external_translation_name() throws RecognitionException {
		External_translation_nameContext _localctx = new External_translation_nameContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_external_translation_name);
		try {
			setState(1326);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1324); standard_translation_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1325); implementation_defined_translation_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_translation_nameContext extends ParserRuleContext {
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Standard_translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStandard_translation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStandard_translation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStandard_translation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_translation_nameContext standard_translation_name() throws RecognitionException {
		Standard_translation_nameContext _localctx = new Standard_translation_nameContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_standard_translation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1328); translation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_defined_translation_nameContext extends ParserRuleContext {
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Implementation_defined_translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_defined_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterImplementation_defined_translation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitImplementation_defined_translation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitImplementation_defined_translation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_defined_translation_nameContext implementation_defined_translation_name() throws RecognitionException {
		Implementation_defined_translation_nameContext _localctx = new Implementation_defined_translation_nameContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_implementation_defined_translation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1330); translation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_translation_nameContext extends ParserRuleContext {
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Schema_translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_translation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_translation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_translation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_translation_nameContext schema_translation_name() throws RecognitionException {
		Schema_translation_nameContext _localctx = new Schema_translation_nameContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_schema_translation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1332); translation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_schema_manipulation_statementContext extends ParserRuleContext {
		public Drop_view_statementContext drop_view_statement() {
			return getRuleContext(Drop_view_statementContext.class,0);
		}
		public Drop_translation_statementContext drop_translation_statement() {
			return getRuleContext(Drop_translation_statementContext.class,0);
		}
		public Alter_domain_statementContext alter_domain_statement() {
			return getRuleContext(Alter_domain_statementContext.class,0);
		}
		public Drop_table_statementContext drop_table_statement() {
			return getRuleContext(Drop_table_statementContext.class,0);
		}
		public Drop_assertion_statementContext drop_assertion_statement() {
			return getRuleContext(Drop_assertion_statementContext.class,0);
		}
		public Drop_character_set_statementContext drop_character_set_statement() {
			return getRuleContext(Drop_character_set_statementContext.class,0);
		}
		public Drop_schema_statementContext drop_schema_statement() {
			return getRuleContext(Drop_schema_statementContext.class,0);
		}
		public Revoke_statementContext revoke_statement() {
			return getRuleContext(Revoke_statementContext.class,0);
		}
		public Alter_table_statementContext alter_table_statement() {
			return getRuleContext(Alter_table_statementContext.class,0);
		}
		public Drop_domain_statementContext drop_domain_statement() {
			return getRuleContext(Drop_domain_statementContext.class,0);
		}
		public Drop_collation_statementContext drop_collation_statement() {
			return getRuleContext(Drop_collation_statementContext.class,0);
		}
		public Sql_schema_manipulation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_schema_manipulation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_schema_manipulation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_schema_manipulation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_schema_manipulation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_schema_manipulation_statementContext sql_schema_manipulation_statement() throws RecognitionException {
		Sql_schema_manipulation_statementContext _localctx = new Sql_schema_manipulation_statementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_sql_schema_manipulation_statement);
		try {
			setState(1345);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1334); drop_schema_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1335); alter_table_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1336); drop_table_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1337); drop_view_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1338); revoke_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1339); alter_domain_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1340); drop_domain_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1341); drop_character_set_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1342); drop_collation_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1343); drop_translation_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1344); drop_assertion_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schema_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public Catalog_nameContext catalog_name() {
			return getRuleContext(Catalog_nameContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(Sql92Parser.SCHEMA, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Drop_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schema_statementContext drop_schema_statement() throws RecognitionException {
		Drop_schema_statementContext _localctx = new Drop_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_drop_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1347); match(DROP);
			setState(1348); match(SCHEMA);
			setState(1352);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				setState(1349); catalog_name();
				setState(1350); match(PERIOD);
				}
				break;
			}
			setState(1354); schema_name();
			setState(1355); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_behaviourContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(Sql92Parser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(Sql92Parser.RESTRICT, 0); }
		public Drop_behaviourContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_behaviour; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_behaviour(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_behaviour(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_behaviour(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_behaviourContext drop_behaviour() throws RecognitionException {
		Drop_behaviourContext _localctx = new Drop_behaviourContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_drop_behaviour);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1357);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_statementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(Sql92Parser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(Sql92Parser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Alter_table_actionContext alter_table_action() {
			return getRuleContext(Alter_table_actionContext.class,0);
		}
		public Alter_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_statementContext alter_table_statement() throws RecognitionException {
		Alter_table_statementContext _localctx = new Alter_table_statementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alter_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1359); match(ALTER);
			setState(1360); match(TABLE);
			setState(1361); table_name();
			setState(1362); alter_table_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_actionContext extends ParserRuleContext {
		public Drop_column_definitionContext drop_column_definition() {
			return getRuleContext(Drop_column_definitionContext.class,0);
		}
		public Drop_table_constraint_definitionContext drop_table_constraint_definition() {
			return getRuleContext(Drop_table_constraint_definitionContext.class,0);
		}
		public Alter_column_definitionContext alter_column_definition() {
			return getRuleContext(Alter_column_definitionContext.class,0);
		}
		public Add_table_constraint_definitionContext add_table_constraint_definition() {
			return getRuleContext(Add_table_constraint_definitionContext.class,0);
		}
		public Add_column_definitionContext add_column_definition() {
			return getRuleContext(Add_column_definitionContext.class,0);
		}
		public Alter_table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_table_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_table_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_table_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_actionContext alter_table_action() throws RecognitionException {
		Alter_table_actionContext _localctx = new Alter_table_actionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alter_table_action);
		try {
			setState(1369);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1364); add_column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1365); alter_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1366); drop_column_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1367); add_table_constraint_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1368); drop_table_constraint_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_column_definitionContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(Sql92Parser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode ADD() { return getToken(Sql92Parser.ADD, 0); }
		public Add_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAdd_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAdd_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAdd_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_column_definitionContext add_column_definition() throws RecognitionException {
		Add_column_definitionContext _localctx = new Add_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_add_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1371); match(ADD);
			setState(1373);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(1372); match(COLUMN);
				}
			}

			setState(1375); column_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_table_constraint_definitionContext extends ParserRuleContext {
		public Table_constraint_definitionContext table_constraint_definition() {
			return getRuleContext(Table_constraint_definitionContext.class,0);
		}
		public TerminalNode ADD() { return getToken(Sql92Parser.ADD, 0); }
		public Add_table_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_table_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAdd_table_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAdd_table_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAdd_table_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_table_constraint_definitionContext add_table_constraint_definition() throws RecognitionException {
		Add_table_constraint_definitionContext _localctx = new Add_table_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_add_table_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1377); match(ADD);
			setState(1378); table_constraint_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_definitionContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(Sql92Parser.COLUMN, 0); }
		public Alter_column_actionContext alter_column_action() {
			return getRuleContext(Alter_column_actionContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(Sql92Parser.ALTER, 0); }
		public Alter_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_definitionContext alter_column_definition() throws RecognitionException {
		Alter_column_definitionContext _localctx = new Alter_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alter_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1380); match(ALTER);
			setState(1382);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(1381); match(COLUMN);
				}
			}

			setState(1384); column_name();
			setState(1385); alter_column_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_actionContext extends ParserRuleContext {
		public Set_column_default_clauseContext set_column_default_clause() {
			return getRuleContext(Set_column_default_clauseContext.class,0);
		}
		public Drop_column_default_clauseContext drop_column_default_clause() {
			return getRuleContext(Drop_column_default_clauseContext.class,0);
		}
		public Alter_column_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_column_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_column_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_column_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_actionContext alter_column_action() throws RecognitionException {
		Alter_column_actionContext _localctx = new Alter_column_actionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alter_column_action);
		try {
			setState(1389);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1387); set_column_default_clause();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1388); drop_column_default_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_column_default_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Default_clauseContext default_clause() {
			return getRuleContext(Default_clauseContext.class,0);
		}
		public Set_column_default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_column_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_column_default_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_column_default_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_column_default_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_column_default_clauseContext set_column_default_clause() throws RecognitionException {
		Set_column_default_clauseContext _localctx = new Set_column_default_clauseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_set_column_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1391); match(SET);
			setState(1392); default_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_default_clauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Drop_column_default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_column_default_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_column_default_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_column_default_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_default_clauseContext drop_column_default_clause() throws RecognitionException {
		Drop_column_default_clauseContext _localctx = new Drop_column_default_clauseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_drop_column_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1394); match(DROP);
			setState(1395); match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_definitionContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(Sql92Parser.COLUMN, 0); }
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Drop_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_definitionContext drop_column_definition() throws RecognitionException {
		Drop_column_definitionContext _localctx = new Drop_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_drop_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1397); match(DROP);
			setState(1399);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(1398); match(COLUMN);
				}
			}

			setState(1401); column_name();
			setState(1402); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_constraint_definitionContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(Sql92Parser.CONSTRAINT, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_table_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_table_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_table_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_table_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_constraint_definitionContext drop_table_constraint_definition() throws RecognitionException {
		Drop_table_constraint_definitionContext _localctx = new Drop_table_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_drop_table_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1404); match(DROP);
			setState(1405); match(CONSTRAINT);
			setState(1406); constraint_name();
			setState(1407); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(Sql92Parser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_statementContext drop_table_statement() throws RecognitionException {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_drop_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1409); match(DROP);
			setState(1410); match(TABLE);
			setState(1411); table_name();
			setState(1412); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_view_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(Sql92Parser.VIEW, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Drop_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_view_statementContext drop_view_statement() throws RecognitionException {
		Drop_view_statementContext _localctx = new Drop_view_statementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_drop_view_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1414); match(DROP);
			setState(1415); match(VIEW);
			setState(1416); table_name();
			setState(1417); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public TerminalNode REVOKE() { return getToken(Sql92Parser.REVOKE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(Sql92Parser.ON, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public TerminalNode GRANT() { return getToken(Sql92Parser.GRANT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode OPTION() { return getToken(Sql92Parser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Revoke_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRevoke_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRevoke_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRevoke_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_statementContext revoke_statement() throws RecognitionException {
		Revoke_statementContext _localctx = new Revoke_statementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_revoke_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1419); match(REVOKE);
			setState(1423);
			_la = _input.LA(1);
			if (_la==GRANT) {
				{
				setState(1420); match(GRANT);
				setState(1421); match(OPTION);
				setState(1422); match(FOR);
				}
			}

			setState(1425); privileges();
			setState(1426); match(ON);
			setState(1427); object_name();
			setState(1428); match(FROM);
			setState(1429); grantee();
			setState(1434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1430); match(COMMA);
				setState(1431); grantee();
				}
				}
				setState(1436);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1437); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_domain_statementContext extends ParserRuleContext {
		public Drop_behaviourContext drop_behaviour() {
			return getRuleContext(Drop_behaviourContext.class,0);
		}
		public TerminalNode DOMAIN() { return getToken(Sql92Parser.DOMAIN, 0); }
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Drop_domain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_domain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_domain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_domain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_domain_statementContext drop_domain_statement() throws RecognitionException {
		Drop_domain_statementContext _localctx = new Drop_domain_statementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_drop_domain_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1439); match(DROP);
			setState(1440); match(DOMAIN);
			setState(1441); domain_name();
			setState(1442); drop_behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_character_set_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(Sql92Parser.CHARACTER, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Drop_character_set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_character_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_character_set_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_character_set_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_character_set_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_character_set_statementContext drop_character_set_statement() throws RecognitionException {
		Drop_character_set_statementContext _localctx = new Drop_character_set_statementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_drop_character_set_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1444); match(DROP);
			setState(1445); match(CHARACTER);
			setState(1446); match(SET);
			setState(1447); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_collation_statementContext extends ParserRuleContext {
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(Sql92Parser.COLLATION, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Drop_collation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_collation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_collation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_collation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_collation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_collation_statementContext drop_collation_statement() throws RecognitionException {
		Drop_collation_statementContext _localctx = new Drop_collation_statementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_drop_collation_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449); match(DROP);
			setState(1450); match(COLLATION);
			setState(1451); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_translation_statementContext extends ParserRuleContext {
		public TerminalNode TRANSLATION() { return getToken(Sql92Parser.TRANSLATION, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Drop_translation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_translation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_translation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_translation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_translation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_translation_statementContext drop_translation_statement() throws RecognitionException {
		Drop_translation_statementContext _localctx = new Drop_translation_statementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_drop_translation_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1453); match(DROP);
			setState(1454); match(TRANSLATION);
			setState(1455); translation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_assertion_statementContext extends ParserRuleContext {
		public TerminalNode ASSERTION() { return getToken(Sql92Parser.ASSERTION, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_assertion_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_assertion_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_assertion_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_assertion_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_assertion_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_assertion_statementContext drop_assertion_statement() throws RecognitionException {
		Drop_assertion_statementContext _localctx = new Drop_assertion_statementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_drop_assertion_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1457); match(DROP);
			setState(1458); match(ASSERTION);
			setState(1459); constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_domain_statementContext extends ParserRuleContext {
		public TerminalNode DOMAIN() { return getToken(Sql92Parser.DOMAIN, 0); }
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(Sql92Parser.ALTER, 0); }
		public Alter_domain_actionContext alter_domain_action() {
			return getRuleContext(Alter_domain_actionContext.class,0);
		}
		public Alter_domain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_domain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_domain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_domain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_domain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_domain_statementContext alter_domain_statement() throws RecognitionException {
		Alter_domain_statementContext _localctx = new Alter_domain_statementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_alter_domain_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1461); match(ALTER);
			setState(1462); match(DOMAIN);
			setState(1463); domain_name();
			setState(1464); alter_domain_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_domain_actionContext extends ParserRuleContext {
		public Add_domain_constraint_definitionContext add_domain_constraint_definition() {
			return getRuleContext(Add_domain_constraint_definitionContext.class,0);
		}
		public Drop_domain_constraint_definitionContext drop_domain_constraint_definition() {
			return getRuleContext(Drop_domain_constraint_definitionContext.class,0);
		}
		public Set_domain_default_clauseContext set_domain_default_clause() {
			return getRuleContext(Set_domain_default_clauseContext.class,0);
		}
		public Drop_domain_default_clauseContext drop_domain_default_clause() {
			return getRuleContext(Drop_domain_default_clauseContext.class,0);
		}
		public Alter_domain_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_domain_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAlter_domain_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAlter_domain_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAlter_domain_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_domain_actionContext alter_domain_action() throws RecognitionException {
		Alter_domain_actionContext _localctx = new Alter_domain_actionContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_alter_domain_action);
		try {
			setState(1470);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1466); set_domain_default_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1467); drop_domain_default_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1468); add_domain_constraint_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1469); drop_domain_constraint_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_domain_default_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Default_clauseContext default_clause() {
			return getRuleContext(Default_clauseContext.class,0);
		}
		public Set_domain_default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_domain_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_domain_default_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_domain_default_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_domain_default_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_domain_default_clauseContext set_domain_default_clause() throws RecognitionException {
		Set_domain_default_clauseContext _localctx = new Set_domain_default_clauseContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_set_domain_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1472); match(SET);
			setState(1473); default_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_domain_default_clauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Drop_domain_default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_domain_default_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_domain_default_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_domain_default_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_domain_default_clauseContext drop_domain_default_clause() throws RecognitionException {
		Drop_domain_default_clauseContext _localctx = new Drop_domain_default_clauseContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_drop_domain_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1475); match(DROP);
			setState(1476); match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_domain_constraint_definitionContext extends ParserRuleContext {
		public Domain_constraintContext domain_constraint() {
			return getRuleContext(Domain_constraintContext.class,0);
		}
		public TerminalNode ADD() { return getToken(Sql92Parser.ADD, 0); }
		public Add_domain_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_domain_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAdd_domain_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAdd_domain_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAdd_domain_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_domain_constraint_definitionContext add_domain_constraint_definition() throws RecognitionException {
		Add_domain_constraint_definitionContext _localctx = new Add_domain_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_add_domain_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1478); match(ADD);
			setState(1479); domain_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_domain_constraint_definitionContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(Sql92Parser.CONSTRAINT, 0); }
		public TerminalNode DROP() { return getToken(Sql92Parser.DROP, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_domain_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDrop_domain_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDrop_domain_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDrop_domain_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_domain_constraint_definitionContext drop_domain_constraint_definition() throws RecognitionException {
		Drop_domain_constraint_definitionContext _localctx = new Drop_domain_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_drop_domain_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1481); match(DROP);
			setState(1482); match(CONSTRAINT);
			setState(1483); constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_data_statementContext extends ParserRuleContext {
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Sql_data_change_statementContext sql_data_change_statement() {
			return getRuleContext(Sql_data_change_statementContext.class,0);
		}
		public Select_statement_single_rowContext select_statement_single_row() {
			return getRuleContext(Select_statement_single_rowContext.class,0);
		}
		public Direct_select_statement_multiple_rowsContext direct_select_statement_multiple_rows() {
			return getRuleContext(Direct_select_statement_multiple_rowsContext.class,0);
		}
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Sql_data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_data_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_data_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_data_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_data_statementContext sql_data_statement() throws RecognitionException {
		Sql_data_statementContext _localctx = new Sql_data_statementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_sql_data_statement);
		try {
			setState(1491);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1485); open_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1486); fetch_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1487); close_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1488); select_statement_single_row();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1489); direct_select_statement_multiple_rows();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1490); sql_data_change_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(Sql92Parser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_open_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1493); match(OPEN);
			setState(1494); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Fetch_orientationContext fetch_orientation() {
			return getRuleContext(Fetch_orientationContext.class,0);
		}
		public TerminalNode INTO() { return getToken(Sql92Parser.INTO, 0); }
		public Fetch_target_listContext fetch_target_list() {
			return getRuleContext(Fetch_target_listContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public TerminalNode FETCH() { return getToken(Sql92Parser.FETCH, 0); }
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1496); match(FETCH);
			setState(1501);
			_la = _input.LA(1);
			if (_la==ABSOLUTE || ((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (FIRST - 153)) | (1L << (FROM - 153)) | (1L << (LAST - 153)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (NEXT - 224)) | (1L << (PRIOR - 224)) | (1L << (RELATIVE - 224)))) != 0)) {
				{
				setState(1498);
				_la = _input.LA(1);
				if (_la==ABSOLUTE || _la==FIRST || _la==LAST || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (NEXT - 224)) | (1L << (PRIOR - 224)) | (1L << (RELATIVE - 224)))) != 0)) {
					{
					setState(1497); fetch_orientation();
					}
				}

				setState(1500); match(FROM);
				}
			}

			setState(1503); cursor_name();
			setState(1504); match(INTO);
			setState(1505); fetch_target_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_orientationContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(Sql92Parser.NEXT, 0); }
		public TerminalNode FIRST() { return getToken(Sql92Parser.FIRST, 0); }
		public TerminalNode ABSOLUTE() { return getToken(Sql92Parser.ABSOLUTE, 0); }
		public TerminalNode PRIOR() { return getToken(Sql92Parser.PRIOR, 0); }
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public TerminalNode RELATIVE() { return getToken(Sql92Parser.RELATIVE, 0); }
		public TerminalNode LAST() { return getToken(Sql92Parser.LAST, 0); }
		public Fetch_orientationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_orientation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFetch_orientation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFetch_orientation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFetch_orientation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_orientationContext fetch_orientation() throws RecognitionException {
		Fetch_orientationContext _localctx = new Fetch_orientationContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_fetch_orientation);
		int _la;
		try {
			setState(1513);
			switch (_input.LA(1)) {
			case NEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1507); match(NEXT);
				}
				break;
			case PRIOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1508); match(PRIOR);
				}
				break;
			case FIRST:
				enterOuterAlt(_localctx, 3);
				{
				setState(1509); match(FIRST);
				}
				break;
			case LAST:
				enterOuterAlt(_localctx, 4);
				{
				setState(1510); match(LAST);
				}
				break;
			case ABSOLUTE:
			case RELATIVE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1511);
				_la = _input.LA(1);
				if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1512); simple_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_value_specificationContext extends ParserRuleContext {
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Simple_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_value_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_value_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_value_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_value_specificationContext simple_value_specification() throws RecognitionException {
		Simple_value_specificationContext _localctx = new Simple_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_simple_value_specification);
		try {
			setState(1518);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1515); parameter_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1516); embedded_variable_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1517); literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_target_listContext extends ParserRuleContext {
		public Target_specificationContext target_specification(int i) {
			return getRuleContext(Target_specificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Target_specificationContext> target_specification() {
			return getRuleContexts(Target_specificationContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Fetch_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFetch_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFetch_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFetch_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_target_listContext fetch_target_list() throws RecognitionException {
		Fetch_target_listContext _localctx = new Fetch_target_listContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_fetch_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1520); target_specification();
			setState(1525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1521); match(COMMA);
				setState(1522); target_specification();
				}
				}
				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_specificationContext extends ParserRuleContext {
		public Variable_specificationContext variable_specification() {
			return getRuleContext(Variable_specificationContext.class,0);
		}
		public Parameter_specificationContext parameter_specification() {
			return getRuleContext(Parameter_specificationContext.class,0);
		}
		public Target_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTarget_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTarget_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTarget_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_specificationContext target_specification() throws RecognitionException {
		Target_specificationContext _localctx = new Target_specificationContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_target_specification);
		try {
			setState(1530);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1528); parameter_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1529); variable_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(Sql92Parser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1532); match(CLOSE);
			setState(1533); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statement_single_rowContext extends ParserRuleContext {
		public Table_expressionContext table_expression() {
			return getRuleContext(Table_expressionContext.class,0);
		}
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public TerminalNode INTO() { return getToken(Sql92Parser.INTO, 0); }
		public Select_target_listContext select_target_list() {
			return getRuleContext(Select_target_listContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(Sql92Parser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Select_statement_single_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement_single_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_statement_single_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_statement_single_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_statement_single_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statement_single_rowContext select_statement_single_row() throws RecognitionException {
		Select_statement_single_rowContext _localctx = new Select_statement_single_rowContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_select_statement_single_row);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1535); match(SELECT);
			setState(1537);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1536); set_qualifier();
				}
			}

			setState(1539); select_list();
			setState(1540); match(INTO);
			setState(1541); select_target_list();
			setState(1542); table_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Direct_select_statement_multiple_rowsContext extends ParserRuleContext {
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Direct_select_statement_multiple_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direct_select_statement_multiple_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDirect_select_statement_multiple_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDirect_select_statement_multiple_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDirect_select_statement_multiple_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Direct_select_statement_multiple_rowsContext direct_select_statement_multiple_rows() throws RecognitionException {
		Direct_select_statement_multiple_rowsContext _localctx = new Direct_select_statement_multiple_rowsContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_direct_select_statement_multiple_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1544); query_specification();
			setState(1546);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1545); order_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public Select_sublistsContext select_sublists() {
			return getRuleContext(Select_sublistsContext.class,0);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_select_list);
		try {
			setState(1550);
			switch (_input.LA(1)) {
			case ASTERISK:
				enterOuterAlt(_localctx, 1);
				{
				setState(1548); match(ASTERISK);
				}
				break;
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case B_:
			case BIT_LENGTH:
			case C_:
			case CASE:
			case CAST:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case COALESCE:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case EXTRACT:
			case INTERVAL:
			case LOWER:
			case MAX:
			case MIN:
			case MODULE:
			case N_:
			case NULLIF:
			case OCTET_LENGTH:
			case POSITION:
			case SESSION_USER:
			case SUBSTRING:
			case SUM:
			case SYSTEM_USER:
			case TIME:
			case TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case UPPER:
			case USER:
			case VALUE:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1549); select_sublists();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_sublistsContext extends ParserRuleContext {
		public Select_sublistContext select_sublist(int i) {
			return getRuleContext(Select_sublistContext.class,i);
		}
		public List<Select_sublistContext> select_sublist() {
			return getRuleContexts(Select_sublistContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Select_sublistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_sublists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_sublists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_sublists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_sublists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_sublistsContext select_sublists() throws RecognitionException {
		Select_sublistsContext _localctx = new Select_sublistsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_select_sublists);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1552); select_sublist();
			setState(1557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1553); match(COMMA);
				setState(1554); select_sublist();
				}
				}
				setState(1559);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_sublistContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public Derived_columnContext derived_column() {
			return getRuleContext(Derived_columnContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Select_sublistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_sublist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_sublist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_sublist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_sublist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_sublistContext select_sublist() throws RecognitionException {
		Select_sublistContext _localctx = new Select_sublistContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_select_sublist);
		try {
			setState(1565);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1560); derived_column();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1561); table_name();
				setState(1562); match(PERIOD);
				setState(1563); match(ASTERISK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_columnContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public As_clauseContext as_clause() {
			return getRuleContext(As_clauseContext.class,0);
		}
		public Derived_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDerived_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDerived_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDerived_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_columnContext derived_column() throws RecognitionException {
		Derived_columnContext _localctx = new Derived_columnContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_derived_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567); value_expression();
			setState(1569);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1568); as_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_target_listContext extends ParserRuleContext {
		public Target_specificationContext target_specification(int i) {
			return getRuleContext(Target_specificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Target_specificationContext> target_specification() {
			return getRuleContexts(Target_specificationContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Select_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSelect_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSelect_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSelect_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_target_listContext select_target_list() throws RecognitionException {
		Select_target_listContext _localctx = new Select_target_listContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_select_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1571); target_specification();
			setState(1576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1572); match(COMMA);
				setState(1573); target_specification();
				}
				}
				setState(1578);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_expressionContext extends ParserRuleContext {
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_expressionContext table_expression() throws RecognitionException {
		Table_expressionContext _localctx = new Table_expressionContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_table_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1579); from_clause();
			setState(1581);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(1580); where_clause();
				}
				break;
			}
			setState(1584);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(1583); group_by_clause();
				}
				break;
			}
			setState(1587);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1586); having_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_from_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1589); match(FROM);
			setState(1590); table_reference();
			setState(1595);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1591); match(COMMA);
					setState(1592); table_reference();
					}
					} 
				}
				setState(1597);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_referenceContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Normal_tableContext normal_table() {
			return getRuleContext(Normal_tableContext.class,0);
		}
		public Table_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_reference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_reference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_referenceContext table_reference() throws RecognitionException {
		Table_referenceContext _localctx = new Table_referenceContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_table_reference);
		try {
			setState(1600);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1598); normal_table();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1599); joined_table(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Normal_tableContext extends ParserRuleContext {
		public Correlation_specificationContext correlation_specification() {
			return getRuleContext(Correlation_specificationContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Normal_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normal_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNormal_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNormal_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNormal_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Normal_tableContext normal_table() throws RecognitionException {
		Normal_tableContext _localctx = new Normal_tableContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_normal_table);
		try {
			setState(1609);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case MODULE:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1602); table_name();
				setState(1604);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(1603); correlation_specification();
					}
					break;
				}
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1606); derived_table();
				setState(1607); correlation_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(Sql92Parser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(Sql92Parser.NATURAL, 0); }
		public Normal_tableContext normal_table() {
			return getRuleContext(Normal_tableContext.class,0);
		}
		public List<Joined_tableContext> joined_table() {
			return getRuleContexts(Joined_tableContext.class);
		}
		public TerminalNode CROSS() { return getToken(Sql92Parser.CROSS, 0); }
		public Join_specificationContext join_specification() {
			return getRuleContext(Join_specificationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Joined_tableContext joined_table(int i) {
			return getRuleContext(Joined_tableContext.class,i);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoined_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoined_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoined_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		return joined_table(0);
	}

	private Joined_tableContext joined_table(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, _parentState);
		Joined_tableContext _prevctx = _localctx;
		int _startState = 212;
		enterRecursionRule(_localctx, 212, RULE_joined_table, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1617);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1612); match(LEFT_PAREN);
				setState(1613); joined_table(0);
				setState(1614); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(1616); normal_table();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1637);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,83,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1635);
					switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
					case 1:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(1619);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1620); match(CROSS);
						setState(1621); match(JOIN);
						setState(1622); joined_table(5);
						}
						break;
					case 2:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(1623);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1625);
						_la = _input.LA(1);
						if (_la==NATURAL) {
							{
							setState(1624); match(NATURAL);
							}
						}

						setState(1628);
						_la = _input.LA(1);
						if (((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (FULL - 161)) | (1L << (INNER - 161)) | (1L << (LEFT - 161)))) != 0) || _la==RIGHT || _la==UNION) {
							{
							setState(1627); join_type();
							}
						}

						setState(1630); match(JOIN);
						setState(1631); joined_table(0);
						setState(1633);
						switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
						case 1:
							{
							setState(1632); join_specification();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(1639);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,83,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Correlation_specificationContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(Sql92Parser.AS, 0); }
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public Derived_column_listContext derived_column_list() {
			return getRuleContext(Derived_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Correlation_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCorrelation_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCorrelation_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCorrelation_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Correlation_specificationContext correlation_specification() throws RecognitionException {
		Correlation_specificationContext _localctx = new Correlation_specificationContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_correlation_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1641);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1640); match(AS);
				}
			}

			setState(1643); correlation_name();
			setState(1648);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1644); match(LEFT_PAREN);
				setState(1645); derived_column_list();
				setState(1646); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Derived_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDerived_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDerived_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDerived_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_column_listContext derived_column_list() throws RecognitionException {
		Derived_column_listContext _localctx = new Derived_column_listContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_derived_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1650); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDerived_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDerived_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_derived_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1652); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(Sql92Parser.OUTER, 0); }
		public TerminalNode UNION() { return getToken(Sql92Parser.UNION, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public TerminalNode INNER() { return getToken(Sql92Parser.INNER, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_join_type);
		int _la;
		try {
			setState(1660);
			switch (_input.LA(1)) {
			case INNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1654); match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1655); outer_join_type();
				setState(1657);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1656); match(OUTER);
					}
				}

				}
				break;
			case UNION:
				enterOuterAlt(_localctx, 3);
				{
				setState(1659); match(UNION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(Sql92Parser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(Sql92Parser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(Sql92Parser.RIGHT, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOuter_join_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1662);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_specificationContext extends ParserRuleContext {
		public Named_columns_joinContext named_columns_join() {
			return getRuleContext(Named_columns_joinContext.class,0);
		}
		public Join_conditionContext join_condition() {
			return getRuleContext(Join_conditionContext.class,0);
		}
		public Join_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoin_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoin_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoin_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_specificationContext join_specification() throws RecognitionException {
		Join_specificationContext _localctx = new Join_specificationContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_join_specification);
		try {
			setState(1666);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(1664); join_condition();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1665); named_columns_join();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_conditionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(Sql92Parser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoin_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoin_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoin_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_conditionContext join_condition() throws RecognitionException {
		Join_conditionContext _localctx = new Join_conditionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_join_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1668); match(ON);
			setState(1669); search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_columns_joinContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(Sql92Parser.USING, 0); }
		public Join_column_listContext join_column_list() {
			return getRuleContext(Join_column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Named_columns_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_columns_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNamed_columns_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNamed_columns_join(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNamed_columns_join(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Named_columns_joinContext named_columns_join() throws RecognitionException {
		Named_columns_joinContext _localctx = new Named_columns_joinContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_named_columns_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1671); match(USING);
			setState(1672); match(LEFT_PAREN);
			setState(1673); join_column_list();
			setState(1674); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Join_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterJoin_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitJoin_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitJoin_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_column_listContext join_column_list() throws RecognitionException {
		Join_column_listContext _localctx = new Join_column_listContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_join_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1676); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1678); match(WHERE);
			setState(1679); search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(Sql92Parser.HAVING, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1681); match(HAVING);
			setState(1682); search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_data_change_statementContext extends ParserRuleContext {
		public Delete_statement_searchedContext delete_statement_searched() {
			return getRuleContext(Delete_statement_searchedContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Delete_statement_positionedContext delete_statement_positioned() {
			return getRuleContext(Delete_statement_positionedContext.class,0);
		}
		public Update_statement_searchedContext update_statement_searched() {
			return getRuleContext(Update_statement_searchedContext.class,0);
		}
		public Update_statement_positionContext update_statement_position() {
			return getRuleContext(Update_statement_positionContext.class,0);
		}
		public Sql_data_change_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_data_change_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_data_change_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_data_change_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_data_change_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_data_change_statementContext sql_data_change_statement() throws RecognitionException {
		Sql_data_change_statementContext _localctx = new Sql_data_change_statementContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_sql_data_change_statement);
		try {
			setState(1689);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1684); delete_statement_positioned();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1685); delete_statement_searched();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1686); insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1687); update_statement_position();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1688); update_statement_searched();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_positionedContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(Sql92Parser.OF, 0); }
		public TerminalNode CURRENT() { return getToken(Sql92Parser.CURRENT, 0); }
		public TerminalNode DELETE() { return getToken(Sql92Parser.DELETE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Delete_statement_positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_positioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelete_statement_positioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelete_statement_positioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelete_statement_positioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statement_positionedContext delete_statement_positioned() throws RecognitionException {
		Delete_statement_positionedContext _localctx = new Delete_statement_positionedContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_delete_statement_positioned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1691); match(DELETE);
			setState(1692); match(FROM);
			setState(1693); table_name();
			setState(1694); match(WHERE);
			setState(1695); match(CURRENT);
			setState(1696); match(OF);
			setState(1697); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_searchedContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(Sql92Parser.DELETE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Delete_statement_searchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_searched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelete_statement_searched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelete_statement_searched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelete_statement_searched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statement_searchedContext delete_statement_searched() throws RecognitionException {
		Delete_statement_searchedContext _localctx = new Delete_statement_searchedContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_delete_statement_searched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1699); match(DELETE);
			setState(1700); match(FROM);
			setState(1701); table_name();
			setState(1704);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1702); match(WHERE);
				setState(1703); search_condition(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public Insert_columns_and_sourceContext insert_columns_and_source() {
			return getRuleContext(Insert_columns_and_sourceContext.class,0);
		}
		public TerminalNode INTO() { return getToken(Sql92Parser.INTO, 0); }
		public TerminalNode INSERT() { return getToken(Sql92Parser.INSERT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1706); match(INSERT);
			setState(1707); match(INTO);
			setState(1708); table_name();
			setState(1709); insert_columns_and_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_columns_and_sourceContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(Sql92Parser.VALUES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public Insert_columns_and_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_columns_and_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInsert_columns_and_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInsert_columns_and_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInsert_columns_and_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_columns_and_sourceContext insert_columns_and_source() throws RecognitionException {
		Insert_columns_and_sourceContext _localctx = new Insert_columns_and_sourceContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_insert_columns_and_source);
		try {
			setState(1720);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case UNDERSCORE:
			case B_:
			case C_:
			case MODULE:
			case N_:
			case SELECT:
			case TABLE:
			case VALUES:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1715);
				switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
				case 1:
					{
					setState(1711); match(LEFT_PAREN);
					setState(1712); insert_column_list();
					setState(1713); match(RIGHT_PAREN);
					}
					break;
				}
				setState(1717); query_expression();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1718); match(DEFAULT);
				setState(1719); match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInsert_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInsert_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_insert_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1722); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statement_positionContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(Sql92Parser.OF, 0); }
		public TerminalNode CURRENT() { return getToken(Sql92Parser.CURRENT, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(Sql92Parser.UPDATE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Update_statement_positionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement_position; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdate_statement_position(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdate_statement_position(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdate_statement_position(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statement_positionContext update_statement_position() throws RecognitionException {
		Update_statement_positionContext _localctx = new Update_statement_positionContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_update_statement_position);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1724); match(UPDATE);
			setState(1725); table_name();
			setState(1726); match(SET);
			setState(1727); set_clause_list();
			setState(1728); match(WHERE);
			setState(1729); match(CURRENT);
			setState(1730); match(OF);
			setState(1731); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_set_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1733); set_clause();
			setState(1738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1734); match(COMMA);
				setState(1735); set_clause();
				}
				}
				setState(1740);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Update_sourceContext update_source() {
			return getRuleContext(Update_sourceContext.class,0);
		}
		public Object_columnContext object_column() {
			return getRuleContext(Object_columnContext.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_set_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1741); object_column();
			setState(1742); match(EQ);
			setState(1743); update_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Object_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterObject_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitObject_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitObject_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_columnContext object_column() throws RecognitionException {
		Object_columnContext _localctx = new Object_columnContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_object_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1745); column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_sourceContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Null_specificationContext null_specification() {
			return getRuleContext(Null_specificationContext.class,0);
		}
		public Update_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdate_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdate_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdate_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_sourceContext update_source() throws RecognitionException {
		Update_sourceContext _localctx = new Update_sourceContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_update_source);
		try {
			setState(1750);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case B_:
			case BIT_LENGTH:
			case C_:
			case CASE:
			case CAST:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case COALESCE:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case EXTRACT:
			case INTERVAL:
			case LOWER:
			case MAX:
			case MIN:
			case MODULE:
			case N_:
			case NULLIF:
			case OCTET_LENGTH:
			case POSITION:
			case SESSION_USER:
			case SUBSTRING:
			case SUM:
			case SYSTEM_USER:
			case TIME:
			case TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case UPPER:
			case USER:
			case VALUE:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1747); value_expression();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1748); null_specification();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1749); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statement_searchedContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(Sql92Parser.UPDATE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Update_statement_searchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement_searched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdate_statement_searched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdate_statement_searched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdate_statement_searched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statement_searchedContext update_statement_searched() throws RecognitionException {
		Update_statement_searchedContext _localctx = new Update_statement_searchedContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_update_statement_searched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1752); match(UPDATE);
			setState(1753); table_name();
			setState(1754); match(SET);
			setState(1755); set_clause_list();
			setState(1758);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1756); match(WHERE);
				setState(1757); search_condition(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_transaction_statementContext extends ParserRuleContext {
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Set_constraints_mode_statementContext set_constraints_mode_statement() {
			return getRuleContext(Set_constraints_mode_statementContext.class,0);
		}
		public Sql_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_transaction_statementContext sql_transaction_statement() throws RecognitionException {
		Sql_transaction_statementContext _localctx = new Sql_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_sql_transaction_statement);
		try {
			setState(1763);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1760); set_constraints_mode_statement();
				}
				break;
			case COMMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1761); commit_statement();
				}
				break;
			case ROLLBACK:
				enterOuterAlt(_localctx, 3);
				{
				setState(1762); rollback_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Trasaction_modeContext trasaction_mode(int i) {
			return getRuleContext(Trasaction_modeContext.class,i);
		}
		public List<Trasaction_modeContext> trasaction_mode() {
			return getRuleContexts(Trasaction_modeContext.class);
		}
		public TerminalNode TRANSACTION() { return getToken(Sql92Parser.TRANSACTION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Set_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_statementContext set_transaction_statement() throws RecognitionException {
		Set_transaction_statementContext _localctx = new Set_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_set_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1765); match(SET);
			setState(1766); match(TRANSACTION);
			setState(1767); trasaction_mode();
			setState(1772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1768); match(COMMA);
				setState(1769); trasaction_mode();
				}
				}
				setState(1774);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trasaction_modeContext extends ParserRuleContext {
		public Isolation_levelContext isolation_level() {
			return getRuleContext(Isolation_levelContext.class,0);
		}
		public Transaction_access_modeContext transaction_access_mode() {
			return getRuleContext(Transaction_access_modeContext.class,0);
		}
		public Diagnostics_sizeContext diagnostics_size() {
			return getRuleContext(Diagnostics_sizeContext.class,0);
		}
		public Trasaction_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trasaction_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrasaction_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrasaction_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrasaction_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trasaction_modeContext trasaction_mode() throws RecognitionException {
		Trasaction_modeContext _localctx = new Trasaction_modeContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_trasaction_mode);
		try {
			setState(1778);
			switch (_input.LA(1)) {
			case ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1775); isolation_level();
				}
				break;
			case READ:
				enterOuterAlt(_localctx, 2);
				{
				setState(1776); transaction_access_mode();
				}
				break;
			case DIAGNOSTICS:
				enterOuterAlt(_localctx, 3);
				{
				setState(1777); diagnostics_size();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Isolation_levelContext extends ParserRuleContext {
		public TerminalNode LEVEL() { return getToken(Sql92Parser.LEVEL, 0); }
		public Level_of_isolationContext level_of_isolation() {
			return getRuleContext(Level_of_isolationContext.class,0);
		}
		public TerminalNode ISOLATION() { return getToken(Sql92Parser.ISOLATION, 0); }
		public Isolation_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolation_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIsolation_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIsolation_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIsolation_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Isolation_levelContext isolation_level() throws RecognitionException {
		Isolation_levelContext _localctx = new Isolation_levelContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_isolation_level);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1780); match(ISOLATION);
			setState(1781); match(LEVEL);
			setState(1782); level_of_isolation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Level_of_isolationContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(Sql92Parser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(Sql92Parser.COMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(Sql92Parser.SERIALIZABLE, 0); }
		public TerminalNode READ() { return getToken(Sql92Parser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(Sql92Parser.UNCOMMITTED, 0); }
		public Level_of_isolationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_level_of_isolation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLevel_of_isolation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLevel_of_isolation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLevel_of_isolation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Level_of_isolationContext level_of_isolation() throws RecognitionException {
		Level_of_isolationContext _localctx = new Level_of_isolationContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_level_of_isolation);
		int _la;
		try {
			setState(1789);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(1784); match(READ);
				setState(1785);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED || _la==UNCOMMITTED) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case REPEATABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1786); match(REPEATABLE);
				setState(1787); match(READ);
				}
				break;
			case SERIALIZABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1788); match(SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_access_modeContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(Sql92Parser.READ, 0); }
		public TerminalNode ONLY() { return getToken(Sql92Parser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(Sql92Parser.WRITE, 0); }
		public Transaction_access_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_access_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTransaction_access_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTransaction_access_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTransaction_access_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_access_modeContext transaction_access_mode() throws RecognitionException {
		Transaction_access_modeContext _localctx = new Transaction_access_modeContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_transaction_access_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1791); match(READ);
			setState(1792);
			_la = _input.LA(1);
			if ( !(_la==ONLY || _la==WRITE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Diagnostics_sizeContext extends ParserRuleContext {
		public TerminalNode DIAGNOSTICS() { return getToken(Sql92Parser.DIAGNOSTICS, 0); }
		public Number_of_conditionsContext number_of_conditions() {
			return getRuleContext(Number_of_conditionsContext.class,0);
		}
		public TerminalNode SIZE() { return getToken(Sql92Parser.SIZE, 0); }
		public Diagnostics_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnostics_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDiagnostics_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDiagnostics_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDiagnostics_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Diagnostics_sizeContext diagnostics_size() throws RecognitionException {
		Diagnostics_sizeContext _localctx = new Diagnostics_sizeContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_diagnostics_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1794); match(DIAGNOSTICS);
			setState(1795); match(SIZE);
			setState(1796); number_of_conditions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Number_of_conditionsContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Number_of_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number_of_conditions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumber_of_conditions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumber_of_conditions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumber_of_conditions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Number_of_conditionsContext number_of_conditions() throws RecognitionException {
		Number_of_conditionsContext _localctx = new Number_of_conditionsContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_number_of_conditions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1798); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraints_mode_statementContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(Sql92Parser.DEFERRED, 0); }
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(Sql92Parser.CONSTRAINT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(Sql92Parser.IMMEDIATE, 0); }
		public Constraint_name_listContext constraint_name_list() {
			return getRuleContext(Constraint_name_listContext.class,0);
		}
		public Set_constraints_mode_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraints_mode_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_constraints_mode_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_constraints_mode_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_constraints_mode_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraints_mode_statementContext set_constraints_mode_statement() throws RecognitionException {
		Set_constraints_mode_statementContext _localctx = new Set_constraints_mode_statementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_set_constraints_mode_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1800); match(SET);
			setState(1801); match(CONSTRAINT);
			setState(1802); constraint_name_list();
			setState(1803);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_name_listContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Constraint_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_name_listContext constraint_name_list() throws RecognitionException {
		Constraint_name_listContext _localctx = new Constraint_name_listContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_constraint_name_list);
		int _la;
		try {
			setState(1814);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1805); match(ALL);
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1806); constraint_name();
				setState(1811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1807); match(COMMA);
					setState(1808); constraint_name();
					}
					}
					setState(1813);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(Sql92Parser.WORK, 0); }
		public TerminalNode COMMIT() { return getToken(Sql92Parser.COMMIT, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1816); match(COMMIT);
			setState(1818);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(1817); match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(Sql92Parser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(Sql92Parser.ROLLBACK, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1820); match(ROLLBACK);
			setState(1822);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(1821); match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_connection_statementContext extends ParserRuleContext {
		public Disconnect_statementContext disconnect_statement() {
			return getRuleContext(Disconnect_statementContext.class,0);
		}
		public Connect_statementContext connect_statement() {
			return getRuleContext(Connect_statementContext.class,0);
		}
		public Set_connection_statementContext set_connection_statement() {
			return getRuleContext(Set_connection_statementContext.class,0);
		}
		public Sql_connection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_connection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_connection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_connection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_connection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_connection_statementContext sql_connection_statement() throws RecognitionException {
		Sql_connection_statementContext _localctx = new Sql_connection_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_sql_connection_statement);
		try {
			setState(1827);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1824); connect_statement();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1825); set_connection_statement();
				}
				break;
			case DISCONNECT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1826); disconnect_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connect_statementContext extends ParserRuleContext {
		public Connection_targetContext connection_target() {
			return getRuleContext(Connection_targetContext.class,0);
		}
		public TerminalNode CONNECT() { return getToken(Sql92Parser.CONNECT, 0); }
		public TerminalNode TO() { return getToken(Sql92Parser.TO, 0); }
		public Connect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connect_statementContext connect_statement() throws RecognitionException {
		Connect_statementContext _localctx = new Connect_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_connect_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1829); match(CONNECT);
			setState(1830); match(TO);
			setState(1831); connection_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connection_targetContext extends ParserRuleContext {
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(Sql92Parser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public Connection_nameContext connection_name() {
			return getRuleContext(Connection_nameContext.class,0);
		}
		public TerminalNode USER() { return getToken(Sql92Parser.USER, 0); }
		public Sql_server_nameContext sql_server_name() {
			return getRuleContext(Sql_server_nameContext.class,0);
		}
		public Connection_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connection_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConnection_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConnection_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConnection_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connection_targetContext connection_target() throws RecognitionException {
		Connection_targetContext _localctx = new Connection_targetContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_connection_target);
		int _la;
		try {
			setState(1843);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COLON:
			case UNDERSCORE:
			case B_:
			case DATE:
			case INTERVAL:
			case N_:
			case TIME:
			case TIMESTAMP:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1833); sql_server_name();
				setState(1836);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1834); match(AS);
					setState(1835); connection_name();
					}
				}

				setState(1840);
				_la = _input.LA(1);
				if (_la==USER) {
					{
					setState(1838); match(USER);
					setState(1839); user_name();
					}
				}

				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1842); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_server_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Sql_server_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_server_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_server_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_server_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_server_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_server_nameContext sql_server_name() throws RecognitionException {
		Sql_server_nameContext _localctx = new Sql_server_nameContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_sql_server_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1845); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connection_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Connection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConnection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConnection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConnection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connection_nameContext connection_name() throws RecognitionException {
		Connection_nameContext _localctx = new Connection_nameContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_connection_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1847); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_nameContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public User_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUser_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUser_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUser_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_nameContext user_name() throws RecognitionException {
		User_nameContext _localctx = new User_nameContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_user_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1849); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_connection_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Connection_objectContext connection_object() {
			return getRuleContext(Connection_objectContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(Sql92Parser.CONNECTION, 0); }
		public Set_connection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_connection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_connection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_connection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_connection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_connection_statementContext set_connection_statement() throws RecognitionException {
		Set_connection_statementContext _localctx = new Set_connection_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_set_connection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1851); match(SET);
			setState(1852); match(CONNECTION);
			setState(1853); connection_object();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connection_objectContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public Connection_nameContext connection_name() {
			return getRuleContext(Connection_nameContext.class,0);
		}
		public Connection_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connection_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConnection_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConnection_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConnection_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connection_objectContext connection_object() throws RecognitionException {
		Connection_objectContext _localctx = new Connection_objectContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_connection_object);
		try {
			setState(1857);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1855); match(DEFAULT);
				}
				break;
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COLON:
			case UNDERSCORE:
			case B_:
			case DATE:
			case INTERVAL:
			case N_:
			case TIME:
			case TIMESTAMP:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1856); connection_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disconnect_statementContext extends ParserRuleContext {
		public TerminalNode DISCONNECT() { return getToken(Sql92Parser.DISCONNECT, 0); }
		public Disconnect_objectContext disconnect_object() {
			return getRuleContext(Disconnect_objectContext.class,0);
		}
		public Disconnect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDisconnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDisconnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDisconnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disconnect_statementContext disconnect_statement() throws RecognitionException {
		Disconnect_statementContext _localctx = new Disconnect_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_disconnect_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1859); match(DISCONNECT);
			setState(1860); disconnect_object();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disconnect_objectContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public Connection_objectContext connection_object() {
			return getRuleContext(Connection_objectContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(Sql92Parser.CURRENT, 0); }
		public Disconnect_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDisconnect_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDisconnect_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDisconnect_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disconnect_objectContext disconnect_object() throws RecognitionException {
		Disconnect_objectContext _localctx = new Disconnect_objectContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_disconnect_object);
		try {
			setState(1865);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COLON:
			case UNDERSCORE:
			case B_:
			case DATE:
			case DEFAULT:
			case INTERVAL:
			case N_:
			case TIME:
			case TIMESTAMP:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1862); connection_object();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1863); match(ALL);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1864); match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_session_statementContext extends ParserRuleContext {
		public Set_names_statementContext set_names_statement() {
			return getRuleContext(Set_names_statementContext.class,0);
		}
		public Set_local_time_zone_statementContext set_local_time_zone_statement() {
			return getRuleContext(Set_local_time_zone_statementContext.class,0);
		}
		public Set_session_authorization_identifier_statementContext set_session_authorization_identifier_statement() {
			return getRuleContext(Set_session_authorization_identifier_statementContext.class,0);
		}
		public Set_schema_statementContext set_schema_statement() {
			return getRuleContext(Set_schema_statementContext.class,0);
		}
		public Set_catalog_statementContext set_catalog_statement() {
			return getRuleContext(Set_catalog_statementContext.class,0);
		}
		public Sql_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_session_statementContext sql_session_statement() throws RecognitionException {
		Sql_session_statementContext _localctx = new Sql_session_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_sql_session_statement);
		try {
			setState(1872);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1867); set_catalog_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1868); set_schema_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1869); set_names_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1870); set_session_authorization_identifier_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1871); set_local_time_zone_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_catalog_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode CATALOG() { return getToken(Sql92Parser.CATALOG, 0); }
		public Value_specificationContext value_specification() {
			return getRuleContext(Value_specificationContext.class,0);
		}
		public Set_catalog_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_catalog_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_catalog_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_catalog_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_catalog_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_catalog_statementContext set_catalog_statement() throws RecognitionException {
		Set_catalog_statementContext _localctx = new Set_catalog_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_set_catalog_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1874); match(SET);
			setState(1875); match(CATALOG);
			setState(1876); value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_specificationContext extends ParserRuleContext {
		public General_value_specificationContext general_value_specification() {
			return getRuleContext(General_value_specificationContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterValue_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitValue_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitValue_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_specificationContext value_specification() throws RecognitionException {
		Value_specificationContext _localctx = new Value_specificationContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_value_specification);
		try {
			setState(1880);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case UNDERSCORE:
			case B_:
			case DATE:
			case INTERVAL:
			case N_:
			case TIME:
			case TIMESTAMP:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1878); literal();
				}
				break;
			case COLON:
			case QUESTION_MARK:
			case CURRENT_USER:
			case SESSION_USER:
			case SYSTEM_USER:
			case USER:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1879); general_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_schema_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(Sql92Parser.SCHEMA, 0); }
		public Value_specificationContext value_specification() {
			return getRuleContext(Value_specificationContext.class,0);
		}
		public Set_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_schema_statementContext set_schema_statement() throws RecognitionException {
		Set_schema_statementContext _localctx = new Set_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_set_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1882); match(SET);
			setState(1883); match(SCHEMA);
			setState(1884); value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_names_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode NAMES() { return getToken(Sql92Parser.NAMES, 0); }
		public Value_specificationContext value_specification() {
			return getRuleContext(Value_specificationContext.class,0);
		}
		public Set_names_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_names_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_names_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_names_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_names_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_names_statementContext set_names_statement() throws RecognitionException {
		Set_names_statementContext _localctx = new Set_names_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_set_names_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1886); match(SET);
			setState(1887); match(NAMES);
			setState(1888); value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_authorization_identifier_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode SESSION() { return getToken(Sql92Parser.SESSION, 0); }
		public Value_specificationContext value_specification() {
			return getRuleContext(Value_specificationContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(Sql92Parser.AUTHORIZATION, 0); }
		public Set_session_authorization_identifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_authorization_identifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_session_authorization_identifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_session_authorization_identifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_session_authorization_identifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_authorization_identifier_statementContext set_session_authorization_identifier_statement() throws RecognitionException {
		Set_session_authorization_identifier_statementContext _localctx = new Set_session_authorization_identifier_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_set_session_authorization_identifier_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1890); match(SET);
			setState(1891); match(SESSION);
			setState(1892); match(AUTHORIZATION);
			setState(1893); value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_local_time_zone_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode TIME() { return getToken(Sql92Parser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(Sql92Parser.ZONE, 0); }
		public Set_time_zone_valueContext set_time_zone_value() {
			return getRuleContext(Set_time_zone_valueContext.class,0);
		}
		public Set_local_time_zone_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_local_time_zone_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_local_time_zone_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_local_time_zone_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_local_time_zone_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_local_time_zone_statementContext set_local_time_zone_statement() throws RecognitionException {
		Set_local_time_zone_statementContext _localctx = new Set_local_time_zone_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_set_local_time_zone_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1895); match(SET);
			setState(1896); match(TIME);
			setState(1897); match(ZONE);
			setState(1898); set_time_zone_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_time_zone_valueContext extends ParserRuleContext {
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(Sql92Parser.LOCAL, 0); }
		public Set_time_zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_time_zone_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_time_zone_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_time_zone_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_time_zone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_time_zone_valueContext set_time_zone_value() throws RecognitionException {
		Set_time_zone_valueContext _localctx = new Set_time_zone_valueContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_set_time_zone_value);
		try {
			setState(1902);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case B_:
			case BIT_LENGTH:
			case C_:
			case CASE:
			case CAST:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case COALESCE:
			case COUNT:
			case CURRENT_USER:
			case DATE:
			case EXTRACT:
			case INTERVAL:
			case MAX:
			case MIN:
			case MODULE:
			case N_:
			case NULLIF:
			case OCTET_LENGTH:
			case POSITION:
			case SESSION_USER:
			case SUM:
			case SYSTEM_USER:
			case TIME:
			case TIMESTAMP:
			case USER:
			case VALUE:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1900); interval_value_expression(0);
				}
				break;
			case LOCAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1901); match(LOCAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_dynamic_statementContext extends ParserRuleContext {
		public Describe_statementContext describe_statement() {
			return getRuleContext(Describe_statementContext.class,0);
		}
		public System_descriptor_statementContext system_descriptor_statement() {
			return getRuleContext(System_descriptor_statementContext.class,0);
		}
		public Sql_dynamic_data_statementContext sql_dynamic_data_statement() {
			return getRuleContext(Sql_dynamic_data_statementContext.class,0);
		}
		public Deallocate_prepared_statementContext deallocate_prepared_statement() {
			return getRuleContext(Deallocate_prepared_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Execute_immediate_statemnetContext execute_immediate_statemnet() {
			return getRuleContext(Execute_immediate_statemnetContext.class,0);
		}
		public Prepare_statementContext prepare_statement() {
			return getRuleContext(Prepare_statementContext.class,0);
		}
		public Sql_dynamic_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_dynamic_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_dynamic_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_dynamic_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_dynamic_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_dynamic_statementContext sql_dynamic_statement() throws RecognitionException {
		Sql_dynamic_statementContext _localctx = new Sql_dynamic_statementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_sql_dynamic_statement);
		try {
			setState(1911);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1904); system_descriptor_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1905); prepare_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1906); deallocate_prepared_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1907); describe_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1908); execute_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1909); execute_immediate_statemnet();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1910); sql_dynamic_data_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class System_descriptor_statementContext extends ParserRuleContext {
		public Get_descriptor_statementContext get_descriptor_statement() {
			return getRuleContext(Get_descriptor_statementContext.class,0);
		}
		public Deallocate_descriptor_statementContext deallocate_descriptor_statement() {
			return getRuleContext(Deallocate_descriptor_statementContext.class,0);
		}
		public Allocate_descriptor_statementContext allocate_descriptor_statement() {
			return getRuleContext(Allocate_descriptor_statementContext.class,0);
		}
		public Set_descriptor_statementContext set_descriptor_statement() {
			return getRuleContext(Set_descriptor_statementContext.class,0);
		}
		public System_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSystem_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSystem_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSystem_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final System_descriptor_statementContext system_descriptor_statement() throws RecognitionException {
		System_descriptor_statementContext _localctx = new System_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_system_descriptor_statement);
		try {
			setState(1917);
			switch (_input.LA(1)) {
			case ALLOCATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1913); allocate_descriptor_statement();
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1914); deallocate_descriptor_statement();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1915); set_descriptor_statement();
				}
				break;
			case GET:
				enterOuterAlt(_localctx, 4);
				{
				setState(1916); get_descriptor_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Allocate_descriptor_statementContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(Sql92Parser.WITH, 0); }
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public TerminalNode DESCRIPTOR() { return getToken(Sql92Parser.DESCRIPTOR, 0); }
		public TerminalNode MAX() { return getToken(Sql92Parser.MAX, 0); }
		public TerminalNode ALLOCATE() { return getToken(Sql92Parser.ALLOCATE, 0); }
		public OccurencesContext occurences() {
			return getRuleContext(OccurencesContext.class,0);
		}
		public Allocate_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocate_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAllocate_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAllocate_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAllocate_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allocate_descriptor_statementContext allocate_descriptor_statement() throws RecognitionException {
		Allocate_descriptor_statementContext _localctx = new Allocate_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_allocate_descriptor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1919); match(ALLOCATE);
			setState(1920); match(DESCRIPTOR);
			setState(1921); descriptor_name();
			setState(1925);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1922); match(WITH);
				setState(1923); match(MAX);
				setState(1924); occurences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Descriptor_nameContext extends ParserRuleContext {
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Descriptor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descriptor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescriptor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescriptor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescriptor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Descriptor_nameContext descriptor_name() throws RecognitionException {
		Descriptor_nameContext _localctx = new Descriptor_nameContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_descriptor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1927); scope_option();
			setState(1928); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scope_optionContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(Sql92Parser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(Sql92Parser.LOCAL, 0); }
		public Scope_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterScope_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitScope_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitScope_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scope_optionContext scope_option() throws RecognitionException {
		Scope_optionContext _localctx = new Scope_optionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_scope_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1930);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL || _la==LOCAL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OccurencesContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public OccurencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_occurences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOccurences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOccurences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOccurences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OccurencesContext occurences() throws RecognitionException {
		OccurencesContext _localctx = new OccurencesContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_occurences);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1932); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_descriptor_statementContext extends ParserRuleContext {
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public TerminalNode DESCRIPTOR() { return getToken(Sql92Parser.DESCRIPTOR, 0); }
		public TerminalNode DEALLOCATE() { return getToken(Sql92Parser.DEALLOCATE, 0); }
		public Deallocate_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDeallocate_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDeallocate_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDeallocate_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_descriptor_statementContext deallocate_descriptor_statement() throws RecognitionException {
		Deallocate_descriptor_statementContext _localctx = new Deallocate_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_deallocate_descriptor_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1934); match(DEALLOCATE);
			setState(1935); match(DESCRIPTOR);
			setState(1936); descriptor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_descriptor_statementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Set_descriptor_informationContext set_descriptor_information() {
			return getRuleContext(Set_descriptor_informationContext.class,0);
		}
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public TerminalNode DESCRIPTOR() { return getToken(Sql92Parser.DESCRIPTOR, 0); }
		public Set_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_descriptor_statementContext set_descriptor_statement() throws RecognitionException {
		Set_descriptor_statementContext _localctx = new Set_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_set_descriptor_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1938); match(SET);
			setState(1939); match(DESCRIPTOR);
			setState(1940); descriptor_name();
			setState(1941); set_descriptor_information();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_descriptor_informationContext extends ParserRuleContext {
		public Item_numberContext item_number() {
			return getRuleContext(Item_numberContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(Sql92Parser.VALUE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Set_item_informationContext> set_item_information() {
			return getRuleContexts(Set_item_informationContext.class);
		}
		public Set_countContext set_count() {
			return getRuleContext(Set_countContext.class,0);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Set_item_informationContext set_item_information(int i) {
			return getRuleContext(Set_item_informationContext.class,i);
		}
		public Set_descriptor_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_descriptor_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_descriptor_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_descriptor_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_descriptor_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_descriptor_informationContext set_descriptor_information() throws RecognitionException {
		Set_descriptor_informationContext _localctx = new Set_descriptor_informationContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_set_descriptor_information);
		int _la;
		try {
			setState(1954);
			switch (_input.LA(1)) {
			case COUNT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1943); set_count();
				}
				break;
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1944); match(VALUE);
				setState(1945); item_number();
				setState(1946); set_item_information();
				setState(1951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1947); match(COMMA);
					setState(1948); set_item_information();
					}
					}
					setState(1953);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_countContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(Sql92Parser.COUNT, 0); }
		public Simple_value_specification_1Context simple_value_specification_1() {
			return getRuleContext(Simple_value_specification_1Context.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Set_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_countContext set_count() throws RecognitionException {
		Set_countContext _localctx = new Set_countContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_set_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1956); match(COUNT);
			setState(1957); match(EQ);
			setState(1958); simple_value_specification_1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_value_specification_1Context extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Simple_value_specification_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_value_specification_1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_value_specification_1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_value_specification_1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_value_specification_1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_value_specification_1Context simple_value_specification_1() throws RecognitionException {
		Simple_value_specification_1Context _localctx = new Simple_value_specification_1Context(_ctx, getState());
		enterRule(_localctx, 340, RULE_simple_value_specification_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1960); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Item_numberContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Item_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_item_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterItem_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitItem_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitItem_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Item_numberContext item_number() throws RecognitionException {
		Item_numberContext _localctx = new Item_numberContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_item_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1962); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_item_informationContext extends ParserRuleContext {
		public Descriptor_item_nameContext descriptor_item_name() {
			return getRuleContext(Descriptor_item_nameContext.class,0);
		}
		public Simple_value_specification_2Context simple_value_specification_2() {
			return getRuleContext(Simple_value_specification_2Context.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Set_item_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_item_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_item_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_item_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_item_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_item_informationContext set_item_information() throws RecognitionException {
		Set_item_informationContext _localctx = new Set_item_informationContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_set_item_information);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1964); descriptor_item_name();
			setState(1965); match(EQ);
			setState(1966); simple_value_specification_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Descriptor_item_nameContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode UNNAMED() { return getToken(Sql92Parser.UNNAMED, 0); }
		public TerminalNode INDICATOR() { return getToken(Sql92Parser.INDICATOR, 0); }
		public TerminalNode DATETIME_INTERVAL_PRECISION() { return getToken(Sql92Parser.DATETIME_INTERVAL_PRECISION, 0); }
		public TerminalNode SCHEMA() { return getToken(Sql92Parser.SCHEMA, 0); }
		public TerminalNode RETURNED_OCTET_LENGTH() { return getToken(Sql92Parser.RETURNED_OCTET_LENGTH, 0); }
		public TerminalNode DATETIME_INTERVAL_CODE() { return getToken(Sql92Parser.DATETIME_INTERVAL_CODE, 0); }
		public TerminalNode CATALOG() { return getToken(Sql92Parser.CATALOG, 0); }
		public TerminalNode PRECISION() { return getToken(Sql92Parser.PRECISION, 0); }
		public TerminalNode SCALE() { return getToken(Sql92Parser.SCALE, 0); }
		public TerminalNode CHARACTER() { return getToken(Sql92Parser.CHARACTER, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(Sql92Parser.OCTET_LENGTH, 0); }
		public TerminalNode RETURNED_LENGTH() { return getToken(Sql92Parser.RETURNED_LENGTH, 0); }
		public TerminalNode DATA() { return getToken(Sql92Parser.DATA, 0); }
		public TerminalNode COLLATION() { return getToken(Sql92Parser.COLLATION, 0); }
		public TerminalNode NULLABLE() { return getToken(Sql92Parser.NULLABLE, 0); }
		public TerminalNode NAME() { return getToken(Sql92Parser.NAME, 0); }
		public TerminalNode LENGTH() { return getToken(Sql92Parser.LENGTH, 0); }
		public TerminalNode TYPE() { return getToken(Sql92Parser.TYPE, 0); }
		public Descriptor_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descriptor_item_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescriptor_item_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescriptor_item_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescriptor_item_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Descriptor_item_nameContext descriptor_item_name() throws RecognitionException {
		Descriptor_item_nameContext _localctx = new Descriptor_item_nameContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_descriptor_item_name);
		try {
			setState(1997);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1968); match(TYPE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1969); match(LENGTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1970); match(OCTET_LENGTH);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1971); match(RETURNED_LENGTH);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1972); match(RETURNED_OCTET_LENGTH);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1973); match(PRECISION);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1974); match(SCALE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1975); match(DATETIME_INTERVAL_CODE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1976); match(DATETIME_INTERVAL_PRECISION);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1977); match(NULLABLE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1978); match(INDICATOR);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1979); match(DATA);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1980); match(NAME);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1981); match(UNNAMED);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1982); match(COLLATION);
				setState(1983); match(CATALOG);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1984); match(COLLATION);
				setState(1985); match(SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1986); match(COLLATION);
				setState(1987); match(NAME);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1988); match(CHARACTER);
				setState(1989); match(SET);
				setState(1990); match(CATALOG);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1991); match(CHARACTER);
				setState(1992); match(SET);
				setState(1993); match(SCHEMA);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1994); match(CHARACTER);
				setState(1995); match(SET);
				setState(1996); match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_value_specification_2Context extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Simple_value_specification_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_value_specification_2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_value_specification_2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_value_specification_2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_value_specification_2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_value_specification_2Context simple_value_specification_2() throws RecognitionException {
		Simple_value_specification_2Context _localctx = new Simple_value_specification_2Context(_ctx, getState());
		enterRule(_localctx, 348, RULE_simple_value_specification_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1999); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_descriptor_statementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(Sql92Parser.GET, 0); }
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public TerminalNode DESCRIPTOR() { return getToken(Sql92Parser.DESCRIPTOR, 0); }
		public Get_descriptor_informationContext get_descriptor_information() {
			return getRuleContext(Get_descriptor_informationContext.class,0);
		}
		public Get_descriptor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_descriptor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_descriptor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_descriptor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_descriptor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_descriptor_statementContext get_descriptor_statement() throws RecognitionException {
		Get_descriptor_statementContext _localctx = new Get_descriptor_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_get_descriptor_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2001); match(GET);
			setState(2002); match(DESCRIPTOR);
			setState(2003); descriptor_name();
			setState(2004); get_descriptor_information();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_descriptor_informationContext extends ParserRuleContext {
		public Get_item_informationContext get_item_information(int i) {
			return getRuleContext(Get_item_informationContext.class,i);
		}
		public Item_numberContext item_number() {
			return getRuleContext(Item_numberContext.class,0);
		}
		public List<Get_item_informationContext> get_item_information() {
			return getRuleContexts(Get_item_informationContext.class);
		}
		public TerminalNode VALUE() { return getToken(Sql92Parser.VALUE, 0); }
		public Get_countContext get_count() {
			return getRuleContext(Get_countContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Get_descriptor_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_descriptor_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_descriptor_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_descriptor_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_descriptor_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_descriptor_informationContext get_descriptor_information() throws RecognitionException {
		Get_descriptor_informationContext _localctx = new Get_descriptor_informationContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_get_descriptor_information);
		int _la;
		try {
			setState(2017);
			switch (_input.LA(1)) {
			case COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2006); get_count();
				}
				break;
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2007); match(VALUE);
				setState(2008); item_number();
				setState(2009); get_item_information();
				setState(2014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2010); match(COMMA);
					setState(2011); get_item_information();
					}
					}
					setState(2016);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_countContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(Sql92Parser.COUNT, 0); }
		public Simple_target_specification_1Context simple_target_specification_1() {
			return getRuleContext(Simple_target_specification_1Context.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Get_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_countContext get_count() throws RecognitionException {
		Get_countContext _localctx = new Get_countContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_get_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2019); simple_target_specification_1();
			setState(2020); match(EQ);
			setState(2021); match(COUNT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_target_specification_1Context extends ParserRuleContext {
		public Simple_target_specificationContext simple_target_specification() {
			return getRuleContext(Simple_target_specificationContext.class,0);
		}
		public Simple_target_specification_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_target_specification_1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_target_specification_1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_target_specification_1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_target_specification_1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_target_specification_1Context simple_target_specification_1() throws RecognitionException {
		Simple_target_specification_1Context _localctx = new Simple_target_specification_1Context(_ctx, getState());
		enterRule(_localctx, 356, RULE_simple_target_specification_1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2023); simple_target_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_item_informationContext extends ParserRuleContext {
		public Descriptor_item_nameContext descriptor_item_name() {
			return getRuleContext(Descriptor_item_nameContext.class,0);
		}
		public Simple_target_specification_2Context simple_target_specification_2() {
			return getRuleContext(Simple_target_specification_2Context.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Get_item_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_item_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_item_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_item_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_item_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_item_informationContext get_item_information() throws RecognitionException {
		Get_item_informationContext _localctx = new Get_item_informationContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_get_item_information);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2025); simple_target_specification_2();
			setState(2026); match(EQ);
			setState(2027); descriptor_item_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_target_specification_2Context extends ParserRuleContext {
		public Simple_target_specificationContext simple_target_specification() {
			return getRuleContext(Simple_target_specificationContext.class,0);
		}
		public Simple_target_specification_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_target_specification_2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_target_specification_2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_target_specification_2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_target_specification_2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_target_specification_2Context simple_target_specification_2() throws RecognitionException {
		Simple_target_specification_2Context _localctx = new Simple_target_specification_2Context(_ctx, getState());
		enterRule(_localctx, 360, RULE_simple_target_specification_2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2029); simple_target_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepare_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public Sql_statement_variableContext sql_statement_variable() {
			return getRuleContext(Sql_statement_variableContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public TerminalNode PREPARE() { return getToken(Sql92Parser.PREPARE, 0); }
		public Prepare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrepare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrepare_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrepare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepare_statementContext prepare_statement() throws RecognitionException {
		Prepare_statementContext _localctx = new Prepare_statementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_prepare_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2031); match(PREPARE);
			setState(2032); sql_statement_name();
			setState(2033); match(FROM);
			setState(2034); sql_statement_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statement_nameContext extends ParserRuleContext {
		public Extended_statement_nameContext extended_statement_name() {
			return getRuleContext(Extended_statement_nameContext.class,0);
		}
		public Statement_nameContext statement_name() {
			return getRuleContext(Statement_nameContext.class,0);
		}
		public Sql_statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_statement_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_statement_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_statement_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statement_nameContext sql_statement_name() throws RecognitionException {
		Sql_statement_nameContext _localctx = new Sql_statement_nameContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_sql_statement_name);
		try {
			setState(2038);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2036); statement_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2037); extended_statement_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_statement_nameContext extends ParserRuleContext {
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Extended_statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_statement_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtended_statement_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtended_statement_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtended_statement_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extended_statement_nameContext extended_statement_name() throws RecognitionException {
		Extended_statement_nameContext _localctx = new Extended_statement_nameContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_extended_statement_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2041);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				setState(2040); scope_option();
				}
			}

			setState(2043); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statement_variableContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Sql_statement_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_statement_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_statement_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_statement_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statement_variableContext sql_statement_variable() throws RecognitionException {
		Sql_statement_variableContext _localctx = new Sql_statement_variableContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_sql_statement_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2045); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_prepared_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(Sql92Parser.DEALLOCATE, 0); }
		public TerminalNode PREPARE() { return getToken(Sql92Parser.PREPARE, 0); }
		public Deallocate_prepared_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_prepared_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDeallocate_prepared_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDeallocate_prepared_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDeallocate_prepared_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_prepared_statementContext deallocate_prepared_statement() throws RecognitionException {
		Deallocate_prepared_statementContext _localctx = new Deallocate_prepared_statementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_deallocate_prepared_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2047); match(DEALLOCATE);
			setState(2048); match(PREPARE);
			setState(2049); sql_statement_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Describe_statementContext extends ParserRuleContext {
		public Describe_output_statementContext describe_output_statement() {
			return getRuleContext(Describe_output_statementContext.class,0);
		}
		public Describe_input_statementContext describe_input_statement() {
			return getRuleContext(Describe_input_statementContext.class,0);
		}
		public Describe_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescribe_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescribe_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescribe_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_statementContext describe_statement() throws RecognitionException {
		Describe_statementContext _localctx = new Describe_statementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_describe_statement);
		try {
			setState(2053);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2051); describe_input_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2052); describe_output_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Describe_input_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public TerminalNode INPUT() { return getToken(Sql92Parser.INPUT, 0); }
		public Using_descriptorContext using_descriptor() {
			return getRuleContext(Using_descriptorContext.class,0);
		}
		public TerminalNode DESCRIBE() { return getToken(Sql92Parser.DESCRIBE, 0); }
		public Describe_input_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_input_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescribe_input_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescribe_input_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescribe_input_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_input_statementContext describe_input_statement() throws RecognitionException {
		Describe_input_statementContext _localctx = new Describe_input_statementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_describe_input_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2055); match(DESCRIBE);
			setState(2056); match(INPUT);
			setState(2057); sql_statement_name();
			setState(2058); using_descriptor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_descriptorContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(Sql92Parser.INTO, 0); }
		public Descriptor_nameContext descriptor_name() {
			return getRuleContext(Descriptor_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(Sql92Parser.USING, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(Sql92Parser.DESCRIPTOR, 0); }
		public TerminalNode SQL() { return getToken(Sql92Parser.SQL, 0); }
		public Using_descriptorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_descriptor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUsing_descriptor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUsing_descriptor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUsing_descriptor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_descriptorContext using_descriptor() throws RecognitionException {
		Using_descriptorContext _localctx = new Using_descriptorContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_using_descriptor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			_la = _input.LA(1);
			if ( !(_la==INTO || _la==USING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2061); match(SQL);
			setState(2062); match(DESCRIPTOR);
			setState(2063); descriptor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Describe_output_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public TerminalNode OUTPUT() { return getToken(Sql92Parser.OUTPUT, 0); }
		public Using_descriptorContext using_descriptor() {
			return getRuleContext(Using_descriptorContext.class,0);
		}
		public TerminalNode DESCRIBE() { return getToken(Sql92Parser.DESCRIBE, 0); }
		public Describe_output_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_output_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDescribe_output_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDescribe_output_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDescribe_output_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_output_statementContext describe_output_statement() throws RecognitionException {
		Describe_output_statementContext _localctx = new Describe_output_statementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_describe_output_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2065); match(DESCRIBE);
			setState(2066); match(OUTPUT);
			setState(2067); sql_statement_name();
			setState(2068); using_descriptor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public Sql_statement_nameContext sql_statement_name() {
			return getRuleContext(Sql_statement_nameContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(Sql92Parser.EXECUTE, 0); }
		public Parameter_using_clauseContext parameter_using_clause() {
			return getRuleContext(Parameter_using_clauseContext.class,0);
		}
		public Result_using_clauseContext result_using_clause() {
			return getRuleContext(Result_using_clauseContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExecute_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_execute_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2070); match(EXECUTE);
			setState(2071); sql_statement_name();
			setState(2073);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(2072); result_using_clause();
				}
				break;
			}
			setState(2076);
			_la = _input.LA(1);
			if (_la==INTO || _la==USING) {
				{
				setState(2075); parameter_using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_using_clauseContext extends ParserRuleContext {
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Result_using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterResult_using_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitResult_using_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitResult_using_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_using_clauseContext result_using_clause() throws RecognitionException {
		Result_using_clauseContext _localctx = new Result_using_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_result_using_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078); using_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_using_clauseContext extends ParserRuleContext {
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Parameter_using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_using_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_using_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_using_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_using_clauseContext parameter_using_clause() throws RecognitionException {
		Parameter_using_clauseContext _localctx = new Parameter_using_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_parameter_using_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2080); using_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public Using_descriptorContext using_descriptor() {
			return getRuleContext(Using_descriptorContext.class,0);
		}
		public Using_argumentsContext using_arguments() {
			return getRuleContext(Using_argumentsContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_using_clause);
		try {
			setState(2084);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2082); using_arguments();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2083); using_descriptor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_argumentsContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode INTO() { return getToken(Sql92Parser.INTO, 0); }
		public TerminalNode USING() { return getToken(Sql92Parser.USING, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Using_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUsing_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUsing_arguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUsing_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_argumentsContext using_arguments() throws RecognitionException {
		Using_argumentsContext _localctx = new Using_argumentsContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_using_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2086);
			_la = _input.LA(1);
			if ( !(_la==INTO || _la==USING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2087); argument();
			setState(2092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2088); match(COMMA);
				setState(2089); argument();
				}
				}
				setState(2094);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Target_specificationContext target_specification() {
			return getRuleContext(Target_specificationContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2095); target_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediate_statemnetContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(Sql92Parser.EXECUTE, 0); }
		public Sql_statement_variableContext sql_statement_variable() {
			return getRuleContext(Sql_statement_variableContext.class,0);
		}
		public TerminalNode IMMEDIATE() { return getToken(Sql92Parser.IMMEDIATE, 0); }
		public Execute_immediate_statemnetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate_statemnet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExecute_immediate_statemnet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExecute_immediate_statemnet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExecute_immediate_statemnet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediate_statemnetContext execute_immediate_statemnet() throws RecognitionException {
		Execute_immediate_statemnetContext _localctx = new Execute_immediate_statemnetContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_execute_immediate_statemnet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2097); match(EXECUTE);
			setState(2098); match(IMMEDIATE);
			setState(2099); sql_statement_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_dynamic_data_statementContext extends ParserRuleContext {
		public Allocate_cursor_statementContext allocate_cursor_statement() {
			return getRuleContext(Allocate_cursor_statementContext.class,0);
		}
		public Dynamic_update_statement_positionedContext dynamic_update_statement_positioned() {
			return getRuleContext(Dynamic_update_statement_positionedContext.class,0);
		}
		public Dynamic_open_statementContext dynamic_open_statement() {
			return getRuleContext(Dynamic_open_statementContext.class,0);
		}
		public Dynamic_fetch_statementContext dynamic_fetch_statement() {
			return getRuleContext(Dynamic_fetch_statementContext.class,0);
		}
		public Dynamic_delete_statement_positionedContext dynamic_delete_statement_positioned() {
			return getRuleContext(Dynamic_delete_statement_positionedContext.class,0);
		}
		public Dynamic_close_statementContext dynamic_close_statement() {
			return getRuleContext(Dynamic_close_statementContext.class,0);
		}
		public Sql_dynamic_data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_dynamic_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_dynamic_data_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_dynamic_data_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_dynamic_data_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_dynamic_data_statementContext sql_dynamic_data_statement() throws RecognitionException {
		Sql_dynamic_data_statementContext _localctx = new Sql_dynamic_data_statementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_sql_dynamic_data_statement);
		try {
			setState(2107);
			switch (_input.LA(1)) {
			case ALLOCATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2101); allocate_cursor_statement();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2102); dynamic_open_statement();
				}
				break;
			case CLOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2103); dynamic_close_statement();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(2104); dynamic_fetch_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2105); dynamic_delete_statement_positioned();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2106); dynamic_update_statement_positioned();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Allocate_cursor_statementContext extends ParserRuleContext {
		public Extended_statement_nameContext extended_statement_name() {
			return getRuleContext(Extended_statement_nameContext.class,0);
		}
		public TerminalNode INSENSITIVE() { return getToken(Sql92Parser.INSENSITIVE, 0); }
		public Extended_cursor_nameContext extended_cursor_name() {
			return getRuleContext(Extended_cursor_nameContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(Sql92Parser.SCROLL, 0); }
		public TerminalNode CURSOR() { return getToken(Sql92Parser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public TerminalNode ALLOCATE() { return getToken(Sql92Parser.ALLOCATE, 0); }
		public Allocate_cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocate_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAllocate_cursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAllocate_cursor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAllocate_cursor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allocate_cursor_statementContext allocate_cursor_statement() throws RecognitionException {
		Allocate_cursor_statementContext _localctx = new Allocate_cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_allocate_cursor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2109); match(ALLOCATE);
			setState(2110); extended_cursor_name();
			setState(2112);
			_la = _input.LA(1);
			if (_la==INSENSITIVE) {
				{
				setState(2111); match(INSENSITIVE);
				}
			}

			setState(2115);
			_la = _input.LA(1);
			if (_la==SCROLL) {
				{
				setState(2114); match(SCROLL);
				}
			}

			setState(2117); match(CURSOR);
			setState(2118); match(FOR);
			setState(2119); extended_statement_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_cursor_nameContext extends ParserRuleContext {
		public Scope_optionContext scope_option() {
			return getRuleContext(Scope_optionContext.class,0);
		}
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Extended_cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtended_cursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtended_cursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtended_cursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extended_cursor_nameContext extended_cursor_name() throws RecognitionException {
		Extended_cursor_nameContext _localctx = new Extended_cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_extended_cursor_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2122);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				setState(2121); scope_option();
				}
			}

			setState(2124); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_open_statementContext extends ParserRuleContext {
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(Sql92Parser.OPEN, 0); }
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_open_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_open_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_open_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_open_statementContext dynamic_open_statement() throws RecognitionException {
		Dynamic_open_statementContext _localctx = new Dynamic_open_statementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_dynamic_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2126); match(OPEN);
			setState(2127); dynamic_cursor_name();
			setState(2129);
			_la = _input.LA(1);
			if (_la==INTO || _la==USING) {
				{
				setState(2128); using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_cursor_nameContext extends ParserRuleContext {
		public Extended_cursor_nameContext extended_cursor_name() {
			return getRuleContext(Extended_cursor_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Dynamic_cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_cursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_cursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_cursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_cursor_nameContext dynamic_cursor_name() throws RecognitionException {
		Dynamic_cursor_nameContext _localctx = new Dynamic_cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_dynamic_cursor_name);
		try {
			setState(2133);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2131); cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2132); extended_cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_close_statementContext extends ParserRuleContext {
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(Sql92Parser.CLOSE, 0); }
		public Dynamic_close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_close_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_close_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_close_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_close_statementContext dynamic_close_statement() throws RecognitionException {
		Dynamic_close_statementContext _localctx = new Dynamic_close_statementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_dynamic_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135); match(CLOSE);
			setState(2136); dynamic_cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_fetch_statementContext extends ParserRuleContext {
		public Fetch_orientationContext fetch_orientation() {
			return getRuleContext(Fetch_orientationContext.class,0);
		}
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public TerminalNode FETCH() { return getToken(Sql92Parser.FETCH, 0); }
		public Dynamic_fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_fetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_fetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_fetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_fetch_statementContext dynamic_fetch_statement() throws RecognitionException {
		Dynamic_fetch_statementContext _localctx = new Dynamic_fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_dynamic_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2138); match(FETCH);
			setState(2143);
			_la = _input.LA(1);
			if (_la==ABSOLUTE || ((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (FIRST - 153)) | (1L << (FROM - 153)) | (1L << (LAST - 153)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (NEXT - 224)) | (1L << (PRIOR - 224)) | (1L << (RELATIVE - 224)))) != 0)) {
				{
				setState(2140);
				_la = _input.LA(1);
				if (_la==ABSOLUTE || _la==FIRST || _la==LAST || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (NEXT - 224)) | (1L << (PRIOR - 224)) | (1L << (RELATIVE - 224)))) != 0)) {
					{
					setState(2139); fetch_orientation();
					}
				}

				setState(2142); match(FROM);
				}
			}

			setState(2145); dynamic_cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_delete_statement_positionedContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(Sql92Parser.OF, 0); }
		public TerminalNode CURRENT() { return getToken(Sql92Parser.CURRENT, 0); }
		public TerminalNode DELETE() { return getToken(Sql92Parser.DELETE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Dynamic_delete_statement_positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_delete_statement_positioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_delete_statement_positioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_delete_statement_positioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_delete_statement_positioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_delete_statement_positionedContext dynamic_delete_statement_positioned() throws RecognitionException {
		Dynamic_delete_statement_positionedContext _localctx = new Dynamic_delete_statement_positionedContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_dynamic_delete_statement_positioned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2147); match(DELETE);
			setState(2148); match(FROM);
			setState(2149); table_name();
			setState(2150); match(WHERE);
			setState(2151); match(CURRENT);
			setState(2152); match(OF);
			setState(2153); dynamic_cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_update_statement_positionedContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(Sql92Parser.WHERE, 0); }
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Dynamic_cursor_nameContext dynamic_cursor_name() {
			return getRuleContext(Dynamic_cursor_nameContext.class,0);
		}
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode OF() { return getToken(Sql92Parser.OF, 0); }
		public TerminalNode CURRENT() { return getToken(Sql92Parser.CURRENT, 0); }
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(Sql92Parser.UPDATE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Dynamic_update_statement_positionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_update_statement_positioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_update_statement_positioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_update_statement_positioned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_update_statement_positioned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_update_statement_positionedContext dynamic_update_statement_positioned() throws RecognitionException {
		Dynamic_update_statement_positionedContext _localctx = new Dynamic_update_statement_positionedContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_dynamic_update_statement_positioned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2155); match(UPDATE);
			setState(2156); table_name();
			setState(2157); match(SET);
			setState(2158); set_clause();
			setState(2163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2159); match(COMMA);
				setState(2160); set_clause();
				}
				}
				setState(2165);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2166); match(WHERE);
			setState(2167); match(CURRENT);
			setState(2168); match(OF);
			setState(2169); dynamic_cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_diagnostics_statementContext extends ParserRuleContext {
		public Get_diagnostics_statementContext get_diagnostics_statement() {
			return getRuleContext(Get_diagnostics_statementContext.class,0);
		}
		public Sql_diagnostics_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_diagnostics_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_diagnostics_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_diagnostics_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_diagnostics_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_diagnostics_statementContext sql_diagnostics_statement() throws RecognitionException {
		Sql_diagnostics_statementContext _localctx = new Sql_diagnostics_statementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_sql_diagnostics_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2171); get_diagnostics_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_diagnostics_statementContext extends ParserRuleContext {
		public TerminalNode DIAGNOSTICS() { return getToken(Sql92Parser.DIAGNOSTICS, 0); }
		public TerminalNode GET() { return getToken(Sql92Parser.GET, 0); }
		public Sql_diagnostics_informationContext sql_diagnostics_information() {
			return getRuleContext(Sql_diagnostics_informationContext.class,0);
		}
		public Get_diagnostics_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_diagnostics_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGet_diagnostics_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGet_diagnostics_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGet_diagnostics_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_diagnostics_statementContext get_diagnostics_statement() throws RecognitionException {
		Get_diagnostics_statementContext _localctx = new Get_diagnostics_statementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_get_diagnostics_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2173); match(GET);
			setState(2174); match(DIAGNOSTICS);
			setState(2175); sql_diagnostics_information();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_diagnostics_informationContext extends ParserRuleContext {
		public Condition_informationContext condition_information() {
			return getRuleContext(Condition_informationContext.class,0);
		}
		public Statement_informationContext statement_information() {
			return getRuleContext(Statement_informationContext.class,0);
		}
		public Sql_diagnostics_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_diagnostics_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_diagnostics_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_diagnostics_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_diagnostics_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_diagnostics_informationContext sql_diagnostics_information() throws RecognitionException {
		Sql_diagnostics_informationContext _localctx = new Sql_diagnostics_informationContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_sql_diagnostics_information);
		try {
			setState(2179);
			switch (_input.LA(1)) {
			case COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2177); statement_information();
				}
				break;
			case EXCEPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(2178); condition_information();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_informationContext extends ParserRuleContext {
		public List<Statement_information_itemContext> statement_information_item() {
			return getRuleContexts(Statement_information_itemContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Statement_information_itemContext statement_information_item(int i) {
			return getRuleContext(Statement_information_itemContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Statement_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_informationContext statement_information() throws RecognitionException {
		Statement_informationContext _localctx = new Statement_informationContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_statement_information);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2181); statement_information_item();
			setState(2186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2182); match(COMMA);
				setState(2183); statement_information_item();
				}
				}
				setState(2188);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_information_itemContext extends ParserRuleContext {
		public Simple_target_specificationContext simple_target_specification() {
			return getRuleContext(Simple_target_specificationContext.class,0);
		}
		public Statement_information_item_nameContext statement_information_item_name() {
			return getRuleContext(Statement_information_item_nameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Statement_information_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement_information_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement_information_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement_information_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_information_itemContext statement_information_item() throws RecognitionException {
		Statement_information_itemContext _localctx = new Statement_information_itemContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_statement_information_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2189); simple_target_specification();
			setState(2190); match(EQ);
			setState(2191); statement_information_item_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_information_item_nameContext extends ParserRuleContext {
		public TerminalNode ROW_COUNT() { return getToken(Sql92Parser.ROW_COUNT, 0); }
		public TerminalNode MORE() { return getToken(Sql92Parser.MORE, 0); }
		public TerminalNode DYNAMIC_FUNCTION() { return getToken(Sql92Parser.DYNAMIC_FUNCTION, 0); }
		public TerminalNode COMMAND_FUNCTION() { return getToken(Sql92Parser.COMMAND_FUNCTION, 0); }
		public TerminalNode NUMBER() { return getToken(Sql92Parser.NUMBER, 0); }
		public Statement_information_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information_item_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement_information_item_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement_information_item_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement_information_item_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_information_item_nameContext statement_information_item_name() throws RecognitionException {
		Statement_information_item_nameContext _localctx = new Statement_information_item_nameContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_statement_information_item_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2193);
			_la = _input.LA(1);
			if ( !(_la==COMMAND_FUNCTION || _la==DYNAMIC_FUNCTION || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (MORE - 216)) | (1L << (NUMBER - 216)) | (1L << (ROW_COUNT - 216)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_informationContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(Sql92Parser.EXCEPTION, 0); }
		public Condition_information_itemContext condition_information_item(int i) {
			return getRuleContext(Condition_information_itemContext.class,i);
		}
		public Condition_numberContext condition_number() {
			return getRuleContext(Condition_numberContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Condition_information_itemContext> condition_information_item() {
			return getRuleContexts(Condition_information_itemContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Condition_informationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCondition_information(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCondition_information(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCondition_information(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_informationContext condition_information() throws RecognitionException {
		Condition_informationContext _localctx = new Condition_informationContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_condition_information);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2195); match(EXCEPTION);
			setState(2196); condition_number();
			setState(2197); condition_information_item();
			setState(2202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2198); match(COMMA);
				setState(2199); condition_information_item();
				}
				}
				setState(2204);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_numberContext extends ParserRuleContext {
		public Simple_value_specificationContext simple_value_specification() {
			return getRuleContext(Simple_value_specificationContext.class,0);
		}
		public Condition_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCondition_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCondition_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCondition_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_numberContext condition_number() throws RecognitionException {
		Condition_numberContext _localctx = new Condition_numberContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_condition_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2205); simple_value_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_information_itemContext extends ParserRuleContext {
		public Simple_target_specificationContext simple_target_specification() {
			return getRuleContext(Simple_target_specificationContext.class,0);
		}
		public Condition_information_item_nameContext condition_information_item_name() {
			return getRuleContext(Condition_information_item_nameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Condition_information_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCondition_information_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCondition_information_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCondition_information_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_information_itemContext condition_information_item() throws RecognitionException {
		Condition_information_itemContext _localctx = new Condition_information_itemContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_condition_information_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2207); simple_target_specification();
			setState(2208); match(EQ);
			setState(2209); condition_information_item_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_information_item_nameContext extends ParserRuleContext {
		public TerminalNode CONDITION_NUMBER() { return getToken(Sql92Parser.CONDITION_NUMBER, 0); }
		public TerminalNode MESSAGE_LENGTH() { return getToken(Sql92Parser.MESSAGE_LENGTH, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(Sql92Parser.RETURNED_SQLSTATE, 0); }
		public TerminalNode CONNECTION_NAME() { return getToken(Sql92Parser.CONNECTION_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(Sql92Parser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(Sql92Parser.CONSTRAINT_NAME, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(Sql92Parser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_OCTET_LENGTH() { return getToken(Sql92Parser.MESSAGE_OCTET_LENGTH, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(Sql92Parser.COLUMN_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(Sql92Parser.SCHEMA_NAME, 0); }
		public TerminalNode SERVER_NAME() { return getToken(Sql92Parser.SERVER_NAME, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(Sql92Parser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode TABLE_NAME() { return getToken(Sql92Parser.TABLE_NAME, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(Sql92Parser.CLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(Sql92Parser.MESSAGE_TEXT, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(Sql92Parser.CATALOG_NAME, 0); }
		public Condition_information_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information_item_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCondition_information_item_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCondition_information_item_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCondition_information_item_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_information_item_nameContext condition_information_item_name() throws RecognitionException {
		Condition_information_item_nameContext _localctx = new Condition_information_item_nameContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_condition_information_item_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211);
			_la = _input.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (CATALOG_NAME - 63)) | (1L << (CLASS_ORIGIN - 63)) | (1L << (COLUMN_NAME - 63)) | (1L << (CONDITION_NUMBER - 63)) | (1L << (CONNECTION_NAME - 63)) | (1L << (CONSTRAINT_CATALOG - 63)) | (1L << (CONSTRAINT_NAME - 63)) | (1L << (CONSTRAINT_SCHEMA - 63)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (MESSAGE_LENGTH - 209)) | (1L << (MESSAGE_OCTET_LENGTH - 209)) | (1L << (MESSAGE_TEXT - 209)) | (1L << (RETURNED_SQLSTATE - 209)))) != 0) || ((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (SCHEMA_NAME - 273)) | (1L << (SERVER_NAME - 273)) | (1L << (SUBCLASS_ORIGIN - 273)) | (1L << (TABLE_NAME - 273)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2213); match(LEFT_PAREN);
			setState(2214); query_expression();
			setState(2215); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_query_expression);
		try {
			setState(2219);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2217); non_join_query_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2218); joined_table(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_join_query_expressionContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Query_primaryContext query_primary() {
			return getRuleContext(Query_primaryContext.class,0);
		}
		public Query_termContext query_term() {
			return getRuleContext(Query_termContext.class,0);
		}
		public Query_intersect_relContext query_intersect_rel() {
			return getRuleContext(Query_intersect_relContext.class,0);
		}
		public Query_set_relContext query_set_rel() {
			return getRuleContext(Query_set_relContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Non_join_query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_join_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNon_join_query_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNon_join_query_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNon_join_query_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_join_query_expressionContext non_join_query_expression() throws RecognitionException {
		return non_join_query_expression(0);
	}

	private Non_join_query_expressionContext non_join_query_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Non_join_query_expressionContext _localctx = new Non_join_query_expressionContext(_ctx, _parentState);
		Non_join_query_expressionContext _prevctx = _localctx;
		int _startState = 436;
		enterRecursionRule(_localctx, 436, RULE_non_join_query_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2235);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				setState(2222); match(LEFT_PAREN);
				setState(2223); non_join_query_expression(0);
				setState(2224); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2226); joined_table(0);
				setState(2227); query_set_rel();
				setState(2228); query_term(0);
				}
				break;
			case 3:
				{
				setState(2230); query_term(0);
				setState(2231); query_intersect_rel();
				setState(2232); query_primary();
				}
				break;
			case 4:
				{
				setState(2234); simple_table();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2243);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Non_join_query_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_non_join_query_expression);
					setState(2237);
					if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
					setState(2238); query_set_rel();
					setState(2239); query_term(0);
					}
					} 
				}
				setState(2245);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Query_set_relContext extends ParserRuleContext {
		public TerminalNode EXCEPT() { return getToken(Sql92Parser.EXCEPT, 0); }
		public Corresponding_specContext corresponding_spec() {
			return getRuleContext(Corresponding_specContext.class,0);
		}
		public TerminalNode UNION() { return getToken(Sql92Parser.UNION, 0); }
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public Query_set_relContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_set_rel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_set_rel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_set_rel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_set_rel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_set_relContext query_set_rel() throws RecognitionException {
		Query_set_relContext _localctx = new Query_set_relContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_query_set_rel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2246);
			_la = _input.LA(1);
			if ( !(_la==EXCEPT || _la==UNION) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2248);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(2247); match(ALL);
				}
			}

			setState(2251);
			_la = _input.LA(1);
			if (_la==CORRESPONDING) {
				{
				setState(2250); corresponding_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_primaryContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Query_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_primaryContext query_primary() throws RecognitionException {
		Query_primaryContext _localctx = new Query_primaryContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_query_primary);
		try {
			setState(2259);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2253); simple_table();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2254); joined_table(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2255); match(LEFT_PAREN);
				setState(2256); non_join_query_expression(0);
				setState(2257); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_termContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Query_primaryContext query_primary() {
			return getRuleContext(Query_primaryContext.class,0);
		}
		public Query_termContext query_term() {
			return getRuleContext(Query_termContext.class,0);
		}
		public Query_intersect_relContext query_intersect_rel() {
			return getRuleContext(Query_intersect_relContext.class,0);
		}
		public Query_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_termContext query_term() throws RecognitionException {
		return query_term(0);
	}

	private Query_termContext query_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Query_termContext _localctx = new Query_termContext(_ctx, _parentState);
		Query_termContext _prevctx = _localctx;
		int _startState = 442;
		enterRecursionRule(_localctx, 442, RULE_query_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2264);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				{
				setState(2262); simple_table();
				}
				break;
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case UNDERSCORE:
			case B_:
			case C_:
			case MODULE:
			case N_:
			case X_:
			case IDENTIFIER:
				{
				setState(2263); joined_table(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2272);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,147,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Query_termContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_query_term);
					setState(2266);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2267); query_intersect_rel();
					setState(2268); query_primary();
					}
					} 
				}
				setState(2274);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,147,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Query_intersect_relContext extends ParserRuleContext {
		public Corresponding_specContext corresponding_spec() {
			return getRuleContext(Corresponding_specContext.class,0);
		}
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public TerminalNode INTERSECT() { return getToken(Sql92Parser.INTERSECT, 0); }
		public Query_intersect_relContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_intersect_rel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_intersect_rel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_intersect_rel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_intersect_rel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_intersect_relContext query_intersect_rel() throws RecognitionException {
		Query_intersect_relContext _localctx = new Query_intersect_relContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_query_intersect_rel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2275); match(INTERSECT);
			setState(2277);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(2276); match(ALL);
				}
			}

			setState(2280);
			_la = _input.LA(1);
			if (_la==CORRESPONDING) {
				{
				setState(2279); corresponding_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Corresponding_specContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(Sql92Parser.BY, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Corresponding_column_listContext corresponding_column_list() {
			return getRuleContext(Corresponding_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode CORRESPONDING() { return getToken(Sql92Parser.CORRESPONDING, 0); }
		public Corresponding_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_corresponding_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCorresponding_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCorresponding_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCorresponding_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Corresponding_specContext corresponding_spec() throws RecognitionException {
		Corresponding_specContext _localctx = new Corresponding_specContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_corresponding_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2282); match(CORRESPONDING);
			setState(2288);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(2283); match(BY);
				setState(2284); match(LEFT_PAREN);
				setState(2285); corresponding_column_list();
				setState(2286); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Corresponding_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Corresponding_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_corresponding_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCorresponding_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCorresponding_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCorresponding_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Corresponding_column_listContext corresponding_column_list() throws RecognitionException {
		Corresponding_column_listContext _localctx = new Corresponding_column_listContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_corresponding_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2290); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_tableContext extends ParserRuleContext {
		public Explicit_tableContext explicit_table() {
			return getRuleContext(Explicit_tableContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Simple_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_tableContext simple_table() throws RecognitionException {
		Simple_tableContext _localctx = new Simple_tableContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_simple_table);
		try {
			setState(2295);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2292); query_specification();
				}
				break;
			case VALUES:
				enterOuterAlt(_localctx, 2);
				{
				setState(2293); table_value_constructor();
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2294); explicit_table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Table_expressionContext table_expression() {
			return getRuleContext(Table_expressionContext.class,0);
		}
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(Sql92Parser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuery_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_query_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2297); match(SELECT);
			setState(2299);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2298); set_qualifier();
				}
			}

			setState(2301); select_list();
			setState(2302); table_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public Table_value_constructor_listContext table_value_constructor_list() {
			return getRuleContext(Table_value_constructor_listContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(Sql92Parser.VALUES, 0); }
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_table_value_constructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2304); match(VALUES);
			setState(2305); table_value_constructor_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructor_listContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(Sql92Parser.COMMA, 0); }
		public Row_value_constructorContext row_value_constructor(int i) {
			return getRuleContext(Row_value_constructorContext.class,i);
		}
		public List<Row_value_constructorContext> row_value_constructor() {
			return getRuleContexts(Row_value_constructorContext.class);
		}
		public Table_value_constructor_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_value_constructor_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_value_constructor_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_value_constructor_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructor_listContext table_value_constructor_list() throws RecognitionException {
		Table_value_constructor_listContext _localctx = new Table_value_constructor_listContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_table_value_constructor_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2307); row_value_constructor();
			{
			setState(2308); match(COMMA);
			setState(2309); row_value_constructor();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(Sql92Parser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Explicit_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExplicit_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExplicit_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExplicit_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_tableContext explicit_table() throws RecognitionException {
		Explicit_tableContext _localctx = new Explicit_tableContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_explicit_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2311); match(TABLE);
			setState(2312); table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_element_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Table_elementContext table_element(int i) {
			return getRuleContext(Table_elementContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public List<Table_elementContext> table_element() {
			return getRuleContexts(Table_elementContext.class);
		}
		public Table_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_element_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_element_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_element_listContext table_element_list() throws RecognitionException {
		Table_element_listContext _localctx = new Table_element_listContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_table_element_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2314); match(LEFT_PAREN);
			setState(2315); table_element();
			setState(2320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2316); match(COMMA);
				setState(2317); table_element();
				}
				}
				setState(2322);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2323); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public Table_constraint_definitionContext table_constraint_definition() {
			return getRuleContext(Table_constraint_definitionContext.class,0);
		}
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_table_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2325); column_definition();
			setState(2326); table_constraint_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Default_clauseContext default_clause() {
			return getRuleContext(Default_clauseContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public List<Column_constraint_definitionContext> column_constraint_definition() {
			return getRuleContexts(Column_constraint_definitionContext.class);
		}
		public Column_constraint_definitionContext column_constraint_definition(int i) {
			return getRuleContext(Column_constraint_definitionContext.class,i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2328); column_name();
			setState(2331);
			switch (_input.LA(1)) {
			case BIT:
			case CHAR:
			case CHARACTER:
			case DATE:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case NATIONAL:
			case NCHAR:
			case NUMERIC:
			case REAL:
			case SMALLINT:
			case TIME:
			case TIMESTAMP:
			case VARCHAR:
				{
				setState(2329); data_type();
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				{
				setState(2330); domain_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2334);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2333); default_clause();
				}
			}

			setState(2339);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,156,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2336); column_constraint_definition();
					}
					} 
				}
				setState(2341);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,156,_ctx);
			}
			setState(2343);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(2342); collate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraint_definitionContext extends ParserRuleContext {
		public Constraint_name_definitionContext constraint_name_definition() {
			return getRuleContext(Constraint_name_definitionContext.class,0);
		}
		public Column_constraintContext column_constraint() {
			return getRuleContext(Column_constraintContext.class,0);
		}
		public Constraint_attributesContext constraint_attributes() {
			return getRuleContext(Constraint_attributesContext.class,0);
		}
		public Column_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraint_definitionContext column_constraint_definition() throws RecognitionException {
		Column_constraint_definitionContext _localctx = new Column_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_column_constraint_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2346);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2345); constraint_name_definition();
				}
			}

			setState(2348); column_constraint();
			setState(2350);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(2349); constraint_attributes();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public Unique_specificationContext unique_specification() {
			return getRuleContext(Unique_specificationContext.class,0);
		}
		public References_specificationContext references_specification() {
			return getRuleContext(References_specificationContext.class,0);
		}
		public TerminalNode NOT() { return getToken(Sql92Parser.NOT, 0); }
		public Check_constraint_definitionContext check_constraint_definition() {
			return getRuleContext(Check_constraint_definitionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(Sql92Parser.NULL, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_column_constraint);
		try {
			setState(2357);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2352); match(NOT);
				setState(2353); match(NULL);
				}
				break;
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2354); unique_specification();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 3);
				{
				setState(2355); references_specification();
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 4);
				{
				setState(2356); check_constraint_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_constraint_definitionContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(Sql92Parser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Check_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCheck_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCheck_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCheck_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Check_constraint_definitionContext check_constraint_definition() throws RecognitionException {
		Check_constraint_definitionContext _localctx = new Check_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_check_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2359); match(CHECK);
			setState(2360); match(LEFT_PAREN);
			setState(2361); search_condition(0);
			setState(2362); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraint_definitionContext extends ParserRuleContext {
		public Constraint_name_definitionContext constraint_name_definition() {
			return getRuleContext(Constraint_name_definitionContext.class,0);
		}
		public Constraint_check_timeContext constraint_check_time() {
			return getRuleContext(Constraint_check_timeContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Table_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraint_definitionContext table_constraint_definition() throws RecognitionException {
		Table_constraint_definitionContext _localctx = new Table_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_table_constraint_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2365);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2364); constraint_name_definition();
				}
			}

			setState(2367); table_constraint();
			setState(2369);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(2368); constraint_check_time();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public Unique_constraint_definitionContext unique_constraint_definition() {
			return getRuleContext(Unique_constraint_definitionContext.class,0);
		}
		public Referential_constraint_definitionContext referential_constraint_definition() {
			return getRuleContext(Referential_constraint_definitionContext.class,0);
		}
		public Check_constraint_definitionContext check_constraint_definition() {
			return getRuleContext(Check_constraint_definitionContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_table_constraint);
		try {
			setState(2374);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2371); unique_constraint_definition();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2372); referential_constraint_definition();
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 3);
				{
				setState(2373); check_constraint_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public TerminalNode AND() { return getToken(Sql92Parser.AND, 0); }
		public TerminalNode OR() { return getToken(Sql92Parser.OR, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(Sql92Parser.NOT, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(Sql92Parser.IS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSearch_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 476;
		enterRecursionRule(_localctx, 476, RULE_search_condition, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2391);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				setState(2377); match(NOT);
				setState(2378); search_condition(4);
				}
				break;
			case 2:
				{
				setState(2379); match(LEFT_PAREN);
				setState(2380); search_condition(0);
				setState(2381); match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(2383); predicate();
				setState(2389);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(2384); match(IS);
					setState(2386);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(2385); match(NOT);
						}
					}

					setState(2388); truth_value();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2401);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,168,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2399);
					switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						setState(2393);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2394); match(AND);
						setState(2395); search_condition(4);
						}
						break;
					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						setState(2396);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2397); match(OR);
						setState(2398); search_condition(3);
						}
						break;
					}
					} 
				}
				setState(2403);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,168,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Quantified_comparision_predicateContext quantified_comparision_predicate() {
			return getRuleContext(Quantified_comparision_predicateContext.class,0);
		}
		public Overlaps_predicateContext overlaps_predicate() {
			return getRuleContext(Overlaps_predicateContext.class,0);
		}
		public Exists_predicateContext exists_predicate() {
			return getRuleContext(Exists_predicateContext.class,0);
		}
		public In_predicateContext in_predicate() {
			return getRuleContext(In_predicateContext.class,0);
		}
		public Comparision_predicateContext comparision_predicate() {
			return getRuleContext(Comparision_predicateContext.class,0);
		}
		public Null_predicateContext null_predicate() {
			return getRuleContext(Null_predicateContext.class,0);
		}
		public Between_predicateContext between_predicate() {
			return getRuleContext(Between_predicateContext.class,0);
		}
		public Like_predicateContext like_predicate() {
			return getRuleContext(Like_predicateContext.class,0);
		}
		public Match_predicateContext match_predicate() {
			return getRuleContext(Match_predicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_predicate);
		try {
			setState(2413);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2404); comparision_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2405); between_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2406); in_predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2407); like_predicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2408); null_predicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2409); quantified_comparision_predicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2410); exists_predicate();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2411); match_predicate();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2412); overlaps_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparision_predicateContext extends ParserRuleContext {
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public Row_value_constructorContext row_value_constructor(int i) {
			return getRuleContext(Row_value_constructorContext.class,i);
		}
		public List<Row_value_constructorContext> row_value_constructor() {
			return getRuleContexts(Row_value_constructorContext.class);
		}
		public Comparision_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparision_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterComparision_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitComparision_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitComparision_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparision_predicateContext comparision_predicate() throws RecognitionException {
		Comparision_predicateContext _localctx = new Comparision_predicateContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_comparision_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2415); row_value_constructor();
			setState(2416); comp_op();
			setState(2417); row_value_constructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_predicateContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(Sql92Parser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(Sql92Parser.AND, 0); }
		public TerminalNode NOT() { return getToken(Sql92Parser.NOT, 0); }
		public Row_value_constructorContext row_value_constructor(int i) {
			return getRuleContext(Row_value_constructorContext.class,i);
		}
		public List<Row_value_constructorContext> row_value_constructor() {
			return getRuleContexts(Row_value_constructorContext.class);
		}
		public Between_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBetween_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBetween_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBetween_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_predicateContext between_predicate() throws RecognitionException {
		Between_predicateContext _localctx = new Between_predicateContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_between_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2419); row_value_constructor();
			setState(2421);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2420); match(NOT);
				}
			}

			setState(2423); match(BETWEEN);
			setState(2424); row_value_constructor();
			setState(2425); match(AND);
			setState(2426); row_value_constructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicateContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(Sql92Parser.IN, 0); }
		public TerminalNode NOT() { return getToken(Sql92Parser.NOT, 0); }
		public Row_value_constructorContext row_value_constructor() {
			return getRuleContext(Row_value_constructorContext.class,0);
		}
		public In_predicate_valueContext in_predicate_value() {
			return getRuleContext(In_predicate_valueContext.class,0);
		}
		public In_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIn_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIn_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIn_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_predicateContext in_predicate() throws RecognitionException {
		In_predicateContext _localctx = new In_predicateContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_in_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2428); row_value_constructor();
			setState(2430);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2429); match(NOT);
				}
			}

			setState(2432); match(IN);
			setState(2433); in_predicate_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicate_valueContext extends ParserRuleContext {
		public In_value_listContext in_value_list() {
			return getRuleContext(In_value_listContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public In_predicate_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIn_predicate_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIn_predicate_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIn_predicate_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_predicate_valueContext in_predicate_value() throws RecognitionException {
		In_predicate_valueContext _localctx = new In_predicate_valueContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_in_predicate_value);
		try {
			setState(2440);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2435); table_subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2436); match(LEFT_PAREN);
				setState(2437); in_value_list();
				setState(2438); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_value_listContext extends ParserRuleContext {
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public In_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIn_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIn_value_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIn_value_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_value_listContext in_value_list() throws RecognitionException {
		In_value_listContext _localctx = new In_value_listContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_in_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2442); value_expression();
			setState(2447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2443); match(COMMA);
				setState(2444); value_expression();
				}
				}
				setState(2449);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_predicateContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(Sql92Parser.ESCAPE, 0); }
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public TerminalNode NOT() { return getToken(Sql92Parser.NOT, 0); }
		public Escape_characterContext escape_character() {
			return getRuleContext(Escape_characterContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(Sql92Parser.LIKE, 0); }
		public Match_valueContext match_value() {
			return getRuleContext(Match_valueContext.class,0);
		}
		public Like_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLike_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLike_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLike_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_predicateContext like_predicate() throws RecognitionException {
		Like_predicateContext _localctx = new Like_predicateContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_like_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2450); match_value();
			setState(2452);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2451); match(NOT);
				}
			}

			setState(2454); match(LIKE);
			setState(2455); pattern();
			setState(2458);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2456); match(ESCAPE);
				setState(2457); escape_character();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_valueContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Match_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterMatch_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitMatch_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitMatch_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_valueContext match_value() throws RecognitionException {
		Match_valueContext _localctx = new Match_valueContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_match_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2460); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PatternContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PatternContext pattern() throws RecognitionException {
		PatternContext _localctx = new PatternContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2462); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Escape_characterContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Escape_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escape_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterEscape_character(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitEscape_character(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitEscape_character(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Escape_characterContext escape_character() throws RecognitionException {
		Escape_characterContext _localctx = new Escape_characterContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_escape_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2464); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_predicateContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(Sql92Parser.NOT, 0); }
		public TerminalNode IS() { return getToken(Sql92Parser.IS, 0); }
		public TerminalNode NULL() { return getToken(Sql92Parser.NULL, 0); }
		public Null_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNull_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNull_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNull_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_predicateContext null_predicate() throws RecognitionException {
		Null_predicateContext _localctx = new Null_predicateContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_null_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2466); match(IS);
			setState(2468);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2467); match(NOT);
				}
			}

			setState(2470); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_comparision_predicateContext extends ParserRuleContext {
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public QuantifierContext quantifier() {
			return getRuleContext(QuantifierContext.class,0);
		}
		public Row_value_constructorContext row_value_constructor() {
			return getRuleContext(Row_value_constructorContext.class,0);
		}
		public Quantified_comparision_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_comparision_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuantified_comparision_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuantified_comparision_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuantified_comparision_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_comparision_predicateContext quantified_comparision_predicate() throws RecognitionException {
		Quantified_comparision_predicateContext _localctx = new Quantified_comparision_predicateContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_quantified_comparision_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2472); row_value_constructor();
			setState(2473); comp_op();
			setState(2474); quantifier();
			setState(2475); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exists_predicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(Sql92Parser.EXISTS, 0); }
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Exists_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExists_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExists_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExists_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exists_predicateContext exists_predicate() throws RecognitionException {
		Exists_predicateContext _localctx = new Exists_predicateContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_exists_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2477); match(EXISTS);
			setState(2478); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_subquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_subquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_subqueryContext table_subquery() throws RecognitionException {
		Table_subqueryContext _localctx = new Table_subqueryContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_table_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2480); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_predicateContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(Sql92Parser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(Sql92Parser.FULL, 0); }
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Row_value_constructorContext row_value_constructor() {
			return getRuleContext(Row_value_constructorContext.class,0);
		}
		public TerminalNode PARTIAL() { return getToken(Sql92Parser.PARTIAL, 0); }
		public TerminalNode UNIQUE() { return getToken(Sql92Parser.UNIQUE, 0); }
		public Match_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterMatch_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitMatch_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitMatch_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_predicateContext match_predicate() throws RecognitionException {
		Match_predicateContext _localctx = new Match_predicateContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_match_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2482); row_value_constructor();
			setState(2483); match(MATCH);
			setState(2485);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2484); match(UNIQUE);
				}
			}

			setState(2488);
			_la = _input.LA(1);
			if (_la==FULL || _la==PARTIAL) {
				{
				setState(2487);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2490); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlaps_predicateContext extends ParserRuleContext {
		public Row_value_constructorContext row_value_constructor(int i) {
			return getRuleContext(Row_value_constructorContext.class,i);
		}
		public List<Row_value_constructorContext> row_value_constructor() {
			return getRuleContexts(Row_value_constructorContext.class);
		}
		public TerminalNode OVERLAPS() { return getToken(Sql92Parser.OVERLAPS, 0); }
		public Overlaps_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlaps_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOverlaps_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOverlaps_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOverlaps_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlaps_predicateContext overlaps_predicate() throws RecognitionException {
		Overlaps_predicateContext _localctx = new Overlaps_predicateContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_overlaps_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2492); row_value_constructor();
			setState(2493); match(OVERLAPS);
			setState(2494); row_value_constructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructorContext extends ParserRuleContext {
		public Row_subqueryContext row_subquery() {
			return getRuleContext(Row_subqueryContext.class,0);
		}
		public Row_value_constructor_elementContext row_value_constructor_element() {
			return getRuleContext(Row_value_constructor_elementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Row_value_constructor_listContext row_value_constructor_list() {
			return getRuleContext(Row_value_constructor_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Row_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRow_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRow_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRow_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_value_constructorContext row_value_constructor() throws RecognitionException {
		Row_value_constructorContext _localctx = new Row_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_row_value_constructor);
		try {
			setState(2502);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2496); row_value_constructor_element();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2497); match(LEFT_PAREN);
				setState(2498); row_value_constructor_list();
				setState(2499); match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2501); row_subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_elementContext extends ParserRuleContext {
		public Default_specificationContext default_specification() {
			return getRuleContext(Default_specificationContext.class,0);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Null_specificationContext null_specification() {
			return getRuleContext(Null_specificationContext.class,0);
		}
		public Row_value_constructor_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRow_value_constructor_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRow_value_constructor_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRow_value_constructor_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_value_constructor_elementContext row_value_constructor_element() throws RecognitionException {
		Row_value_constructor_elementContext _localctx = new Row_value_constructor_elementContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_row_value_constructor_element);
		try {
			setState(2507);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case B_:
			case BIT_LENGTH:
			case C_:
			case CASE:
			case CAST:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case COALESCE:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case EXTRACT:
			case INTERVAL:
			case LOWER:
			case MAX:
			case MIN:
			case MODULE:
			case N_:
			case NULLIF:
			case OCTET_LENGTH:
			case POSITION:
			case SESSION_USER:
			case SUBSTRING:
			case SUM:
			case SYSTEM_USER:
			case TIME:
			case TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case UPPER:
			case USER:
			case VALUE:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2504); value_expression();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2505); null_specification();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2506); default_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_listContext extends ParserRuleContext {
		public Row_value_constructor_elementContext row_value_constructor_element(int i) {
			return getRuleContext(Row_value_constructor_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Row_value_constructor_elementContext> row_value_constructor_element() {
			return getRuleContexts(Row_value_constructor_elementContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Row_value_constructor_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRow_value_constructor_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRow_value_constructor_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRow_value_constructor_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_value_constructor_listContext row_value_constructor_list() throws RecognitionException {
		Row_value_constructor_listContext _localctx = new Row_value_constructor_listContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_row_value_constructor_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2509); row_value_constructor_element();
			setState(2514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2510); match(COMMA);
				setState(2511); row_value_constructor_element();
				}
				}
				setState(2516);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Row_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRow_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRow_subquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRow_subquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_subqueryContext row_subquery() throws RecognitionException {
		Row_subqueryContext _localctx = new Row_subqueryContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_row_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expressionContext extends ParserRuleContext {
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterValue_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitValue_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitValue_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_expressionContext value_expression() throws RecognitionException {
		Value_expressionContext _localctx = new Value_expressionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_value_expression);
		try {
			setState(2523);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2519); numeric_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2520); string_value_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2521); datetime_value_expression(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2522); interval_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expressionContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(Sql92Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(Sql92Parser.MINUS_SIGN, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Numeric_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumeric_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumeric_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumeric_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_value_expressionContext numeric_value_expression() throws RecognitionException {
		return numeric_value_expression(0);
	}

	private Numeric_value_expressionContext numeric_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Numeric_value_expressionContext _localctx = new Numeric_value_expressionContext(_ctx, _parentState);
		Numeric_value_expressionContext _prevctx = _localctx;
		int _startState = 520;
		enterRecursionRule(_localctx, 520, RULE_numeric_value_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2526); term(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(2533);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Numeric_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_numeric_value_expression);
					setState(2528);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2529);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2530); term(0);
					}
					} 
				}
				setState(2535);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TermContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(Sql92Parser.SOLIDUS, 0); }
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public TermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TermContext term() throws RecognitionException {
		return term(0);
	}

	private TermContext term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 522;
		enterRecursionRule(_localctx, 522, RULE_term, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2537); factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2544);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_term);
					setState(2539);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2540);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2541); factor();
					}
					} 
				}
				setState(2546);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public Numeric_primaryContext numeric_primary() {
			return getRuleContext(Numeric_primaryContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFactor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		FactorContext _localctx = new FactorContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2548);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(2547); sign();
				}
			}

			setState(2550); numeric_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_primaryContext extends ParserRuleContext {
		public Numeric_value_functionContext numeric_value_function() {
			return getRuleContext(Numeric_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Numeric_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumeric_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumeric_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumeric_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_primaryContext numeric_primary() throws RecognitionException {
		Numeric_primaryContext _localctx = new Numeric_primaryContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_numeric_primary);
		try {
			setState(2554);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case B_:
			case C_:
			case CASE:
			case CAST:
			case COALESCE:
			case COUNT:
			case CURRENT_USER:
			case DATE:
			case INTERVAL:
			case MAX:
			case MIN:
			case MODULE:
			case N_:
			case NULLIF:
			case SESSION_USER:
			case SUM:
			case SYSTEM_USER:
			case TIME:
			case TIMESTAMP:
			case USER:
			case VALUE:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2552); value_expression_primary();
				}
				break;
			case BIT_LENGTH:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case EXTRACT:
			case OCTET_LENGTH:
			case POSITION:
				enterOuterAlt(_localctx, 2);
				{
				setState(2553); numeric_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expression_primaryContext extends ParserRuleContext {
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return getRuleContext(Unsigned_value_specificationContext.class,0);
		}
		public Scalar_subqueryContext scalar_subquery() {
			return getRuleContext(Scalar_subqueryContext.class,0);
		}
		public Cast_specificationContext cast_specification() {
			return getRuleContext(Cast_specificationContext.class,0);
		}
		public Set_function_specificationContext set_function_specification() {
			return getRuleContext(Set_function_specificationContext.class,0);
		}
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Value_expression_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterValue_expression_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitValue_expression_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitValue_expression_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_expression_primaryContext value_expression_primary() throws RecognitionException {
		Value_expression_primaryContext _localctx = new Value_expression_primaryContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_value_expression_primary);
		try {
			setState(2562);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2556); unsigned_value_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2557); column_reference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2558); set_function_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2559); scalar_subquery();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2560); case_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2561); cast_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_specificationContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(Sql92Parser.COUNT, 0); }
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public General_set_functionContext general_set_function() {
			return getRuleContext(General_set_functionContext.class,0);
		}
		public Set_function_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_function_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_function_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_function_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_function_specificationContext set_function_specification() throws RecognitionException {
		Set_function_specificationContext _localctx = new Set_function_specificationContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_set_function_specification);
		try {
			setState(2569);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2564); match(COUNT);
				setState(2565); match(LEFT_PAREN);
				setState(2566); match(ASTERISK);
				setState(2567); match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2568); general_set_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_set_functionContext extends ParserRuleContext {
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Set_function_typeContext set_function_type() {
			return getRuleContext(Set_function_typeContext.class,0);
		}
		public General_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_set_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGeneral_set_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGeneral_set_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGeneral_set_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_set_functionContext general_set_function() throws RecognitionException {
		General_set_functionContext _localctx = new General_set_functionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_general_set_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2571); set_function_type();
			setState(2572); match(LEFT_PAREN);
			setState(2574);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2573); set_qualifier();
				}
			}

			setState(2576); value_expression();
			setState(2577); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Scalar_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterScalar_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitScalar_subquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitScalar_subquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_subqueryContext scalar_subquery() throws RecognitionException {
		Scalar_subqueryContext _localctx = new Scalar_subqueryContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_scalar_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2579); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public Case_abbreviationContext case_abbreviation() {
			return getRuleContext(Case_abbreviationContext.class,0);
		}
		public Case_specificationContext case_specification() {
			return getRuleContext(Case_specificationContext.class,0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCase_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_case_expression);
		try {
			setState(2583);
			switch (_input.LA(1)) {
			case COALESCE:
			case NULLIF:
				enterOuterAlt(_localctx, 1);
				{
				setState(2581); case_abbreviation();
				}
				break;
			case CASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2582); case_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_specificationContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(Sql92Parser.AS, 0); }
		public Cast_targetContext cast_target() {
			return getRuleContext(Cast_targetContext.class,0);
		}
		public Cast_operandContext cast_operand() {
			return getRuleContext(Cast_operandContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(Sql92Parser.CAST, 0); }
		public Cast_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCast_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCast_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCast_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_specificationContext cast_specification() throws RecognitionException {
		Cast_specificationContext _localctx = new Cast_specificationContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_cast_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2585); match(CAST);
			setState(2586); match(LEFT_PAREN);
			setState(2587); cast_operand();
			setState(2588); match(AS);
			setState(2589); cast_target();
			setState(2590); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_expressionContext extends ParserRuleContext {
		public Bit_value_expressionContext bit_value_expression() {
			return getRuleContext(Bit_value_expressionContext.class,0);
		}
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public String_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterString_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitString_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitString_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_value_expressionContext string_value_expression() throws RecognitionException {
		String_value_expressionContext _localctx = new String_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_string_value_expression);
		try {
			setState(2594);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2592); character_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2593); bit_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_value_expressionContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(Sql92Parser.PLUS_SIGN, 0); }
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(Sql92Parser.MINUS_SIGN, 0); }
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public Datetime_termContext datetime_term() {
			return getRuleContext(Datetime_termContext.class,0);
		}
		public Datetime_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_value_expressionContext datetime_value_expression() throws RecognitionException {
		return datetime_value_expression(0);
	}

	private Datetime_value_expressionContext datetime_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Datetime_value_expressionContext _localctx = new Datetime_value_expressionContext(_ctx, _parentState);
		Datetime_value_expressionContext _prevctx = _localctx;
		int _startState = 542;
		enterRecursionRule(_localctx, 542, RULE_datetime_value_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(2597); datetime_term();
				}
				break;
			case 2:
				{
				setState(2598); interval_value_expression(0);
				setState(2599); match(PLUS_SIGN);
				setState(2600); datetime_term();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2609);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,193,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Datetime_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_datetime_value_expression);
					setState(2604);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2605);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2606); interval_term(0);
					}
					} 
				}
				setState(2611);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,193,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_value_expressionContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(Sql92Parser.PLUS_SIGN, 0); }
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Interval_qualifierContext interval_qualifier() {
			return getRuleContext(Interval_qualifierContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(Sql92Parser.MINUS_SIGN, 0); }
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Datetime_termContext datetime_term() {
			return getRuleContext(Datetime_termContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Interval_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_value_expressionContext interval_value_expression() throws RecognitionException {
		return interval_value_expression(0);
	}

	private Interval_value_expressionContext interval_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Interval_value_expressionContext _localctx = new Interval_value_expressionContext(_ctx, _parentState);
		Interval_value_expressionContext _prevctx = _localctx;
		int _startState = 544;
		enterRecursionRule(_localctx, 544, RULE_interval_value_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2621);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2613); interval_term(0);
				}
				break;
			case 2:
				{
				setState(2614); match(LEFT_PAREN);
				setState(2615); datetime_value_expression(0);
				setState(2616); match(MINUS_SIGN);
				setState(2617); datetime_term();
				setState(2618); match(RIGHT_PAREN);
				setState(2619); interval_qualifier();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2628);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,195,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Interval_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_interval_value_expression);
					setState(2623);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2624);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2625); interval_term(0);
					}
					} 
				}
				setState(2630);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,195,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Datetime_termContext extends ParserRuleContext {
		public Datetime_factorContext datetime_factor() {
			return getRuleContext(Datetime_factorContext.class,0);
		}
		public Datetime_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_termContext datetime_term() throws RecognitionException {
		Datetime_termContext _localctx = new Datetime_termContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_datetime_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2631); datetime_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_factorContext extends ParserRuleContext {
		public Time_zoneContext time_zone() {
			return getRuleContext(Time_zoneContext.class,0);
		}
		public Datetime_primaryContext datetime_primary() {
			return getRuleContext(Datetime_primaryContext.class,0);
		}
		public Datetime_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_factorContext datetime_factor() throws RecognitionException {
		Datetime_factorContext _localctx = new Datetime_factorContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_datetime_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633); datetime_primary();
			setState(2635);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2634); time_zone();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_primaryContext extends ParserRuleContext {
		public Datetime_value_functionContext datetime_value_function() {
			return getRuleContext(Datetime_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Datetime_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_primaryContext datetime_primary() throws RecognitionException {
		Datetime_primaryContext _localctx = new Datetime_primaryContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_datetime_primary);
		try {
			setState(2639);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case B_:
			case C_:
			case CASE:
			case CAST:
			case COALESCE:
			case COUNT:
			case CURRENT_USER:
			case DATE:
			case INTERVAL:
			case MAX:
			case MIN:
			case MODULE:
			case N_:
			case NULLIF:
			case SESSION_USER:
			case SUM:
			case SYSTEM_USER:
			case TIME:
			case TIMESTAMP:
			case USER:
			case VALUE:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2637); value_expression_primary();
				}
				break;
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2638); datetime_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zoneContext extends ParserRuleContext {
		public Time_zone_specifierContext time_zone_specifier() {
			return getRuleContext(Time_zone_specifierContext.class,0);
		}
		public TerminalNode AT() { return getToken(Sql92Parser.AT, 0); }
		public Time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_zone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_zone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_zone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_zoneContext time_zone() throws RecognitionException {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2641); match(AT);
			setState(2642); time_zone_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zone_specifierContext extends ParserRuleContext {
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public TerminalNode TIME() { return getToken(Sql92Parser.TIME, 0); }
		public TerminalNode LOCAL() { return getToken(Sql92Parser.LOCAL, 0); }
		public TerminalNode ZONE() { return getToken(Sql92Parser.ZONE, 0); }
		public Time_zone_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_zone_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_zone_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_zone_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_zone_specifierContext time_zone_specifier() throws RecognitionException {
		Time_zone_specifierContext _localctx = new Time_zone_specifierContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_time_zone_specifier);
		try {
			setState(2648);
			switch (_input.LA(1)) {
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2644); match(LOCAL);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(2645); match(TIME);
				setState(2646); match(ZONE);
				setState(2647); interval_value_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_termContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(Sql92Parser.ASTERISK, 0); }
		public Interval_factorContext interval_factor() {
			return getRuleContext(Interval_factorContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(Sql92Parser.SOLIDUS, 0); }
		public Interval_termContext interval_term() {
			return getRuleContext(Interval_termContext.class,0);
		}
		public Interval_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_term(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_term(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_termContext interval_term() throws RecognitionException {
		return interval_term(0);
	}

	private Interval_termContext interval_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Interval_termContext _localctx = new Interval_termContext(_ctx, _parentState);
		Interval_termContext _prevctx = _localctx;
		int _startState = 556;
		enterRecursionRule(_localctx, 556, RULE_interval_term, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2651); interval_factor();
				}
				break;
			case 2:
				{
				setState(2652); term(0);
				setState(2653); match(ASTERISK);
				setState(2654); interval_factor();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2663);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,200,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Interval_termContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_interval_term);
					setState(2658);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2659);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2660); interval_factor();
					}
					} 
				}
				setState(2665);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,200,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_factorContext extends ParserRuleContext {
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Interval_primaryContext interval_primary() {
			return getRuleContext(Interval_primaryContext.class,0);
		}
		public Interval_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_factorContext interval_factor() throws RecognitionException {
		Interval_factorContext _localctx = new Interval_factorContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_interval_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2667);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(2666); sign();
				}
			}

			setState(2669); interval_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_primaryContext extends ParserRuleContext {
		public Interval_qualifierContext interval_qualifier() {
			return getRuleContext(Interval_qualifierContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Interval_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_primaryContext interval_primary() throws RecognitionException {
		Interval_primaryContext _localctx = new Interval_primaryContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_interval_primary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671); value_expression_primary();
			setState(2673);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2672); interval_qualifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_abbreviationContext extends ParserRuleContext {
		public TerminalNode COALESCE() { return getToken(Sql92Parser.COALESCE, 0); }
		public TerminalNode NULLIF() { return getToken(Sql92Parser.NULLIF, 0); }
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Case_abbreviationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_abbreviation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCase_abbreviation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCase_abbreviation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCase_abbreviation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_abbreviationContext case_abbreviation() throws RecognitionException {
		Case_abbreviationContext _localctx = new Case_abbreviationContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_case_abbreviation);
		int _la;
		try {
			setState(2694);
			switch (_input.LA(1)) {
			case NULLIF:
				enterOuterAlt(_localctx, 1);
				{
				setState(2675); match(NULLIF);
				setState(2676); match(LEFT_PAREN);
				setState(2677); value_expression();
				setState(2678); match(COMMA);
				setState(2679); value_expression();
				setState(2680); match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2682); match(COALESCE);
				setState(2683); match(LEFT_PAREN);
				setState(2684); value_expression();
				setState(2689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2685); match(COMMA);
					setState(2686); value_expression();
					}
					}
					setState(2691);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2692); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_specificationContext extends ParserRuleContext {
		public Searched_caseContext searched_case() {
			return getRuleContext(Searched_caseContext.class,0);
		}
		public Simple_caseContext simple_case() {
			return getRuleContext(Simple_caseContext.class,0);
		}
		public Case_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCase_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCase_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCase_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_specificationContext case_specification() throws RecognitionException {
		Case_specificationContext _localctx = new Case_specificationContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_case_specification);
		try {
			setState(2698);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2696); simple_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2697); searched_case();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_caseContext extends ParserRuleContext {
		public Case_operandContext case_operand() {
			return getRuleContext(Case_operandContext.class,0);
		}
		public List<Simple_when_clauseContext> simple_when_clause() {
			return getRuleContexts(Simple_when_clauseContext.class);
		}
		public TerminalNode CASE() { return getToken(Sql92Parser.CASE, 0); }
		public Simple_when_clauseContext simple_when_clause(int i) {
			return getRuleContext(Simple_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public TerminalNode END() { return getToken(Sql92Parser.END, 0); }
		public Simple_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_caseContext simple_case() throws RecognitionException {
		Simple_caseContext _localctx = new Simple_caseContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_simple_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2700); match(CASE);
			setState(2701); case_operand();
			setState(2703); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2702); simple_when_clause();
				}
				}
				setState(2705); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(2708);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2707); else_clause();
				}
			}

			setState(2710); match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_caseContext extends ParserRuleContext {
		public List<Searched_when_clauseContext> searched_when_clause() {
			return getRuleContexts(Searched_when_clauseContext.class);
		}
		public TerminalNode CASE() { return getToken(Sql92Parser.CASE, 0); }
		public Searched_when_clauseContext searched_when_clause(int i) {
			return getRuleContext(Searched_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public TerminalNode END() { return getToken(Sql92Parser.END, 0); }
		public Searched_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSearched_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSearched_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSearched_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_caseContext searched_case() throws RecognitionException {
		Searched_caseContext _localctx = new Searched_caseContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_searched_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2712); match(CASE);
			setState(2714); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2713); searched_when_clause();
				}
				}
				setState(2716); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(2719);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2718); else_clause();
				}
			}

			setState(2721); match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Case_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCase_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCase_operand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCase_operand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_operandContext case_operand() throws RecognitionException {
		Case_operandContext _localctx = new Case_operandContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_case_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2723); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_when_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode THEN() { return getToken(Sql92Parser.THEN, 0); }
		public When_operandContext when_operand() {
			return getRuleContext(When_operandContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(Sql92Parser.WHEN, 0); }
		public Simple_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_when_clauseContext simple_when_clause() throws RecognitionException {
		Simple_when_clauseContext _localctx = new Simple_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_simple_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2725); match(WHEN);
			setState(2726); when_operand();
			setState(2727); match(THEN);
			setState(2728); result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(Sql92Parser.ELSE, 0); }
		public Else_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterElse_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitElse_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitElse_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_clauseContext else_clause() throws RecognitionException {
		Else_clauseContext _localctx = new Else_clauseContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_else_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2730); match(ELSE);
			setState(2731); result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public When_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterWhen_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitWhen_operand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitWhen_operand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_operandContext when_operand() throws RecognitionException {
		When_operandContext _localctx = new When_operandContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_when_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2733); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultContext extends ParserRuleContext {
		public Result_expressionContext result_expression() {
			return getRuleContext(Result_expressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(Sql92Parser.NULL, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterResult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitResult(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitResult(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResultContext result() throws RecognitionException {
		ResultContext _localctx = new ResultContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_result);
		try {
			setState(2737);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case B_:
			case BIT_LENGTH:
			case C_:
			case CASE:
			case CAST:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case COALESCE:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case EXTRACT:
			case INTERVAL:
			case LOWER:
			case MAX:
			case MIN:
			case MODULE:
			case N_:
			case NULLIF:
			case OCTET_LENGTH:
			case POSITION:
			case SESSION_USER:
			case SUBSTRING:
			case SUM:
			case SYSTEM_USER:
			case TIME:
			case TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case UPPER:
			case USER:
			case VALUE:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2735); result_expression();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2736); match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_expressionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Result_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterResult_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitResult_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitResult_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_expressionContext result_expression() throws RecognitionException {
		Result_expressionContext _localctx = new Result_expressionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_result_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_when_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode THEN() { return getToken(Sql92Parser.THEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(Sql92Parser.WHEN, 0); }
		public Searched_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSearched_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSearched_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSearched_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_when_clauseContext searched_when_clause() throws RecognitionException {
		Searched_when_clauseContext _localctx = new Searched_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_searched_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2741); match(WHEN);
			setState(2742); search_condition(0);
			setState(2743); match(THEN);
			setState(2744); result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(Sql92Parser.NULL, 0); }
		public Cast_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCast_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCast_operand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCast_operand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_operandContext cast_operand() throws RecognitionException {
		Cast_operandContext _localctx = new Cast_operandContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_cast_operand);
		try {
			setState(2748);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case DOUBLE_QUOTE:
			case LEFT_PAREN:
			case COLON:
			case QUESTION_MARK:
			case UNDERSCORE:
			case AVG:
			case B_:
			case BIT_LENGTH:
			case C_:
			case CASE:
			case CAST:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case COALESCE:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case EXTRACT:
			case INTERVAL:
			case LOWER:
			case MAX:
			case MIN:
			case MODULE:
			case N_:
			case NULLIF:
			case OCTET_LENGTH:
			case POSITION:
			case SESSION_USER:
			case SUBSTRING:
			case SUM:
			case SYSTEM_USER:
			case TIME:
			case TIMESTAMP:
			case TRANSLATE:
			case TRIM:
			case UPPER:
			case USER:
			case VALUE:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2746); value_expression();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2747); match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_functionContext extends ParserRuleContext {
		public Position_expressionContext position_expression() {
			return getRuleContext(Position_expressionContext.class,0);
		}
		public Extract_expressionContext extract_expression() {
			return getRuleContext(Extract_expressionContext.class,0);
		}
		public Length_expressionContext length_expression() {
			return getRuleContext(Length_expressionContext.class,0);
		}
		public Numeric_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumeric_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumeric_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumeric_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_value_functionContext numeric_value_function() throws RecognitionException {
		Numeric_value_functionContext _localctx = new Numeric_value_functionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_numeric_value_function);
		try {
			setState(2753);
			switch (_input.LA(1)) {
			case POSITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(2750); position_expression();
				}
				break;
			case EXTRACT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2751); extract_expression();
				}
				break;
			case BIT_LENGTH:
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
			case OCTET_LENGTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(2752); length_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_expressionContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(Sql92Parser.IN, 0); }
		public TerminalNode POSITION() { return getToken(Sql92Parser.POSITION, 0); }
		public Character_value_expressionContext character_value_expression(int i) {
			return getRuleContext(Character_value_expressionContext.class,i);
		}
		public List<Character_value_expressionContext> character_value_expression() {
			return getRuleContexts(Character_value_expressionContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Position_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPosition_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPosition_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPosition_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_expressionContext position_expression() throws RecognitionException {
		Position_expressionContext _localctx = new Position_expressionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_position_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2755); match(POSITION);
			setState(2756); match(LEFT_PAREN);
			setState(2757); character_value_expression(0);
			setState(2758); match(IN);
			setState(2759); character_value_expression(0);
			setState(2760); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_expressionContext extends ParserRuleContext {
		public Extract_fieldContext extract_field() {
			return getRuleContext(Extract_fieldContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(Sql92Parser.EXTRACT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Extract_sourceContext extract_source() {
			return getRuleContext(Extract_sourceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Extract_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtract_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtract_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtract_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_expressionContext extract_expression() throws RecognitionException {
		Extract_expressionContext _localctx = new Extract_expressionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_extract_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2762); match(EXTRACT);
			setState(2763); match(LEFT_PAREN);
			setState(2764); extract_field();
			setState(2765); match(FROM);
			setState(2766); extract_source();
			setState(2767); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_sourceContext extends ParserRuleContext {
		public Interval_value_expressionContext interval_value_expression() {
			return getRuleContext(Interval_value_expressionContext.class,0);
		}
		public Datetime_value_expressionContext datetime_value_expression() {
			return getRuleContext(Datetime_value_expressionContext.class,0);
		}
		public Extract_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtract_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtract_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtract_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_sourceContext extract_source() throws RecognitionException {
		Extract_sourceContext _localctx = new Extract_sourceContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_extract_source);
		try {
			setState(2771);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2769); datetime_value_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2770); interval_value_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Length_expressionContext extends ParserRuleContext {
		public Char_length_expressionContext char_length_expression() {
			return getRuleContext(Char_length_expressionContext.class,0);
		}
		public Bit_length_expressionContext bit_length_expression() {
			return getRuleContext(Bit_length_expressionContext.class,0);
		}
		public Octet_length_expressionContext octet_length_expression() {
			return getRuleContext(Octet_length_expressionContext.class,0);
		}
		public Length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLength_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLength_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLength_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Length_expressionContext length_expression() throws RecognitionException {
		Length_expressionContext _localctx = new Length_expressionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_length_expression);
		try {
			setState(2776);
			switch (_input.LA(1)) {
			case CHARACTER_LENGTH:
			case CHAR_LENGTH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2773); char_length_expression();
				}
				break;
			case OCTET_LENGTH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2774); octet_length_expression();
				}
				break;
			case BIT_LENGTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(2775); bit_length_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_length_expressionContext extends ParserRuleContext {
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public TerminalNode CHARACTER_LENGTH() { return getToken(Sql92Parser.CHARACTER_LENGTH, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(Sql92Parser.CHAR_LENGTH, 0); }
		public Char_length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_length_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterChar_length_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitChar_length_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitChar_length_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_length_expressionContext char_length_expression() throws RecognitionException {
		Char_length_expressionContext _localctx = new Char_length_expressionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_char_length_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2778);
			_la = _input.LA(1);
			if ( !(_la==CHARACTER_LENGTH || _la==CHAR_LENGTH) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2779); match(LEFT_PAREN);
			setState(2780); string_value_expression();
			setState(2781); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Octet_length_expressionContext extends ParserRuleContext {
		public TerminalNode OCTET_LENGTH() { return getToken(Sql92Parser.OCTET_LENGTH, 0); }
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Octet_length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_octet_length_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOctet_length_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOctet_length_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOctet_length_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Octet_length_expressionContext octet_length_expression() throws RecognitionException {
		Octet_length_expressionContext _localctx = new Octet_length_expressionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_octet_length_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2783); match(OCTET_LENGTH);
			setState(2784); match(LEFT_PAREN);
			setState(2785); string_value_expression();
			setState(2786); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_length_expressionContext extends ParserRuleContext {
		public TerminalNode BIT_LENGTH() { return getToken(Sql92Parser.BIT_LENGTH, 0); }
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Bit_length_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_length_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_length_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_length_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_length_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_length_expressionContext bit_length_expression() throws RecognitionException {
		Bit_length_expressionContext _localctx = new Bit_length_expressionContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_bit_length_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2788); match(BIT_LENGTH);
			setState(2789); match(LEFT_PAREN);
			setState(2790); string_value_expression();
			setState(2791); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_expressionContext extends ParserRuleContext {
		public Character_factorContext character_factor() {
			return getRuleContext(Character_factorContext.class,0);
		}
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode CONCATENATION() { return getToken(Sql92Parser.CONCATENATION, 0); }
		public Character_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_value_expressionContext character_value_expression() throws RecognitionException {
		return character_value_expression(0);
	}

	private Character_value_expressionContext character_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Character_value_expressionContext _localctx = new Character_value_expressionContext(_ctx, _parentState);
		Character_value_expressionContext _prevctx = _localctx;
		int _startState = 602;
		enterRecursionRule(_localctx, 602, RULE_character_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2794); character_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2801);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Character_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_character_value_expression);
					setState(2796);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2797); match(CONCATENATION);
					setState(2798); character_factor();
					}
					} 
				}
				setState(2803);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Character_factorContext extends ParserRuleContext {
		public Character_primaryContext character_primary() {
			return getRuleContext(Character_primaryContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Character_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_factorContext character_factor() throws RecognitionException {
		Character_factorContext _localctx = new Character_factorContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_character_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804); character_primary();
			setState(2806);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2805); collate_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_primaryContext extends ParserRuleContext {
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Character_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_primaryContext character_primary() throws RecognitionException {
		Character_primaryContext _localctx = new Character_primaryContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_character_primary);
		try {
			setState(2810);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2808); value_expression_primary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2809); string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_functionContext extends ParserRuleContext {
		public Bit_value_functionContext bit_value_function() {
			return getRuleContext(Bit_value_functionContext.class,0);
		}
		public Character_value_functionContext character_value_function() {
			return getRuleContext(Character_value_functionContext.class,0);
		}
		public String_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterString_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitString_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitString_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_value_functionContext string_value_function() throws RecognitionException {
		String_value_functionContext _localctx = new String_value_functionContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_string_value_function);
		try {
			setState(2814);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2812); character_value_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2813); bit_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_functionContext extends ParserRuleContext {
		public Trim_functionContext trim_function() {
			return getRuleContext(Trim_functionContext.class,0);
		}
		public Character_translationContext character_translation() {
			return getRuleContext(Character_translationContext.class,0);
		}
		public FoldContext fold() {
			return getRuleContext(FoldContext.class,0);
		}
		public Form_of_use_conversionContext form_of_use_conversion() {
			return getRuleContext(Form_of_use_conversionContext.class,0);
		}
		public Character_substring_functionContext character_substring_function() {
			return getRuleContext(Character_substring_functionContext.class,0);
		}
		public Character_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_value_functionContext character_value_function() throws RecognitionException {
		Character_value_functionContext _localctx = new Character_value_functionContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_character_value_function);
		try {
			setState(2821);
			switch (_input.LA(1)) {
			case SUBSTRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2816); character_substring_function();
				}
				break;
			case LOWER:
			case UPPER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2817); fold();
				}
				break;
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2818); form_of_use_conversion();
				}
				break;
			case TRANSLATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2819); character_translation();
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 5);
				{
				setState(2820); trim_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_value_functionContext extends ParserRuleContext {
		public Bit_substring_functionContext bit_substring_function() {
			return getRuleContext(Bit_substring_functionContext.class,0);
		}
		public Bit_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_value_functionContext bit_value_function() throws RecognitionException {
		Bit_value_functionContext _localctx = new Bit_value_functionContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_bit_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2823); bit_substring_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_substring_functionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTRING() { return getToken(Sql92Parser.SUBSTRING, 0); }
		public String_lengthContext string_length() {
			return getRuleContext(String_lengthContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Character_substring_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_substring_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_substring_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_substring_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_substring_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_substring_functionContext character_substring_function() throws RecognitionException {
		Character_substring_functionContext _localctx = new Character_substring_functionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_character_substring_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2825); match(SUBSTRING);
			setState(2826); match(LEFT_PAREN);
			setState(2827); character_value_expression(0);
			setState(2828); match(FROM);
			setState(2829); start_position();
			setState(2832);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2830); match(FOR);
				setState(2831); string_length();
				}
			}

			setState(2834); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_positionContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Start_positionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_position; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStart_position(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStart_position(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStart_position(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_positionContext start_position() throws RecognitionException {
		Start_positionContext _localctx = new Start_positionContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_start_position);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2836); numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_lengthContext extends ParserRuleContext {
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public String_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterString_length(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitString_length(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitString_length(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_lengthContext string_length() throws RecognitionException {
		String_lengthContext _localctx = new String_lengthContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_string_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2838); numeric_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FoldContext extends ParserRuleContext {
		public TerminalNode LOWER() { return getToken(Sql92Parser.LOWER, 0); }
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode UPPER() { return getToken(Sql92Parser.UPPER, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public FoldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fold; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FoldContext fold() throws RecognitionException {
		FoldContext _localctx = new FoldContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_fold);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2840);
			_la = _input.LA(1);
			if ( !(_la==LOWER || _la==UPPER) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2841); match(LEFT_PAREN);
			setState(2842); character_value_expression(0);
			setState(2843); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_translationContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(Sql92Parser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode TRANSLATE() { return getToken(Sql92Parser.TRANSLATE, 0); }
		public Translation_nameContext translation_name() {
			return getRuleContext(Translation_nameContext.class,0);
		}
		public Character_translationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_translation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_translation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_translation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_translation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_translationContext character_translation() throws RecognitionException {
		Character_translationContext _localctx = new Character_translationContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_character_translation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2845); match(TRANSLATE);
			setState(2846); match(LEFT_PAREN);
			setState(2847); character_value_expression(0);
			setState(2848); match(USING);
			setState(2849); translation_name();
			setState(2850); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_functionContext extends ParserRuleContext {
		public TerminalNode TRIM() { return getToken(Sql92Parser.TRIM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Trim_operandsContext trim_operands() {
			return getRuleContext(Trim_operandsContext.class,0);
		}
		public Trim_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_functionContext trim_function() throws RecognitionException {
		Trim_functionContext _localctx = new Trim_functionContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_trim_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2852); match(TRIM);
			setState(2853); match(LEFT_PAREN);
			setState(2854); trim_operands();
			setState(2855); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_operandsContext extends ParserRuleContext {
		public Trim_sourceContext trim_source() {
			return getRuleContext(Trim_sourceContext.class,0);
		}
		public Trim_specificationContext trim_specification() {
			return getRuleContext(Trim_specificationContext.class,0);
		}
		public Trim_characterContext trim_character() {
			return getRuleContext(Trim_characterContext.class,0);
		}
		public Trim_operandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_operands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_operands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_operands(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_operands(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_operandsContext trim_operands() throws RecognitionException {
		Trim_operandsContext _localctx = new Trim_operandsContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_trim_operands);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2861);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2858);
				_la = _input.LA(1);
				if (_la==BOTH || _la==LEADING || _la==TRAILING) {
					{
					setState(2857); trim_specification();
					}
				}

				setState(2860); trim_character();
				}
				break;
			}
			setState(2863); trim_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_characterContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Trim_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_character(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_character(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_character(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_characterContext trim_character() throws RecognitionException {
		Trim_characterContext _localctx = new Trim_characterContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_trim_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2865); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_sourceContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Trim_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_sourceContext trim_source() throws RecognitionException {
		Trim_sourceContext _localctx = new Trim_sourceContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_trim_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2867); character_value_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_substring_functionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public Bit_value_expressionContext bit_value_expression() {
			return getRuleContext(Bit_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTRING() { return getToken(Sql92Parser.SUBSTRING, 0); }
		public String_lengthContext string_length() {
			return getRuleContext(String_lengthContext.class,0);
		}
		public Start_positionContext start_position() {
			return getRuleContext(Start_positionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(Sql92Parser.FROM, 0); }
		public Bit_substring_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_substring_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_substring_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_substring_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_substring_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_substring_functionContext bit_substring_function() throws RecognitionException {
		Bit_substring_functionContext _localctx = new Bit_substring_functionContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_bit_substring_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2869); match(SUBSTRING);
			setState(2870); match(LEFT_PAREN);
			setState(2871); bit_value_expression(0);
			setState(2872); match(FROM);
			setState(2873); start_position();
			setState(2876);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2874); match(FOR);
				setState(2875); string_length();
				}
			}

			setState(2878); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_value_expressionContext extends ParserRuleContext {
		public Bit_value_expressionContext bit_value_expression() {
			return getRuleContext(Bit_value_expressionContext.class,0);
		}
		public TerminalNode CONCATENATION() { return getToken(Sql92Parser.CONCATENATION, 0); }
		public Bit_factorContext bit_factor() {
			return getRuleContext(Bit_factorContext.class,0);
		}
		public Bit_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_value_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_value_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_value_expressionContext bit_value_expression() throws RecognitionException {
		return bit_value_expression(0);
	}

	private Bit_value_expressionContext bit_value_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bit_value_expressionContext _localctx = new Bit_value_expressionContext(_ctx, _parentState);
		Bit_value_expressionContext _prevctx = _localctx;
		int _startState = 634;
		enterRecursionRule(_localctx, 634, RULE_bit_value_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2881); bit_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(2888);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bit_value_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_bit_value_expression);
					setState(2883);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2884); match(CONCATENATION);
					setState(2885); bit_factor();
					}
					} 
				}
				setState(2890);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Bit_factorContext extends ParserRuleContext {
		public Bit_primaryContext bit_primary() {
			return getRuleContext(Bit_primaryContext.class,0);
		}
		public Bit_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_factorContext bit_factor() throws RecognitionException {
		Bit_factorContext _localctx = new Bit_factorContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_bit_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2891); bit_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_primaryContext extends ParserRuleContext {
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Bit_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_primaryContext bit_primary() throws RecognitionException {
		Bit_primaryContext _localctx = new Bit_primaryContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_bit_primary);
		try {
			setState(2895);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2893); value_expression_primary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2894); string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureContext extends ParserRuleContext {
		public Parameter_declaration_listContext parameter_declaration_list() {
			return getRuleContext(Parameter_declaration_listContext.class,0);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(Sql92Parser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(Sql92Parser.SEMICOLON, i);
		}
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(Sql92Parser.PROCEDURE, 0); }
		public Sql_procedure_statementContext sql_procedure_statement() {
			return getRuleContext(Sql_procedure_statementContext.class,0);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureContext procedure() throws RecognitionException {
		ProcedureContext _localctx = new ProcedureContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2897); match(PROCEDURE);
			setState(2898); procedure_name();
			setState(2899); parameter_declaration_list();
			setState(2900); match(SEMICOLON);
			setState(2901); sql_procedure_statement();
			setState(2902); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_procedure_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2904); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_declaration_listContext extends ParserRuleContext {
		public Parameter_declarationContext parameter_declaration(int i) {
			return getRuleContext(Parameter_declarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public List<Parameter_declarationContext> parameter_declaration() {
			return getRuleContexts(Parameter_declarationContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Parameter_declaration_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_declaration_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_declaration_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_declaration_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_declaration_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_declaration_listContext parameter_declaration_list() throws RecognitionException {
		Parameter_declaration_listContext _localctx = new Parameter_declaration_listContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_parameter_declaration_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2906); match(LEFT_PAREN);
			setState(2907); parameter_declaration();
			setState(2912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2908); match(COMMA);
				setState(2909); parameter_declaration();
				}
				}
				setState(2914);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2915); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_declarationContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Status_parameterContext status_parameter() {
			return getRuleContext(Status_parameterContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_declarationContext parameter_declaration() throws RecognitionException {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_parameter_declaration);
		try {
			setState(2921);
			switch (_input.LA(1)) {
			case COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2917); parameter_name();
				setState(2918); data_type();
				}
				break;
			case SQLCODE:
			case SQLSTATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2920); status_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Status_parameterContext extends ParserRuleContext {
		public TerminalNode SQLCODE() { return getToken(Sql92Parser.SQLCODE, 0); }
		public TerminalNode SQLSTATE() { return getToken(Sql92Parser.SQLSTATE, 0); }
		public Status_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_status_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatus_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatus_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatus_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Status_parameterContext status_parameter() throws RecognitionException {
		Status_parameterContext _localctx = new Status_parameterContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_status_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2923);
			_la = _input.LA(1);
			if ( !(_la==SQLCODE || _la==SQLSTATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_procedure_statementContext extends ParserRuleContext {
		public Sql_schema_statementContext sql_schema_statement() {
			return getRuleContext(Sql_schema_statementContext.class,0);
		}
		public Sql_dynamic_statementContext sql_dynamic_statement() {
			return getRuleContext(Sql_dynamic_statementContext.class,0);
		}
		public Sql_transaction_statementContext sql_transaction_statement() {
			return getRuleContext(Sql_transaction_statementContext.class,0);
		}
		public Sql_session_statementContext sql_session_statement() {
			return getRuleContext(Sql_session_statementContext.class,0);
		}
		public Sql_connection_statementContext sql_connection_statement() {
			return getRuleContext(Sql_connection_statementContext.class,0);
		}
		public Sql_diagnostics_statementContext sql_diagnostics_statement() {
			return getRuleContext(Sql_diagnostics_statementContext.class,0);
		}
		public Sql_data_statementContext sql_data_statement() {
			return getRuleContext(Sql_data_statementContext.class,0);
		}
		public Sql_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_procedure_statementContext sql_procedure_statement() throws RecognitionException {
		Sql_procedure_statementContext _localctx = new Sql_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_sql_procedure_statement);
		try {
			setState(2932);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2925); sql_schema_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2926); sql_data_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2927); sql_transaction_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2928); sql_connection_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2929); sql_session_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2930); sql_dynamic_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2931); sql_diagnostics_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModuleContext extends ParserRuleContext {
		public Language_clauseContext language_clause() {
			return getRuleContext(Language_clauseContext.class,0);
		}
		public Temporary_table_declarationContext temporary_table_declaration(int i) {
			return getRuleContext(Temporary_table_declarationContext.class,i);
		}
		public List<Module_contentsContext> module_contents() {
			return getRuleContexts(Module_contentsContext.class);
		}
		public List<Temporary_table_declarationContext> temporary_table_declaration() {
			return getRuleContexts(Temporary_table_declarationContext.class);
		}
		public Module_authorization_clauseContext module_authorization_clause() {
			return getRuleContext(Module_authorization_clauseContext.class,0);
		}
		public Module_name_clauseContext module_name_clause() {
			return getRuleContext(Module_name_clauseContext.class,0);
		}
		public Module_contentsContext module_contents(int i) {
			return getRuleContext(Module_contentsContext.class,i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModuleContext module() throws RecognitionException {
		ModuleContext _localctx = new ModuleContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_module);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2934); module_name_clause();
			setState(2935); language_clause();
			setState(2936); module_authorization_clause();
			setState(2940);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2937); temporary_table_declaration();
					}
					} 
				}
				setState(2942);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			}
			setState(2944); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2943); module_contents();
				}
				}
				setState(2946); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DECLARE || _la==PROCEDURE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_contentsContext extends ParserRuleContext {
		public Dynamic_declare_cursorContext dynamic_declare_cursor() {
			return getRuleContext(Dynamic_declare_cursorContext.class,0);
		}
		public ProcedureContext procedure() {
			return getRuleContext(ProcedureContext.class,0);
		}
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public Module_contentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_contents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_contents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_contents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_contents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_contentsContext module_contents() throws RecognitionException {
		Module_contentsContext _localctx = new Module_contentsContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_module_contents);
		try {
			setState(2951);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2948); declare_cursor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2949); dynamic_declare_cursor();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2950); procedure();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_name_clauseContext extends ParserRuleContext {
		public TerminalNode MODULE() { return getToken(Sql92Parser.MODULE, 0); }
		public Module_character_set_specificationContext module_character_set_specification() {
			return getRuleContext(Module_character_set_specificationContext.class,0);
		}
		public Module_nameContext module_name() {
			return getRuleContext(Module_nameContext.class,0);
		}
		public Module_name_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_name_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_name_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_name_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_name_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_name_clauseContext module_name_clause() throws RecognitionException {
		Module_name_clauseContext _localctx = new Module_name_clauseContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_module_name_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2953); match(MODULE);
			setState(2954); module_name();
			setState(2955); module_character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_nameContext module_name() throws RecognitionException {
		Module_nameContext _localctx = new Module_nameContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_module_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_character_set_specificationContext extends ParserRuleContext {
		public TerminalNode NAMES() { return getToken(Sql92Parser.NAMES, 0); }
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public TerminalNode ARE() { return getToken(Sql92Parser.ARE, 0); }
		public Module_character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_character_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_character_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_character_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_character_set_specificationContext module_character_set_specification() throws RecognitionException {
		Module_character_set_specificationContext _localctx = new Module_character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_module_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2959); match(NAMES);
			setState(2960); match(ARE);
			setState(2961); character_set_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_authorization_clauseContext extends ParserRuleContext {
		public Catalog_nameContext catalog_name() {
			return getRuleContext(Catalog_nameContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(Sql92Parser.SCHEMA, 0); }
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Module_authorization_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_authorization_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_authorization_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_authorization_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_authorization_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_authorization_clauseContext module_authorization_clause() throws RecognitionException {
		Module_authorization_clauseContext _localctx = new Module_authorization_clauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_module_authorization_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2963); match(SCHEMA);
			setState(2967);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2964); catalog_name();
				setState(2965); match(PERIOD);
				}
				break;
			}
			setState(2969); schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Module_authorization_identifierContext extends ParserRuleContext {
		public Authorization_identifierContext authorization_identifier() {
			return getRuleContext(Authorization_identifierContext.class,0);
		}
		public Module_authorization_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_module_authorization_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterModule_authorization_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitModule_authorization_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitModule_authorization_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Module_authorization_identifierContext module_authorization_identifier() throws RecognitionException {
		Module_authorization_identifierContext _localctx = new Module_authorization_identifierContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_module_authorization_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2971); authorization_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Temporary_table_declarationContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(Sql92Parser.ON, 0); }
		public Qualified_local_table_nameContext qualified_local_table_name() {
			return getRuleContext(Qualified_local_table_nameContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(Sql92Parser.DECLARE, 0); }
		public TerminalNode ROWS() { return getToken(Sql92Parser.ROWS, 0); }
		public TerminalNode TEMPORARY() { return getToken(Sql92Parser.TEMPORARY, 0); }
		public TerminalNode PRESERVE() { return getToken(Sql92Parser.PRESERVE, 0); }
		public TerminalNode COMMIT() { return getToken(Sql92Parser.COMMIT, 0); }
		public Table_element_listContext table_element_list() {
			return getRuleContext(Table_element_listContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(Sql92Parser.DELETE, 0); }
		public TerminalNode TABLE() { return getToken(Sql92Parser.TABLE, 0); }
		public TerminalNode LOCAL() { return getToken(Sql92Parser.LOCAL, 0); }
		public Temporary_table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporary_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTemporary_table_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTemporary_table_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTemporary_table_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Temporary_table_declarationContext temporary_table_declaration() throws RecognitionException {
		Temporary_table_declarationContext _localctx = new Temporary_table_declarationContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_temporary_table_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2973); match(DECLARE);
			setState(2974); match(LOCAL);
			setState(2975); match(TEMPORARY);
			setState(2976); match(TABLE);
			setState(2977); qualified_local_table_name();
			setState(2978); table_element_list();
			setState(2983);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2979); match(ON);
				setState(2980); match(COMMIT);
				setState(2981);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2982); match(ROWS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public TerminalNode INSENSITIVE() { return getToken(Sql92Parser.INSENSITIVE, 0); }
		public TerminalNode SCROLL() { return getToken(Sql92Parser.SCROLL, 0); }
		public TerminalNode CURSOR() { return getToken(Sql92Parser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public TerminalNode DECLARE() { return getToken(Sql92Parser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_specificationContext cursor_specification() {
			return getRuleContext(Cursor_specificationContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDeclare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDeclare_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDeclare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2985); match(DECLARE);
			setState(2986); cursor_name();
			setState(2988);
			_la = _input.LA(1);
			if (_la==INSENSITIVE) {
				{
				setState(2987); match(INSENSITIVE);
				}
			}

			setState(2991);
			_la = _input.LA(1);
			if (_la==SCROLL) {
				{
				setState(2990); match(SCROLL);
				}
			}

			setState(2993); match(CURSOR);
			setState(2994); match(FOR);
			setState(2995); cursor_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_specificationContext extends ParserRuleContext {
		public Updatability_clauseContext updatability_clause() {
			return getRuleContext(Updatability_clauseContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Cursor_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCursor_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCursor_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCursor_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_specificationContext cursor_specification() throws RecognitionException {
		Cursor_specificationContext _localctx = new Cursor_specificationContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_cursor_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997); query_expression();
			setState(2999);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2998); order_by_clause();
				}
			}

			setState(3002);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3001); updatability_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_declare_cursorContext extends ParserRuleContext {
		public TerminalNode INSENSITIVE() { return getToken(Sql92Parser.INSENSITIVE, 0); }
		public TerminalNode SCROLL() { return getToken(Sql92Parser.SCROLL, 0); }
		public TerminalNode CURSOR() { return getToken(Sql92Parser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public TerminalNode DECLARE() { return getToken(Sql92Parser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Statement_nameContext statement_name() {
			return getRuleContext(Statement_nameContext.class,0);
		}
		public Dynamic_declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_declare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_declare_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_declare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_declare_cursorContext dynamic_declare_cursor() throws RecognitionException {
		Dynamic_declare_cursorContext _localctx = new Dynamic_declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_dynamic_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3004); match(DECLARE);
			setState(3005); cursor_name();
			setState(3007);
			_la = _input.LA(1);
			if (_la==INSENSITIVE) {
				{
				setState(3006); match(INSENSITIVE);
				}
			}

			setState(3010);
			_la = _input.LA(1);
			if (_la==SCROLL) {
				{
				setState(3009); match(SCROLL);
				}
			}

			setState(3012); match(CURSOR);
			setState(3013); match(FOR);
			setState(3014); statement_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode UNDERSCORE() { return getToken(Sql92Parser.UNDERSCORE, 0); }
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Actual_identifierContext actual_identifier() {
			return getRuleContext(Actual_identifierContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			_la = _input.LA(1);
			if (_la==UNDERSCORE) {
				{
				setState(3016); match(UNDERSCORE);
				setState(3017); character_set_specification();
				}
			}

			setState(3020); actual_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Actual_identifierContext extends ParserRuleContext {
		public Delimited_identifierContext delimited_identifier() {
			return getRuleContext(Delimited_identifierContext.class,0);
		}
		public Regular_identifierContext regular_identifier() {
			return getRuleContext(Regular_identifierContext.class,0);
		}
		public Actual_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_actual_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterActual_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitActual_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitActual_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Actual_identifierContext actual_identifier() throws RecognitionException {
		Actual_identifierContext _localctx = new Actual_identifierContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_actual_identifier);
		try {
			setState(3024);
			switch (_input.LA(1)) {
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3022); regular_identifier();
				}
				break;
			case DOUBLE_QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3023); delimited_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_identifierContext extends ParserRuleContext {
		public Sql_language_identifierContext sql_language_identifier() {
			return getRuleContext(Sql_language_identifierContext.class,0);
		}
		public Regular_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterRegular_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitRegular_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitRegular_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_identifierContext regular_identifier() throws RecognitionException {
		Regular_identifierContext _localctx = new Regular_identifierContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_regular_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3026); sql_language_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delimited_identifierContext extends ParserRuleContext {
		public Delimited_identifier_bodyContext delimited_identifier_body() {
			return getRuleContext(Delimited_identifier_bodyContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE(int i) {
			return getToken(Sql92Parser.DOUBLE_QUOTE, i);
		}
		public List<TerminalNode> DOUBLE_QUOTE() { return getTokens(Sql92Parser.DOUBLE_QUOTE); }
		public Delimited_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimited_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelimited_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelimited_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelimited_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delimited_identifierContext delimited_identifier() throws RecognitionException {
		Delimited_identifierContext _localctx = new Delimited_identifierContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_delimited_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3028); match(DOUBLE_QUOTE);
			setState(3029); delimited_identifier_body();
			setState(3030); match(DOUBLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delimited_identifier_bodyContext extends ParserRuleContext {
		public Delimited_identifier_partContext delimited_identifier_part(int i) {
			return getRuleContext(Delimited_identifier_partContext.class,i);
		}
		public List<Delimited_identifier_partContext> delimited_identifier_part() {
			return getRuleContexts(Delimited_identifier_partContext.class);
		}
		public Delimited_identifier_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimited_identifier_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelimited_identifier_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelimited_identifier_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelimited_identifier_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delimited_identifier_bodyContext delimited_identifier_body() throws RecognitionException {
		Delimited_identifier_bodyContext _localctx = new Delimited_identifier_bodyContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_delimited_identifier_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3032); delimited_identifier_part();
				}
				}
				setState(3035); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==T__1 || _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delimited_identifier_partContext extends ParserRuleContext {
		public Nondoublequote_characterContext nondoublequote_character() {
			return getRuleContext(Nondoublequote_characterContext.class,0);
		}
		public Doublequote_symbolContext doublequote_symbol() {
			return getRuleContext(Doublequote_symbolContext.class,0);
		}
		public Delimited_identifier_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimited_identifier_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelimited_identifier_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelimited_identifier_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelimited_identifier_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delimited_identifier_partContext delimited_identifier_part() throws RecognitionException {
		Delimited_identifier_partContext _localctx = new Delimited_identifier_partContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_delimited_identifier_part);
		try {
			setState(3039);
			switch (_input.LA(1)) {
			case T__0:
				enterOuterAlt(_localctx, 1);
				{
				setState(3037); nondoublequote_character();
				}
				break;
			case T__1:
				enterOuterAlt(_localctx, 2);
				{
				setState(3038); doublequote_symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3041); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Catalog_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Catalog_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalog_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCatalog_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCatalog_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCatalog_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Catalog_nameContext catalog_name() throws RecognitionException {
		Catalog_nameContext _localctx = new Catalog_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_catalog_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3043); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_string_literalContext extends ParserRuleContext {
		public TerminalNode UNDERSCORE() { return getToken(Sql92Parser.UNDERSCORE, 0); }
		public TerminalNode QUOTE_STRING(int i) {
			return getToken(Sql92Parser.QUOTE_STRING, i);
		}
		public List<TerminalNode> QUOTE_STRING() { return getTokens(Sql92Parser.QUOTE_STRING); }
		public SeperatorContext seperator(int i) {
			return getRuleContext(SeperatorContext.class,i);
		}
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public List<SeperatorContext> seperator() {
			return getRuleContexts(SeperatorContext.class);
		}
		public Character_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_string_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_string_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_string_literalContext character_string_literal() throws RecognitionException {
		Character_string_literalContext _localctx = new Character_string_literalContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_character_string_literal);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3047);
			_la = _input.LA(1);
			if (_la==UNDERSCORE) {
				{
				setState(3045); match(UNDERSCORE);
				setState(3046); character_set_specification();
				}
			}

			setState(3049); match(QUOTE_STRING);
			setState(3059);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,246,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3051); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3050); seperator();
						}
						}
						setState(3053); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==WHITE_SPACE || _la==NEWLINE || _la==COMMENT );
					setState(3055); match(QUOTE_STRING);
					}
					} 
				}
				setState(3061);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,246,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_nameContext extends ParserRuleContext {
		public Sql_language_identifierContext sql_language_identifier() {
			return getRuleContext(Sql_language_identifierContext.class,0);
		}
		public Catalog_nameContext catalog_name() {
			return getRuleContext(Catalog_nameContext.class,0);
		}
		public TerminalNode PERIOD(int i) {
			return getToken(Sql92Parser.PERIOD, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(Sql92Parser.PERIOD); }
		public Character_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_set_nameContext character_set_name() throws RecognitionException {
		Character_set_nameContext _localctx = new Character_set_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_character_set_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3065);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				setState(3062); catalog_name();
				setState(3063); match(PERIOD);
				}
				break;
			}
			setState(3070);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				setState(3067); schema_name();
				setState(3068); match(PERIOD);
				}
				break;
			}
			setState(3072); sql_language_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_set_specificationContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Character_set_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_set_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_set_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_set_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_set_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_set_specificationContext character_set_specification() throws RecognitionException {
		Character_set_specificationContext _localctx = new Character_set_specificationContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_character_set_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_character_repertoire_nameContext extends ParserRuleContext {
		public Character_set_nameContext character_set_name() {
			return getRuleContext(Character_set_nameContext.class,0);
		}
		public Standard_character_repertoire_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_character_repertoire_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStandard_character_repertoire_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStandard_character_repertoire_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStandard_character_repertoire_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_character_repertoire_nameContext standard_character_repertoire_name() throws RecognitionException {
		Standard_character_repertoire_nameContext _localctx = new Standard_character_repertoire_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_standard_character_repertoire_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3076); character_set_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Qualified_local_table_nameContext qualified_local_table_name() {
			return getRuleContext(Qualified_local_table_nameContext.class,0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_table_name);
		try {
			setState(3080);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3078); qualified_name();
				}
				break;
			case MODULE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3079); qualified_local_table_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_name_definitionContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(Sql92Parser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_name_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_name_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_name_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_name_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_name_definitionContext constraint_name_definition() throws RecognitionException {
		Constraint_name_definitionContext _localctx = new Constraint_name_definitionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_constraint_name_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3082); match(CONSTRAINT);
			setState(3083); constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_constraint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3085); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_specificationContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(Sql92Parser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(Sql92Parser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(Sql92Parser.UNIQUE, 0); }
		public Unique_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnique_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnique_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnique_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unique_specificationContext unique_specification() throws RecognitionException {
		Unique_specificationContext _localctx = new Unique_specificationContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_unique_specification);
		try {
			setState(3090);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3087); match(UNIQUE);
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3088); match(PRIMARY);
				setState(3089); match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_specificationContext extends ParserRuleContext {
		public Referential_triggered_actionContext referential_triggered_action() {
			return getRuleContext(Referential_triggered_actionContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(Sql92Parser.MATCH, 0); }
		public Match_typeContext match_type() {
			return getRuleContext(Match_typeContext.class,0);
		}
		public Referenced_table_and_columnsContext referenced_table_and_columns() {
			return getRuleContext(Referenced_table_and_columnsContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(Sql92Parser.REFERENCES, 0); }
		public References_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferences_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferences_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferences_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final References_specificationContext references_specification() throws RecognitionException {
		References_specificationContext _localctx = new References_specificationContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_references_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3092); match(REFERENCES);
			setState(3093); referenced_table_and_columns();
			setState(3096);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(3094); match(MATCH);
				setState(3095); match_type();
				}
			}

			setState(3099);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3098); referential_triggered_action();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referenced_table_and_columnsContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Reference_column_listContext reference_column_list() {
			return getRuleContext(Reference_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Referenced_table_and_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenced_table_and_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferenced_table_and_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferenced_table_and_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferenced_table_and_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referenced_table_and_columnsContext referenced_table_and_columns() throws RecognitionException {
		Referenced_table_and_columnsContext _localctx = new Referenced_table_and_columnsContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_referenced_table_and_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3101); table_name();
			setState(3106);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3102); match(LEFT_PAREN);
				setState(3103); reference_column_list();
				setState(3104); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Reference_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReference_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReference_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReference_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_column_listContext reference_column_list() throws RecognitionException {
		Reference_column_listContext _localctx = new Reference_column_listContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_reference_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3108); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(Sql92Parser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(Sql92Parser.PARTIAL, 0); }
		public Match_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterMatch_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitMatch_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitMatch_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_typeContext match_type() throws RecognitionException {
		Match_typeContext _localctx = new Match_typeContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_match_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3110);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referential_triggered_actionContext extends ParserRuleContext {
		public Delete_ruleContext delete_rule() {
			return getRuleContext(Delete_ruleContext.class,0);
		}
		public Update_ruleContext update_rule() {
			return getRuleContext(Update_ruleContext.class,0);
		}
		public Referential_triggered_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referential_triggered_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferential_triggered_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferential_triggered_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferential_triggered_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referential_triggered_actionContext referential_triggered_action() throws RecognitionException {
		Referential_triggered_actionContext _localctx = new Referential_triggered_actionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_referential_triggered_action);
		int _la;
		try {
			setState(3120);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3112); update_rule();
				setState(3114);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3113); delete_rule();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3116); delete_rule();
				setState(3118);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3117); update_rule();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_ruleContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(Sql92Parser.ON, 0); }
		public Referential_actionContext referential_action() {
			return getRuleContext(Referential_actionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(Sql92Parser.UPDATE, 0); }
		public Update_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdate_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdate_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdate_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_ruleContext update_rule() throws RecognitionException {
		Update_ruleContext _localctx = new Update_ruleContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_update_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3122); match(ON);
			setState(3123); match(UPDATE);
			setState(3124); referential_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_ruleContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(Sql92Parser.ON, 0); }
		public Referential_actionContext referential_action() {
			return getRuleContext(Referential_actionContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(Sql92Parser.DELETE, 0); }
		public Delete_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDelete_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDelete_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDelete_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_ruleContext delete_rule() throws RecognitionException {
		Delete_ruleContext _localctx = new Delete_ruleContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_delete_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3126); match(ON);
			setState(3127); match(DELETE);
			setState(3128); referential_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referential_actionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public TerminalNode CASCADE() { return getToken(Sql92Parser.CASCADE, 0); }
		public TerminalNode ACTION() { return getToken(Sql92Parser.ACTION, 0); }
		public TerminalNode NO() { return getToken(Sql92Parser.NO, 0); }
		public TerminalNode NULL() { return getToken(Sql92Parser.NULL, 0); }
		public Referential_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referential_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferential_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferential_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferential_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referential_actionContext referential_action() throws RecognitionException {
		Referential_actionContext _localctx = new Referential_actionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_referential_action);
		int _la;
		try {
			setState(3135);
			switch (_input.LA(1)) {
			case CASCADE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3130); match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3131); match(SET);
				setState(3132);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NULL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 3);
				{
				setState(3133); match(NO);
				setState(3134); match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_attributesContext extends ParserRuleContext {
		public Constraint_check_timeContext constraint_check_time() {
			return getRuleContext(Constraint_check_timeContext.class,0);
		}
		public TerminalNode DEFERRABLE() { return getToken(Sql92Parser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(Sql92Parser.NOT, 0); }
		public Constraint_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_attributesContext constraint_attributes() throws RecognitionException {
		Constraint_attributesContext _localctx = new Constraint_attributesContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_constraint_attributes);
		int _la;
		try {
			setState(3151);
			switch (_input.LA(1)) {
			case INITIALLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3137); constraint_check_time();
				setState(3142);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(3139);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(3138); match(NOT);
						}
					}

					setState(3141); match(DEFERRABLE);
					}
					break;
				}
				}
				break;
			case DEFERRABLE:
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3145);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3144); match(NOT);
					}
				}

				setState(3147); match(DEFERRABLE);
				setState(3149);
				_la = _input.LA(1);
				if (_la==INITIALLY) {
					{
					setState(3148); constraint_check_time();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_check_timeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(Sql92Parser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(Sql92Parser.IMMEDIATE, 0); }
		public TerminalNode INITIALLY() { return getToken(Sql92Parser.INITIALLY, 0); }
		public Constraint_check_timeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_check_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterConstraint_check_time(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitConstraint_check_time(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitConstraint_check_time(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_check_timeContext constraint_check_time() throws RecognitionException {
		Constraint_check_timeContext _localctx = new Constraint_check_timeContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_constraint_check_time);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3153); match(INITIALLY);
			setState(3154);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_constraint_definitionContext extends ParserRuleContext {
		public Unique_specificationContext unique_specification() {
			return getRuleContext(Unique_specificationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public Unique_column_listContext unique_column_list() {
			return getRuleContext(Unique_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Unique_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnique_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnique_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnique_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unique_constraint_definitionContext unique_constraint_definition() throws RecognitionException {
		Unique_constraint_definitionContext _localctx = new Unique_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_unique_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3156); unique_specification();
			setState(3157); match(LEFT_PAREN);
			setState(3158); unique_column_list();
			setState(3159); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_column_listContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Unique_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnique_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnique_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnique_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unique_column_listContext unique_column_list() throws RecognitionException {
		Unique_column_listContext _localctx = new Unique_column_listContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_unique_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3161); column_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referential_constraint_definitionContext extends ParserRuleContext {
		public References_specificationContext references_specification() {
			return getRuleContext(References_specificationContext.class,0);
		}
		public Referencing_columnsContext referencing_columns() {
			return getRuleContext(Referencing_columnsContext.class,0);
		}
		public TerminalNode KEY() { return getToken(Sql92Parser.KEY, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode FOREIGN() { return getToken(Sql92Parser.FOREIGN, 0); }
		public Referential_constraint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referential_constraint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferential_constraint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferential_constraint_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferential_constraint_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referential_constraint_definitionContext referential_constraint_definition() throws RecognitionException {
		Referential_constraint_definitionContext _localctx = new Referential_constraint_definitionContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_referential_constraint_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3163); match(FOREIGN);
			setState(3164); match(KEY);
			setState(3165); match(LEFT_PAREN);
			setState(3166); referencing_columns();
			setState(3167); match(RIGHT_PAREN);
			setState(3168); references_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_columnsContext extends ParserRuleContext {
		public Reference_column_listContext reference_column_list() {
			return getRuleContext(Reference_column_listContext.class,0);
		}
		public Referencing_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterReferencing_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitReferencing_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitReferencing_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_columnsContext referencing_columns() throws RecognitionException {
		Referencing_columnsContext _localctx = new Referencing_columnsContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_referencing_columns);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3170); reference_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collate_clauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(Sql92Parser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collate_clauseContext collate_clause() throws RecognitionException {
		Collate_clauseContext _localctx = new Collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_collate_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3172); match(COLLATE);
			setState(3173); collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCollation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCollation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCollation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collation_nameContext collation_name() throws RecognitionException {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_collation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3175); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_clauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(Sql92Parser.AS, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public As_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAs_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAs_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAs_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_clauseContext as_clause() throws RecognitionException {
		As_clauseContext _localctx = new As_clauseContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_as_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3177); match(AS);
			setState(3178); column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(Sql92Parser.BY, 0); }
		public Grouping_column_reference_listContext grouping_column_reference_list() {
			return getRuleContext(Grouping_column_reference_listContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(Sql92Parser.GROUP, 0); }
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_group_by_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180); match(GROUP);
			setState(3181); match(BY);
			setState(3182); grouping_column_reference_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_column_reference_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Grouping_column_referenceContext grouping_column_reference(int i) {
			return getRuleContext(Grouping_column_referenceContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public List<Grouping_column_referenceContext> grouping_column_reference() {
			return getRuleContexts(Grouping_column_referenceContext.class);
		}
		public Grouping_column_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_column_reference_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGrouping_column_reference_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGrouping_column_reference_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGrouping_column_reference_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_column_reference_listContext grouping_column_reference_list() throws RecognitionException {
		Grouping_column_reference_listContext _localctx = new Grouping_column_reference_listContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_grouping_column_reference_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3184); grouping_column_reference();
			setState(3189);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,263,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3185); match(COMMA);
					setState(3186); grouping_column_reference();
					}
					} 
				}
				setState(3191);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,263,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_column_referenceContext extends ParserRuleContext {
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Grouping_column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_column_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGrouping_column_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGrouping_column_reference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGrouping_column_reference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_column_referenceContext grouping_column_reference() throws RecognitionException {
		Grouping_column_referenceContext _localctx = new Grouping_column_referenceContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_grouping_column_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192); column_reference();
			setState(3194);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(3193); collate_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public Sort_specification_listContext sort_specification_list() {
			return getRuleContext(Sort_specification_listContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(Sql92Parser.ORDER, 0); }
		public TerminalNode BY() { return getToken(Sql92Parser.BY, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_order_by_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3196); match(ORDER);
			setState(3197); match(BY);
			setState(3198); sort_specification_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specification_listContext extends ParserRuleContext {
		public List<Sort_specificationContext> sort_specification() {
			return getRuleContexts(Sort_specificationContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Sort_specificationContext sort_specification(int i) {
			return getRuleContext(Sort_specificationContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Sort_specification_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specification_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSort_specification_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSort_specification_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSort_specification_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_specification_listContext sort_specification_list() throws RecognitionException {
		Sort_specification_listContext _localctx = new Sort_specification_listContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_sort_specification_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3200); sort_specification();
			setState(3205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3201); match(COMMA);
				setState(3202); sort_specification();
				}
				}
				setState(3207);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specificationContext extends ParserRuleContext {
		public Sort_keyContext sort_key() {
			return getRuleContext(Sort_keyContext.class,0);
		}
		public Collate_clauseContext collate_clause() {
			return getRuleContext(Collate_clauseContext.class,0);
		}
		public Ordering_specificationContext ordering_specification() {
			return getRuleContext(Ordering_specificationContext.class,0);
		}
		public Sort_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSort_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSort_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSort_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_specificationContext sort_specification() throws RecognitionException {
		Sort_specificationContext _localctx = new Sort_specificationContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_sort_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208); sort_key();
			setState(3210);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(3209); collate_clause();
				}
			}

			setState(3213);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3212); ordering_specification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_keyContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Sort_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSort_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSort_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSort_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_keyContext sort_key() throws RecognitionException {
		Sort_keyContext _localctx = new Sort_keyContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_sort_key);
		try {
			setState(3222);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case MODULE:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3218);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(3215); table_name();
					setState(3216); match(PERIOD);
					}
					break;
				}
				setState(3220); column_name();
				}
				break;
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3221); match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordering_specificationContext extends ParserRuleContext {
		public TerminalNode DESC() { return getToken(Sql92Parser.DESC, 0); }
		public TerminalNode ASC() { return getToken(Sql92Parser.ASC, 0); }
		public Ordering_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordering_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterOrdering_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitOrdering_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitOrdering_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ordering_specificationContext ordering_specification() throws RecognitionException {
		Ordering_specificationContext _localctx = new Ordering_specificationContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_ordering_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3224);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Updatability_clauseContext extends ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(Sql92Parser.FOR, 0); }
		public TerminalNode READ() { return getToken(Sql92Parser.READ, 0); }
		public TerminalNode OF() { return getToken(Sql92Parser.OF, 0); }
		public TerminalNode ONLY() { return getToken(Sql92Parser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(Sql92Parser.UPDATE, 0); }
		public Updatability_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatability_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUpdatability_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUpdatability_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUpdatability_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Updatability_clauseContext updatability_clause() throws RecognitionException {
		Updatability_clauseContext _localctx = new Updatability_clauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_updatability_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3226); match(FOR);
			setState(3234);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3227); match(READ);
				setState(3228); match(ONLY);
				}
				break;
			case UPDATE:
				{
				setState(3229); match(UPDATE);
				setState(3232);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(3230); match(OF);
					setState(3231); column_name_list();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_clauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public Default_optionContext default_option() {
			return getRuleContext(Default_optionContext.class,0);
		}
		public Default_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDefault_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDefault_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDefault_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_clauseContext default_clause() throws RecognitionException {
		Default_clauseContext _localctx = new Default_clauseContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_default_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3236); match(DEFAULT);
			setState(3237); default_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_optionContext extends ParserRuleContext {
		public TerminalNode SESSION_USER() { return getToken(Sql92Parser.SESSION_USER, 0); }
		public Datetime_value_functionContext datetime_value_function() {
			return getRuleContext(Datetime_value_functionContext.class,0);
		}
		public TerminalNode USER() { return getToken(Sql92Parser.USER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(Sql92Parser.CURRENT_USER, 0); }
		public TerminalNode NULL() { return getToken(Sql92Parser.NULL, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode SYSTEM_USER() { return getToken(Sql92Parser.SYSTEM_USER, 0); }
		public Default_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDefault_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDefault_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDefault_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_optionContext default_option() throws RecognitionException {
		Default_optionContext _localctx = new Default_optionContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_default_option);
		try {
			setState(3246);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case UNDERSCORE:
			case B_:
			case DATE:
			case INTERVAL:
			case N_:
			case TIME:
			case TIMESTAMP:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3239); literal();
				}
				break;
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3240); datetime_value_function();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3241); match(USER);
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 4);
				{
				setState(3242); match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 5);
				{
				setState(3243); match(SESSION_USER);
				}
				break;
			case SYSTEM_USER:
				enterOuterAlt(_localctx, 6);
				{
				setState(3244); match(SYSTEM_USER);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3245); match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public General_literalContext general_literal() {
			return getRuleContext(General_literalContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_literal);
		int _la;
		try {
			setState(3253);
			switch (_input.LA(1)) {
			case PLUS_SIGN:
			case MINUS_SIGN:
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3249);
				_la = _input.LA(1);
				if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
					{
					setState(3248); sign();
					}
				}

				setState(3251); match(UNSIGNED_INTEGER);
				}
				break;
			case UNDERSCORE:
			case B_:
			case DATE:
			case INTERVAL:
			case N_:
			case TIME:
			case TIMESTAMP:
			case X_:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3252); general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_literalContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public General_literalContext general_literal() {
			return getRuleContext(General_literalContext.class,0);
		}
		public Unsigned_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnsigned_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnsigned_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnsigned_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unsigned_literalContext unsigned_literal() throws RecognitionException {
		Unsigned_literalContext _localctx = new Unsigned_literalContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_unsigned_literal);
		try {
			setState(3257);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3255); match(UNSIGNED_INTEGER);
				}
				break;
			case UNDERSCORE:
			case B_:
			case DATE:
			case INTERVAL:
			case N_:
			case TIME:
			case TIMESTAMP:
			case X_:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3256); general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_literalContext extends ParserRuleContext {
		public Interval_literalContext interval_literal() {
			return getRuleContext(Interval_literalContext.class,0);
		}
		public Bit_string_literalContext bit_string_literal() {
			return getRuleContext(Bit_string_literalContext.class,0);
		}
		public Character_string_literalContext character_string_literal() {
			return getRuleContext(Character_string_literalContext.class,0);
		}
		public Hex_string_literalContext hex_string_literal() {
			return getRuleContext(Hex_string_literalContext.class,0);
		}
		public National_character_string_literalContext national_character_string_literal() {
			return getRuleContext(National_character_string_literalContext.class,0);
		}
		public Datetime_literalContext datetime_literal() {
			return getRuleContext(Datetime_literalContext.class,0);
		}
		public General_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGeneral_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGeneral_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGeneral_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_literalContext general_literal() throws RecognitionException {
		General_literalContext _localctx = new General_literalContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_general_literal);
		try {
			setState(3265);
			switch (_input.LA(1)) {
			case UNDERSCORE:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3259); character_string_literal();
				}
				break;
			case N_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3260); national_character_string_literal();
				}
				break;
			case B_:
				enterOuterAlt(_localctx, 3);
				{
				setState(3261); bit_string_literal();
				}
				break;
			case X_:
				enterOuterAlt(_localctx, 4);
				{
				setState(3262); hex_string_literal();
				}
				break;
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 5);
				{
				setState(3263); datetime_literal();
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3264); interval_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class National_character_string_literalContext extends ParserRuleContext {
		public TerminalNode QUOTE_STRING(int i) {
			return getToken(Sql92Parser.QUOTE_STRING, i);
		}
		public List<TerminalNode> QUOTE_STRING() { return getTokens(Sql92Parser.QUOTE_STRING); }
		public SeperatorContext seperator(int i) {
			return getRuleContext(SeperatorContext.class,i);
		}
		public List<SeperatorContext> seperator() {
			return getRuleContexts(SeperatorContext.class);
		}
		public TerminalNode N_() { return getToken(Sql92Parser.N_, 0); }
		public National_character_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_national_character_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNational_character_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNational_character_string_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNational_character_string_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final National_character_string_literalContext national_character_string_literal() throws RecognitionException {
		National_character_string_literalContext _localctx = new National_character_string_literalContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_national_character_string_literal);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3267); match(N_);
			setState(3268); match(QUOTE_STRING);
			setState(3278);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,278,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3270); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3269); seperator();
						}
						}
						setState(3272); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==WHITE_SPACE || _la==NEWLINE || _la==COMMENT );
					setState(3274); match(QUOTE_STRING);
					}
					} 
				}
				setState(3280);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,278,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_string_literalContext extends ParserRuleContext {
		public TerminalNode QUOTE_BIT(int i) {
			return getToken(Sql92Parser.QUOTE_BIT, i);
		}
		public SeperatorContext seperator(int i) {
			return getRuleContext(SeperatorContext.class,i);
		}
		public TerminalNode B_() { return getToken(Sql92Parser.B_, 0); }
		public List<SeperatorContext> seperator() {
			return getRuleContexts(SeperatorContext.class);
		}
		public List<TerminalNode> QUOTE_BIT() { return getTokens(Sql92Parser.QUOTE_BIT); }
		public Bit_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_string_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_string_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_string_literalContext bit_string_literal() throws RecognitionException {
		Bit_string_literalContext _localctx = new Bit_string_literalContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_bit_string_literal);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3281); match(B_);
			setState(3282); match(QUOTE_BIT);
			setState(3292);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3284); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3283); seperator();
						}
						}
						setState(3286); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==WHITE_SPACE || _la==NEWLINE || _la==COMMENT );
					setState(3288); match(QUOTE_BIT);
					}
					} 
				}
				setState(3294);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hex_string_literalContext extends ParserRuleContext {
		public SeperatorContext seperator(int i) {
			return getRuleContext(SeperatorContext.class,i);
		}
		public List<TerminalNode> QUOTE_HEX() { return getTokens(Sql92Parser.QUOTE_HEX); }
		public TerminalNode X_() { return getToken(Sql92Parser.X_, 0); }
		public TerminalNode QUOTE_HEX(int i) {
			return getToken(Sql92Parser.QUOTE_HEX, i);
		}
		public List<SeperatorContext> seperator() {
			return getRuleContexts(SeperatorContext.class);
		}
		public Hex_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hex_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterHex_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitHex_string_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitHex_string_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hex_string_literalContext hex_string_literal() throws RecognitionException {
		Hex_string_literalContext _localctx = new Hex_string_literalContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_hex_string_literal);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3295); match(X_);
			setState(3296); match(QUOTE_HEX);
			setState(3306);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
			while ( _alt!=2 && _alt!=ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3298); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3297); seperator();
						}
						}
						setState(3300); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==WHITE_SPACE || _la==NEWLINE || _la==COMMENT );
					setState(3302); match(QUOTE_HEX);
					}
					} 
				}
				setState(3308);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_literalContext extends ParserRuleContext {
		public Timestamp_literalContext timestamp_literal() {
			return getRuleContext(Timestamp_literalContext.class,0);
		}
		public Date_literalContext date_literal() {
			return getRuleContext(Date_literalContext.class,0);
		}
		public Time_literalContext time_literal() {
			return getRuleContext(Time_literalContext.class,0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_literalContext datetime_literal() throws RecognitionException {
		Datetime_literalContext _localctx = new Datetime_literalContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_datetime_literal);
		try {
			setState(3312);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3309); date_literal();
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3310); time_literal();
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3311); timestamp_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_literalContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(Sql92Parser.DATE, 0); }
		public TerminalNode DATE_STRING() { return getToken(Sql92Parser.DATE_STRING, 0); }
		public Date_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDate_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDate_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDate_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_literalContext date_literal() throws RecognitionException {
		Date_literalContext _localctx = new Date_literalContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_date_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3314); match(DATE);
			setState(3315); match(DATE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_literalContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(Sql92Parser.TIME, 0); }
		public TerminalNode TIME_STRING() { return getToken(Sql92Parser.TIME_STRING, 0); }
		public Time_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_literalContext time_literal() throws RecognitionException {
		Time_literalContext _localctx = new Time_literalContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_time_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3317); match(TIME);
			setState(3318); match(TIME_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_literalContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(Sql92Parser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_STRING() { return getToken(Sql92Parser.TIMESTAMP_STRING, 0); }
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTimestamp_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTimestamp_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTimestamp_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timestamp_literalContext timestamp_literal() throws RecognitionException {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_timestamp_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3320); match(TIMESTAMP);
			setState(3321); match(TIMESTAMP_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_literalContext extends ParserRuleContext {
		public Interval_qualifierContext interval_qualifier() {
			return getRuleContext(Interval_qualifierContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode INTERVAL_STRING() { return getToken(Sql92Parser.INTERVAL_STRING, 0); }
		public TerminalNode INTERVAL() { return getToken(Sql92Parser.INTERVAL, 0); }
		public Interval_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_literalContext interval_literal() throws RecognitionException {
		Interval_literalContext _localctx = new Interval_literalContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_interval_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3323); match(INTERVAL);
			setState(3325);
			_la = _input.LA(1);
			if (_la==PLUS_SIGN || _la==MINUS_SIGN) {
				{
				setState(3324); sign();
				}
			}

			setState(3327); match(INTERVAL_STRING);
			setState(3328); interval_qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_value_functionContext extends ParserRuleContext {
		public Current_date_value_functionContext current_date_value_function() {
			return getRuleContext(Current_date_value_functionContext.class,0);
		}
		public Current_time_value_functionContext current_time_value_function() {
			return getRuleContext(Current_time_value_functionContext.class,0);
		}
		public Current_timestamp_value_functionContext current_timestamp_value_function() {
			return getRuleContext(Current_timestamp_value_functionContext.class,0);
		}
		public Datetime_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_value_functionContext datetime_value_function() throws RecognitionException {
		Datetime_value_functionContext _localctx = new Datetime_value_functionContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_datetime_value_function);
		try {
			setState(3333);
			switch (_input.LA(1)) {
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3330); current_date_value_function();
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3331); current_time_value_function();
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3332); current_timestamp_value_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_date_value_functionContext extends ParserRuleContext {
		public TerminalNode CURRENT_DATE() { return getToken(Sql92Parser.CURRENT_DATE, 0); }
		public Current_date_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_date_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCurrent_date_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCurrent_date_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCurrent_date_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_date_value_functionContext current_date_value_function() throws RecognitionException {
		Current_date_value_functionContext _localctx = new Current_date_value_functionContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_current_date_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3335); match(CURRENT_DATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_time_value_functionContext extends ParserRuleContext {
		public Time_precisionContext time_precision() {
			return getRuleContext(Time_precisionContext.class,0);
		}
		public TerminalNode CURRENT_TIME() { return getToken(Sql92Parser.CURRENT_TIME, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Current_time_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_time_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCurrent_time_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCurrent_time_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCurrent_time_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_time_value_functionContext current_time_value_function() throws RecognitionException {
		Current_time_value_functionContext _localctx = new Current_time_value_functionContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_current_time_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3337); match(CURRENT_TIME);
			setState(3342);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(3338); match(LEFT_PAREN);
				setState(3339); time_precision();
				setState(3340); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_timestamp_value_functionContext extends ParserRuleContext {
		public Timestamp_precisionContext timestamp_precision() {
			return getRuleContext(Timestamp_precisionContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(Sql92Parser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Current_timestamp_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_timestamp_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCurrent_timestamp_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCurrent_timestamp_value_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCurrent_timestamp_value_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_timestamp_value_functionContext current_timestamp_value_function() throws RecognitionException {
		Current_timestamp_value_functionContext _localctx = new Current_timestamp_value_functionContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_current_timestamp_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3344); match(CURRENT_TIMESTAMP);
			setState(3349);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(3345); match(LEFT_PAREN);
				setState(3346); timestamp_precision();
				setState(3347); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3351); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(Sql92Parser.COMMA); }
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(Sql92Parser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3353); column_name();
			setState(3358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3354); match(COMMA);
				setState(3355); column_name();
				}
				}
				setState(3360);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(Sql92Parser.SET, 0); }
		public Character_string_typeContext character_string_type() {
			return getRuleContext(Character_string_typeContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(Sql92Parser.CHARACTER, 0); }
		public National_character_string_typeContext national_character_string_type() {
			return getRuleContext(National_character_string_typeContext.class,0);
		}
		public Numeric_typeContext numeric_type() {
			return getRuleContext(Numeric_typeContext.class,0);
		}
		public Character_set_specificationContext character_set_specification() {
			return getRuleContext(Character_set_specificationContext.class,0);
		}
		public Interval_typeContext interval_type() {
			return getRuleContext(Interval_typeContext.class,0);
		}
		public Datetime_typeContext datetime_type() {
			return getRuleContext(Datetime_typeContext.class,0);
		}
		public Bit_string_typeContext bit_string_type() {
			return getRuleContext(Bit_string_typeContext.class,0);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_data_type);
		int _la;
		try {
			setState(3372);
			switch (_input.LA(1)) {
			case CHAR:
			case CHARACTER:
			case VARCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3361); character_string_type();
				setState(3365);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3362); match(CHARACTER);
					setState(3363); match(SET);
					setState(3364); character_set_specification();
					}
				}

				}
				break;
			case NATIONAL:
			case NCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3367); national_character_string_type();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3368); bit_string_type();
				}
				break;
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3369); numeric_type();
				}
				break;
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 5);
				{
				setState(3370); datetime_type();
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3371); interval_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_string_typeContext extends ParserRuleContext {
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode VARYING() { return getToken(Sql92Parser.VARYING, 0); }
		public TerminalNode CHARACTER() { return getToken(Sql92Parser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(Sql92Parser.VARCHAR, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode CHAR() { return getToken(Sql92Parser.CHAR, 0); }
		public Character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCharacter_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCharacter_string_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCharacter_string_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_string_typeContext character_string_type() throws RecognitionException {
		Character_string_typeContext _localctx = new Character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_character_string_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3379);
			switch (_input.LA(1)) {
			case CHAR:
			case CHARACTER:
				{
				setState(3374);
				_la = _input.LA(1);
				if ( !(_la==CHAR || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3376);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(3375); match(VARYING);
					}
				}

				}
				break;
			case VARCHAR:
				{
				setState(3378); match(VARCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3385);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3381); match(LEFT_PAREN);
				setState(3382); length();
				setState(3383); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class National_character_string_typeContext extends ParserRuleContext {
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode NATIONAL() { return getToken(Sql92Parser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(Sql92Parser.VARYING, 0); }
		public TerminalNode CHARACTER() { return getToken(Sql92Parser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(Sql92Parser.VARCHAR, 0); }
		public TerminalNode NCHAR() { return getToken(Sql92Parser.NCHAR, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode CHAR() { return getToken(Sql92Parser.CHAR, 0); }
		public National_character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_national_character_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNational_character_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNational_character_string_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNational_character_string_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final National_character_string_typeContext national_character_string_type() throws RecognitionException {
		National_character_string_typeContext _localctx = new National_character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_national_character_string_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3399);
			switch (_input.LA(1)) {
			case NATIONAL:
				{
				setState(3387); match(NATIONAL);
				setState(3393);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					setState(3388);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==CHARACTER) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3390);
					_la = _input.LA(1);
					if (_la==VARYING) {
						{
						setState(3389); match(VARYING);
						}
					}

					}
					break;
				case VARCHAR:
					{
					setState(3392); match(VARCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NCHAR:
				{
				setState(3395); match(NCHAR);
				setState(3397);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(3396); match(VARYING);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3405);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3401); match(LEFT_PAREN);
				setState(3402); length();
				setState(3403); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_string_typeContext extends ParserRuleContext {
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode VARYING() { return getToken(Sql92Parser.VARYING, 0); }
		public TerminalNode BIT() { return getToken(Sql92Parser.BIT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Bit_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterBit_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitBit_string_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitBit_string_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bit_string_typeContext bit_string_type() throws RecognitionException {
		Bit_string_typeContext _localctx = new Bit_string_typeContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_bit_string_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3407); match(BIT);
			setState(3409);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(3408); match(VARYING);
				}
			}

			setState(3415);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3411); match(LEFT_PAREN);
				setState(3412); length();
				setState(3413); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_typeContext extends ParserRuleContext {
		public Exact_numeric_typeContext exact_numeric_type() {
			return getRuleContext(Exact_numeric_typeContext.class,0);
		}
		public Approximate_numeric_typeContext approximate_numeric_type() {
			return getRuleContext(Approximate_numeric_typeContext.class,0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNumeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNumeric_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNumeric_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_typeContext numeric_type() throws RecognitionException {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_numeric_type);
		try {
			setState(3419);
			switch (_input.LA(1)) {
			case DEC:
			case DECIMAL:
			case INT:
			case INTEGER:
			case NUMERIC:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3417); exact_numeric_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3418); approximate_numeric_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exact_numeric_typeContext extends ParserRuleContext {
		public TerminalNode NUMERIC() { return getToken(Sql92Parser.NUMERIC, 0); }
		public TerminalNode INT() { return getToken(Sql92Parser.INT, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(Sql92Parser.COMMA, 0); }
		public TerminalNode DEC() { return getToken(Sql92Parser.DEC, 0); }
		public ScaleContext scale() {
			return getRuleContext(ScaleContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode INTEGER() { return getToken(Sql92Parser.INTEGER, 0); }
		public TerminalNode DECIMAL() { return getToken(Sql92Parser.DECIMAL, 0); }
		public TerminalNode SMALLINT() { return getToken(Sql92Parser.SMALLINT, 0); }
		public Exact_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exact_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExact_numeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExact_numeric_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExact_numeric_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exact_numeric_typeContext exact_numeric_type() throws RecognitionException {
		Exact_numeric_typeContext _localctx = new Exact_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_exact_numeric_type);
		int _la;
		try {
			setState(3435);
			switch (_input.LA(1)) {
			case DEC:
			case DECIMAL:
			case NUMERIC:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3421);
				_la = _input.LA(1);
				if ( !(_la==DEC || _la==DECIMAL || _la==NUMERIC) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3430);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3422); match(LEFT_PAREN);
					setState(3423); precision();
					setState(3426);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3424); match(COMMA);
						setState(3425); scale();
						}
					}

					setState(3428); match(RIGHT_PAREN);
					}
				}

				}
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3432); match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3433); match(INT);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3434); match(SMALLINT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Approximate_numeric_typeContext extends ParserRuleContext {
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode FLOAT() { return getToken(Sql92Parser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(Sql92Parser.DOUBLE, 0); }
		public TerminalNode REAL() { return getToken(Sql92Parser.REAL, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode PRECISION() { return getToken(Sql92Parser.PRECISION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Approximate_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximate_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterApproximate_numeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitApproximate_numeric_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitApproximate_numeric_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Approximate_numeric_typeContext approximate_numeric_type() throws RecognitionException {
		Approximate_numeric_typeContext _localctx = new Approximate_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_approximate_numeric_type);
		int _la;
		try {
			setState(3447);
			switch (_input.LA(1)) {
			case FLOAT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3437); match(FLOAT);
				setState(3442);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3438); match(LEFT_PAREN);
					setState(3439); precision();
					setState(3440); match(RIGHT_PAREN);
					}
				}

				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3444); match(REAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3445); match(DOUBLE);
				setState(3446); match(PRECISION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_typeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(Sql92Parser.TIMESTAMP, 0); }
		public Timestamp_precisionContext timestamp_precision() {
			return getRuleContext(Timestamp_precisionContext.class,0);
		}
		public TerminalNode DATE() { return getToken(Sql92Parser.DATE, 0); }
		public List<TerminalNode> TIME() { return getTokens(Sql92Parser.TIME); }
		public Time_precisionContext time_precision() {
			return getRuleContext(Time_precisionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(Sql92Parser.WITH, 0); }
		public TerminalNode TIME(int i) {
			return getToken(Sql92Parser.TIME, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public TerminalNode ZONE() { return getToken(Sql92Parser.ZONE, 0); }
		public Datetime_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_typeContext datetime_type() throws RecognitionException {
		Datetime_typeContext _localctx = new Datetime_typeContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_datetime_type);
		int _la;
		try {
			setState(3471);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3449); match(DATE);
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3464);
				switch (_input.LA(1)) {
				case TIME:
					{
					setState(3450); match(TIME);
					setState(3455);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(3451); match(LEFT_PAREN);
						setState(3452); time_precision();
						setState(3453); match(RIGHT_PAREN);
						}
					}

					}
					break;
				case TIMESTAMP:
					{
					setState(3457); match(TIMESTAMP);
					setState(3462);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(3458); match(LEFT_PAREN);
						setState(3459); timestamp_precision();
						setState(3460); match(RIGHT_PAREN);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3469);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3466); match(WITH);
					setState(3467); match(TIME);
					setState(3468); match(ZONE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_fractional_seconds_precisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public Time_fractional_seconds_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_fractional_seconds_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_fractional_seconds_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_fractional_seconds_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_fractional_seconds_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_fractional_seconds_precisionContext time_fractional_seconds_precision() throws RecognitionException {
		Time_fractional_seconds_precisionContext _localctx = new Time_fractional_seconds_precisionContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_time_fractional_seconds_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3473); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_precisionContext extends ParserRuleContext {
		public Time_fractional_seconds_precisionContext time_fractional_seconds_precision() {
			return getRuleContext(Time_fractional_seconds_precisionContext.class,0);
		}
		public Time_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_precisionContext time_precision() throws RecognitionException {
		Time_precisionContext _localctx = new Time_precisionContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_time_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3475); time_fractional_seconds_precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_precisionContext extends ParserRuleContext {
		public Time_fractional_seconds_precisionContext time_fractional_seconds_precision() {
			return getRuleContext(Time_fractional_seconds_precisionContext.class,0);
		}
		public Timestamp_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTimestamp_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTimestamp_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTimestamp_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timestamp_precisionContext timestamp_precision() throws RecognitionException {
		Timestamp_precisionContext _localctx = new Timestamp_precisionContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_timestamp_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3477); time_fractional_seconds_precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_typeContext extends ParserRuleContext {
		public Interval_qualifierContext interval_qualifier() {
			return getRuleContext(Interval_qualifierContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(Sql92Parser.INTERVAL, 0); }
		public Interval_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_typeContext interval_type() throws RecognitionException {
		Interval_typeContext _localctx = new Interval_typeContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_interval_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3479); match(INTERVAL);
			setState(3480); interval_qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_qualifierContext extends ParserRuleContext {
		public Sigle_datetime_fieldContext sigle_datetime_field() {
			return getRuleContext(Sigle_datetime_fieldContext.class,0);
		}
		public Start_fieldContext start_field() {
			return getRuleContext(Start_fieldContext.class,0);
		}
		public TerminalNode TO() { return getToken(Sql92Parser.TO, 0); }
		public End_fieldContext end_field() {
			return getRuleContext(End_fieldContext.class,0);
		}
		public Interval_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_qualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_qualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_qualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_qualifierContext interval_qualifier() throws RecognitionException {
		Interval_qualifierContext _localctx = new Interval_qualifierContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_interval_qualifier);
		try {
			setState(3487);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3482); start_field();
				setState(3483); match(TO);
				setState(3484); end_field();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3486); sigle_datetime_field();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_fieldContext extends ParserRuleContext {
		public Interval_leading_field_precisionContext interval_leading_field_precision() {
			return getRuleContext(Interval_leading_field_precisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Non_second_datetime_fieldContext non_second_datetime_field() {
			return getRuleContext(Non_second_datetime_fieldContext.class,0);
		}
		public Start_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStart_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStart_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStart_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_fieldContext start_field() throws RecognitionException {
		Start_fieldContext _localctx = new Start_fieldContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_start_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3489); non_second_datetime_field();
			setState(3494);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3490); match(LEFT_PAREN);
				setState(3491); interval_leading_field_precision();
				setState(3492); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_second_datetime_fieldContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(Sql92Parser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(Sql92Parser.MONTH, 0); }
		public TerminalNode HOUR() { return getToken(Sql92Parser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(Sql92Parser.DAY, 0); }
		public TerminalNode MINUTE() { return getToken(Sql92Parser.MINUTE, 0); }
		public Non_second_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_second_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNon_second_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNon_second_datetime_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNon_second_datetime_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_second_datetime_fieldContext non_second_datetime_field() throws RecognitionException {
		Non_second_datetime_fieldContext _localctx = new Non_second_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_non_second_datetime_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3496);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_leading_field_precisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public Interval_leading_field_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_leading_field_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_leading_field_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_leading_field_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_leading_field_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_leading_field_precisionContext interval_leading_field_precision() throws RecognitionException {
		Interval_leading_field_precisionContext _localctx = new Interval_leading_field_precisionContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_interval_leading_field_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3498); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_fieldContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(Sql92Parser.RIGHT_PAREN, 0); }
		public TerminalNode SECOND() { return getToken(Sql92Parser.SECOND, 0); }
		public Interval_fractional_seconds_precisionContext interval_fractional_seconds_precision() {
			return getRuleContext(Interval_fractional_seconds_precisionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(Sql92Parser.LEFT_PAREN, 0); }
		public Non_second_datetime_fieldContext non_second_datetime_field() {
			return getRuleContext(Non_second_datetime_fieldContext.class,0);
		}
		public End_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterEnd_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitEnd_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitEnd_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_fieldContext end_field() throws RecognitionException {
		End_fieldContext _localctx = new End_fieldContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_end_field);
		try {
			setState(3506);
			switch (_input.LA(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3500); non_second_datetime_field();
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 2);
				{
				setState(3501); match(SECOND);
				setState(3502); match(LEFT_PAREN);
				setState(3503); interval_fractional_seconds_precision();
				setState(3504); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_fractional_seconds_precisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public Interval_fractional_seconds_precisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_fractional_seconds_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterInterval_fractional_seconds_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitInterval_fractional_seconds_precision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitInterval_fractional_seconds_precision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_fractional_seconds_precisionContext interval_fractional_seconds_precision() throws RecognitionException {
		Interval_fractional_seconds_precisionContext _localctx = new Interval_fractional_seconds_precisionContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_interval_fractional_seconds_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3508); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sigle_datetime_fieldContext extends ParserRuleContext {
		public Interval_leading_field_precisionContext interval_leading_field_precision() {
			return getRuleContext(Interval_leading_field_precisionContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(Sql92Parser.LEFT_PAREN, i);
		}
		public TerminalNode COMMA() { return getToken(Sql92Parser.COMMA, 0); }
		public TerminalNode SECOND() { return getToken(Sql92Parser.SECOND, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(Sql92Parser.RIGHT_PAREN); }
		public Interval_fractional_seconds_precisionContext interval_fractional_seconds_precision() {
			return getRuleContext(Interval_fractional_seconds_precisionContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(Sql92Parser.LEFT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(Sql92Parser.RIGHT_PAREN, i);
		}
		public Non_second_datetime_fieldContext non_second_datetime_field() {
			return getRuleContext(Non_second_datetime_fieldContext.class,0);
		}
		public Sigle_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sigle_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSigle_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSigle_datetime_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSigle_datetime_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sigle_datetime_fieldContext sigle_datetime_field() throws RecognitionException {
		Sigle_datetime_fieldContext _localctx = new Sigle_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_sigle_datetime_field);
		int _la;
		try {
			setState(3531);
			switch (_input.LA(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3510); non_second_datetime_field();
				setState(3515);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(3511); match(LEFT_PAREN);
					setState(3512); interval_leading_field_precision();
					setState(3513); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 2);
				{
				setState(3517); match(SECOND);
				setState(3529);
				switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
				case 1:
					{
					setState(3518); match(LEFT_PAREN);
					setState(3519); interval_leading_field_precision();
					setState(3525);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3520); match(COMMA);
						setState(3521); match(LEFT_PAREN);
						setState(3522); interval_fractional_seconds_precision();
						setState(3523); match(RIGHT_PAREN);
						}
					}

					setState(3527); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_value_specificationContext extends ParserRuleContext {
		public Dynamic_parameter_specificationContext dynamic_parameter_specification() {
			return getRuleContext(Dynamic_parameter_specificationContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(Sql92Parser.VALUE, 0); }
		public TerminalNode SESSION_USER() { return getToken(Sql92Parser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(Sql92Parser.USER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(Sql92Parser.CURRENT_USER, 0); }
		public Variable_specificationContext variable_specification() {
			return getRuleContext(Variable_specificationContext.class,0);
		}
		public Parameter_specificationContext parameter_specification() {
			return getRuleContext(Parameter_specificationContext.class,0);
		}
		public TerminalNode SYSTEM_USER() { return getToken(Sql92Parser.SYSTEM_USER, 0); }
		public General_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGeneral_value_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGeneral_value_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGeneral_value_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_value_specificationContext general_value_specification() throws RecognitionException {
		General_value_specificationContext _localctx = new General_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_general_value_specification);
		try {
			setState(3541);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3533); parameter_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3534); dynamic_parameter_specification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3535); variable_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3536); match(USER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3537); match(CURRENT_USER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3538); match(SESSION_USER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3539); match(SYSTEM_USER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3540); match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specificationContext extends ParserRuleContext {
		public Indicator_parameterContext indicator_parameter() {
			return getRuleContext(Indicator_parameterContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Parameter_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specificationContext parameter_specification() throws RecognitionException {
		Parameter_specificationContext _localctx = new Parameter_specificationContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_parameter_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3543); parameter_name();
			setState(3545);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				setState(3544); indicator_parameter();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indicator_parameterContext extends ParserRuleContext {
		public TerminalNode INDICATOR() { return getToken(Sql92Parser.INDICATOR, 0); }
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Indicator_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indicator_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIndicator_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIndicator_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIndicator_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indicator_parameterContext indicator_parameter() throws RecognitionException {
		Indicator_parameterContext _localctx = new Indicator_parameterContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_indicator_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3547); match(INDICATOR);
			setState(3548); parameter_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_parameter_specificationContext extends ParserRuleContext {
		public TerminalNode QUESTION_MARK() { return getToken(Sql92Parser.QUESTION_MARK, 0); }
		public Dynamic_parameter_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_parameter_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDynamic_parameter_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDynamic_parameter_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDynamic_parameter_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_parameter_specificationContext dynamic_parameter_specification() throws RecognitionException {
		Dynamic_parameter_specificationContext _localctx = new Dynamic_parameter_specificationContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_dynamic_parameter_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3550); match(QUESTION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_specificationContext extends ParserRuleContext {
		public Indicator_variableContext indicator_variable() {
			return getRuleContext(Indicator_variableContext.class,0);
		}
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Variable_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterVariable_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitVariable_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitVariable_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_specificationContext variable_specification() throws RecognitionException {
		Variable_specificationContext _localctx = new Variable_specificationContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_variable_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3552); embedded_variable_name();
			setState(3554);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				setState(3553); indicator_variable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indicator_variableContext extends ParserRuleContext {
		public TerminalNode INDICATOR() { return getToken(Sql92Parser.INDICATOR, 0); }
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Indicator_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indicator_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterIndicator_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitIndicator_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitIndicator_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indicator_variableContext indicator_variable() throws RecognitionException {
		Indicator_variableContext _localctx = new Indicator_variableContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_indicator_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			_la = _input.LA(1);
			if (_la==INDICATOR) {
				{
				setState(3556); match(INDICATOR);
				}
			}

			setState(3559); embedded_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Embedded_variable_nameContext extends ParserRuleContext {
		public Host_identifierContext host_identifier() {
			return getRuleContext(Host_identifierContext.class,0);
		}
		public TerminalNode COLON() { return getToken(Sql92Parser.COLON, 0); }
		public Embedded_variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_embedded_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterEmbedded_variable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitEmbedded_variable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitEmbedded_variable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Embedded_variable_nameContext embedded_variable_name() throws RecognitionException {
		Embedded_variable_nameContext _localctx = new Embedded_variable_nameContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_embedded_variable_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561); match(COLON);
			setState(3562); host_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Host_identifierContext extends ParserRuleContext {
		public Pli_host_identifierContext pli_host_identifier() {
			return getRuleContext(Pli_host_identifierContext.class,0);
		}
		public Mumps_host_identifierContext mumps_host_identifier() {
			return getRuleContext(Mumps_host_identifierContext.class,0);
		}
		public Cobol_host_identifierContext cobol_host_identifier() {
			return getRuleContext(Cobol_host_identifierContext.class,0);
		}
		public Fortran_host_identifierContext fortran_host_identifier() {
			return getRuleContext(Fortran_host_identifierContext.class,0);
		}
		public Pascal_host_identifierContext pascal_host_identifier() {
			return getRuleContext(Pascal_host_identifierContext.class,0);
		}
		public C_host_identifierContext c_host_identifier() {
			return getRuleContext(C_host_identifierContext.class,0);
		}
		public Ada_host_identifierContext ada_host_identifier() {
			return getRuleContext(Ada_host_identifierContext.class,0);
		}
		public Host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterHost_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitHost_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitHost_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Host_identifierContext host_identifier() throws RecognitionException {
		Host_identifierContext _localctx = new Host_identifierContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_host_identifier);
		try {
			setState(3571);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3564); ada_host_identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3565); c_host_identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3566); cobol_host_identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3567); fortran_host_identifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3568); mumps_host_identifier();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3569); pascal_host_identifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3570); pli_host_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_identifierContext extends ParserRuleContext {
		public Sql_language_identifierContext sql_language_identifier() {
			return getRuleContext(Sql_language_identifierContext.class,0);
		}
		public General_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterGeneral_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitGeneral_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitGeneral_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_identifierContext general_identifier() throws RecognitionException {
		General_identifierContext _localctx = new General_identifierContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_general_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3573); sql_language_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ada_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Ada_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ada_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAda_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAda_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAda_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ada_host_identifierContext ada_host_identifier() throws RecognitionException {
		Ada_host_identifierContext _localctx = new Ada_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_ada_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3575); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public C_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterC_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitC_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitC_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_host_identifierContext c_host_identifier() throws RecognitionException {
		C_host_identifierContext _localctx = new C_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_c_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3577); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cobol_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Cobol_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cobol_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCobol_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCobol_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCobol_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cobol_host_identifierContext cobol_host_identifier() throws RecognitionException {
		Cobol_host_identifierContext _localctx = new Cobol_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_cobol_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3579); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fortran_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Fortran_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fortran_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterFortran_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitFortran_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitFortran_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fortran_host_identifierContext fortran_host_identifier() throws RecognitionException {
		Fortran_host_identifierContext _localctx = new Fortran_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_fortran_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3581); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mumps_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Mumps_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mumps_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterMumps_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitMumps_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitMumps_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mumps_host_identifierContext mumps_host_identifier() throws RecognitionException {
		Mumps_host_identifierContext _localctx = new Mumps_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_mumps_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3583); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pascal_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Pascal_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pascal_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPascal_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPascal_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPascal_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pascal_host_identifierContext pascal_host_identifier() throws RecognitionException {
		Pascal_host_identifierContext _localctx = new Pascal_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_pascal_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3585); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pli_host_identifierContext extends ParserRuleContext {
		public General_identifierContext general_identifier() {
			return getRuleContext(General_identifierContext.class,0);
		}
		public Pli_host_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pli_host_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPli_host_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPli_host_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPli_host_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pli_host_identifierContext pli_host_identifier() throws RecognitionException {
		Pli_host_identifierContext _localctx = new Pli_host_identifierContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_pli_host_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587); general_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_target_specificationContext extends ParserRuleContext {
		public Embedded_variable_nameContext embedded_variable_name() {
			return getRuleContext(Embedded_variable_nameContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Simple_target_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_target_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSimple_target_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSimple_target_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSimple_target_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_target_specificationContext simple_target_specification() throws RecognitionException {
		Simple_target_specificationContext _localctx = new Simple_target_specificationContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_simple_target_specification);
		try {
			setState(3591);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3589); parameter_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3590); embedded_variable_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_value_specificationContext extends ParserRuleContext {
		public General_value_specificationContext general_value_specification() {
			return getRuleContext(General_value_specificationContext.class,0);
		}
		public Unsigned_literalContext unsigned_literal() {
			return getRuleContext(Unsigned_literalContext.class,0);
		}
		public Unsigned_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterUnsigned_value_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitUnsigned_value_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitUnsigned_value_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unsigned_value_specificationContext unsigned_value_specification() throws RecognitionException {
		Unsigned_value_specificationContext _localctx = new Unsigned_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_unsigned_value_specification);
		try {
			setState(3595);
			switch (_input.LA(1)) {
			case UNDERSCORE:
			case B_:
			case DATE:
			case INTERVAL:
			case N_:
			case TIME:
			case TIMESTAMP:
			case X_:
			case UNSIGNED_INTEGER:
			case QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3593); unsigned_literal();
				}
				break;
			case COLON:
			case QUESTION_MARK:
			case CURRENT_USER:
			case SESSION_USER:
			case SYSTEM_USER:
			case USER:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3594); general_value_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Language_clauseContext extends ParserRuleContext {
		public Language_nameContext language_name() {
			return getRuleContext(Language_nameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(Sql92Parser.LANGUAGE, 0); }
		public Language_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_language_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLanguage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLanguage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLanguage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Language_clauseContext language_clause() throws RecognitionException {
		Language_clauseContext _localctx = new Language_clauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_language_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3597); match(LANGUAGE);
			setState(3598); language_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Language_nameContext extends ParserRuleContext {
		public TerminalNode MUMPS() { return getToken(Sql92Parser.MUMPS, 0); }
		public TerminalNode COBOL() { return getToken(Sql92Parser.COBOL, 0); }
		public TerminalNode C_() { return getToken(Sql92Parser.C_, 0); }
		public TerminalNode PASCAL() { return getToken(Sql92Parser.PASCAL, 0); }
		public TerminalNode PLI() { return getToken(Sql92Parser.PLI, 0); }
		public TerminalNode ADA() { return getToken(Sql92Parser.ADA, 0); }
		public TerminalNode FORTRAN() { return getToken(Sql92Parser.FORTRAN, 0); }
		public Language_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_language_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLanguage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLanguage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLanguage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Language_nameContext language_name() throws RecognitionException {
		Language_nameContext _localctx = new Language_nameContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_language_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3600);
			_la = _input.LA(1);
			if ( !(((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (ADA - 35)) | (1L << (C_ - 35)) | (1L << (COBOL - 35)))) != 0) || _la==FORTRAN || _la==MUMPS || _la==PASCAL || _la==PLI) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_fieldContext extends ParserRuleContext {
		public Datetime_fieldContext datetime_field() {
			return getRuleContext(Datetime_fieldContext.class,0);
		}
		public Time_zone_fieldContext time_zone_field() {
			return getRuleContext(Time_zone_fieldContext.class,0);
		}
		public Extract_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterExtract_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitExtract_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitExtract_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_fieldContext extract_field() throws RecognitionException {
		Extract_fieldContext _localctx = new Extract_fieldContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_extract_field);
		try {
			setState(3604);
			switch (_input.LA(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case SECOND:
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3602); datetime_field();
				}
				break;
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3603); time_zone_field();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_fieldContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(Sql92Parser.SECOND, 0); }
		public Non_second_datetime_fieldContext non_second_datetime_field() {
			return getRuleContext(Non_second_datetime_fieldContext.class,0);
		}
		public Datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDatetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDatetime_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDatetime_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_fieldContext datetime_field() throws RecognitionException {
		Datetime_fieldContext _localctx = new Datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_datetime_field);
		try {
			setState(3608);
			switch (_input.LA(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3606); non_second_datetime_field();
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 2);
				{
				setState(3607); match(SECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zone_fieldContext extends ParserRuleContext {
		public TerminalNode TIMEZONE_MINUTE() { return getToken(Sql92Parser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(Sql92Parser.TIMEZONE_HOUR, 0); }
		public Time_zone_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTime_zone_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTime_zone_field(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTime_zone_field(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Time_zone_fieldContext time_zone_field() throws RecognitionException {
		Time_zone_fieldContext _localctx = new Time_zone_fieldContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_time_zone_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3610);
			_la = _input.LA(1);
			if ( !(_la==TIMEZONE_HOUR || _la==TIMEZONE_MINUTE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_targetContext extends ParserRuleContext {
		public Domain_nameContext domain_name() {
			return getRuleContext(Domain_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Cast_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCast_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCast_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCast_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_targetContext cast_target() throws RecognitionException {
		Cast_targetContext _localctx = new Cast_targetContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_cast_target);
		try {
			setState(3614);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE:
			case UNDERSCORE:
			case B_:
			case C_:
			case N_:
			case X_:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3612); domain_name();
				}
				break;
			case BIT:
			case CHAR:
			case CHARACTER:
			case DATE:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case NATIONAL:
			case NCHAR:
			case NUMERIC:
			case REAL:
			case SMALLINT:
			case TIME:
			case TIMESTAMP:
			case VARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3613); data_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_specificationContext extends ParserRuleContext {
		public TerminalNode BOTH() { return getToken(Sql92Parser.BOTH, 0); }
		public TerminalNode TRAILING() { return getToken(Sql92Parser.TRAILING, 0); }
		public TerminalNode LEADING() { return getToken(Sql92Parser.LEADING, 0); }
		public Trim_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTrim_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTrim_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTrim_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_specificationContext trim_specification() throws RecognitionException {
		Trim_specificationContext _localctx = new Trim_specificationContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_trim_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3616);
			_la = _input.LA(1);
			if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truth_valueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(Sql92Parser.TRUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(Sql92Parser.UNKNOWN, 0); }
		public TerminalNode FALSE() { return getToken(Sql92Parser.FALSE, 0); }
		public Truth_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truth_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTruth_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTruth_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTruth_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truth_valueContext truth_value() throws RecognitionException {
		Truth_valueContext _localctx = new Truth_valueContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_truth_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_specificationContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(Sql92Parser.NULL, 0); }
		public Null_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNull_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNull_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNull_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_specificationContext null_specification() throws RecognitionException {
		Null_specificationContext _localctx = new Null_specificationContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_null_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_specificationContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(Sql92Parser.DEFAULT, 0); }
		public Default_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDefault_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDefault_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDefault_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_specificationContext default_specification() throws RecognitionException {
		Default_specificationContext _localctx = new Default_specificationContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_default_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3622); match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_opContext extends ParserRuleContext {
		public TerminalNode LESS_THAN() { return getToken(Sql92Parser.LESS_THAN, 0); }
		public TerminalNode GREATER_THAN_OR_EQ() { return getToken(Sql92Parser.GREATER_THAN_OR_EQ, 0); }
		public TerminalNode GREATER_THAN() { return getToken(Sql92Parser.GREATER_THAN, 0); }
		public TerminalNode LESS_THAN_OR_EQ() { return getToken(Sql92Parser.LESS_THAN_OR_EQ, 0); }
		public TerminalNode NOT_EQ() { return getToken(Sql92Parser.NOT_EQ, 0); }
		public TerminalNode EQ() { return getToken(Sql92Parser.EQ, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterComp_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitComp_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitComp_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_opContext comp_op() throws RecognitionException {
		Comp_opContext _localctx = new Comp_opContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_comp_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3624);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << LESS_THAN_OR_EQ) | (1L << EQ) | (1L << NOT_EQ) | (1L << GREATER_THAN) | (1L << GREATER_THAN_OR_EQ))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_typeContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(Sql92Parser.COUNT, 0); }
		public TerminalNode SUM() { return getToken(Sql92Parser.SUM, 0); }
		public TerminalNode AVG() { return getToken(Sql92Parser.AVG, 0); }
		public TerminalNode MIN() { return getToken(Sql92Parser.MIN, 0); }
		public TerminalNode MAX() { return getToken(Sql92Parser.MAX, 0); }
		public Set_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_function_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_function_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_function_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_function_typeContext set_function_type() throws RecognitionException {
		Set_function_typeContext _localctx = new Set_function_typeContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_set_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3626);
			_la = _input.LA(1);
			if ( !(_la==AVG || _la==COUNT || _la==MAX || _la==MIN || _la==SUM) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_qualifierContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(Sql92Parser.DISTINCT, 0); }
		public Set_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSet_qualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSet_qualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSet_qualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_qualifierContext set_qualifier() throws RecognitionException {
		Set_qualifierContext _localctx = new Set_qualifierContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_set_qualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3628);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifierContext extends ParserRuleContext {
		public AllContext all() {
			return getRuleContext(AllContext.class,0);
		}
		public SomeContext some() {
			return getRuleContext(SomeContext.class,0);
		}
		public QuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQuantifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuantifierContext quantifier() throws RecognitionException {
		QuantifierContext _localctx = new QuantifierContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_quantifier);
		try {
			setState(3632);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3630); all();
				}
				break;
			case ANY:
			case SOME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3631); some();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(Sql92Parser.ALL, 0); }
		public AllContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAll(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAll(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAll(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllContext all() throws RecognitionException {
		AllContext _localctx = new AllContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_all);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3634); match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SomeContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(Sql92Parser.SOME, 0); }
		public TerminalNode ANY() { return getToken(Sql92Parser.ANY, 0); }
		public SomeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_some; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSome(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSome(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSome(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SomeContext some() throws RecognitionException {
		SomeContext _localctx = new SomeContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_some);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3636);
			_la = _input.LA(1);
			if ( !(_la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3638); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitPrecision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitPrecision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3640); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScaleContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(Sql92Parser.UNSIGNED_INTEGER, 0); }
		public ScaleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scale; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterScale(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitScale(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitScale(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScaleContext scale() throws RecognitionException {
		ScaleContext _localctx = new ScaleContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_scale);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3642); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Authorization_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterAuthorization_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitAuthorization_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitAuthorization_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Authorization_identifierContext authorization_identifier() throws RecognitionException {
		Authorization_identifierContext _localctx = new Authorization_identifierContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_authorization_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3644); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3646); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Correlation_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterCorrelation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitCorrelation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitCorrelation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Correlation_nameContext correlation_name() throws RecognitionException {
		Correlation_nameContext _localctx = new Correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3648); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Statement_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterStatement_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitStatement_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitStatement_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Statement_nameContext statement_name() throws RecognitionException {
		Statement_nameContext _localctx = new Statement_nameContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_statement_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3650); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQualified_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQualified_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQualified_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_identifierContext qualified_identifier() throws RecognitionException {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_qualified_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3652); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_table_nameContext extends ParserRuleContext {
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public Local_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterLocal_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitLocal_table_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitLocal_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_table_nameContext local_table_name() throws RecognitionException {
		Local_table_nameContext _localctx = new Local_table_nameContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_local_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3654); qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_local_table_nameContext extends ParserRuleContext {
		public TerminalNode MODULE() { return getToken(Sql92Parser.MODULE, 0); }
		public Local_table_nameContext local_table_name() {
			return getRuleContext(Local_table_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Qualified_local_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_local_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQualified_local_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQualified_local_table_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQualified_local_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_local_table_nameContext qualified_local_table_name() throws RecognitionException {
		Qualified_local_table_nameContext _localctx = new Qualified_local_table_nameContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_qualified_local_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3656); match(MODULE);
			setState(3657); match(PERIOD);
			setState(3658); local_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_referenceContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(Sql92Parser.PERIOD, 0); }
		public Column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterColumn_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitColumn_reference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitColumn_reference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_referenceContext column_reference() throws RecognitionException {
		Column_referenceContext _localctx = new Column_referenceContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_column_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3663);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(3660); table_name();
				setState(3661); match(PERIOD);
				}
				break;
			}
			setState(3665); column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Domain_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDomain_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDomain_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDomain_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_nameContext domain_name() throws RecognitionException {
		Domain_nameContext _localctx = new Domain_nameContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_domain_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public Catalog_nameContext catalog_name() {
			return getRuleContext(Catalog_nameContext.class,0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return getRuleContext(Qualified_identifierContext.class,0);
		}
		public TerminalNode PERIOD(int i) {
			return getToken(Sql92Parser.PERIOD, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(Sql92Parser.PERIOD); }
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_qualified_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3672);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(3669); catalog_name();
				setState(3670); match(PERIOD);
				}
				break;
			}
			setState(3677);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				setState(3674); schema_name();
				setState(3675); match(PERIOD);
				}
				break;
			}
			setState(3679); qualified_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(Sql92Parser.COLON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681); match(COLON);
			setState(3682); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Form_of_use_conversionContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Form_of_use_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_form_of_use_conversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterForm_of_use_conversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitForm_of_use_conversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitForm_of_use_conversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Form_of_use_conversionContext form_of_use_conversion() throws RecognitionException {
		Form_of_use_conversionContext _localctx = new Form_of_use_conversionContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_form_of_use_conversion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3684); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Translation_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Translation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_translation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterTranslation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitTranslation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitTranslation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Translation_nameContext translation_name() throws RecognitionException {
		Translation_nameContext _localctx = new Translation_nameContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_translation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3686); qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nondoublequote_characterContext extends ParserRuleContext {
		public Nondoublequote_characterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nondoublequote_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterNondoublequote_character(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitNondoublequote_character(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitNondoublequote_character(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nondoublequote_characterContext nondoublequote_character() throws RecognitionException {
		Nondoublequote_characterContext _localctx = new Nondoublequote_characterContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_nondoublequote_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3688); match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Doublequote_symbolContext extends ParserRuleContext {
		public Doublequote_symbolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doublequote_symbol; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterDoublequote_symbol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitDoublequote_symbol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitDoublequote_symbol(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Doublequote_symbolContext doublequote_symbol() throws RecognitionException {
		Doublequote_symbolContext _localctx = new Doublequote_symbolContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_doublequote_symbol);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3690); match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(Sql92Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(Sql92Parser.MINUS_SIGN, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3692);
			_la = _input.LA(1);
			if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeperatorContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(Sql92Parser.NEWLINE, 0); }
		public TerminalNode WHITE_SPACE() { return getToken(Sql92Parser.WHITE_SPACE, 0); }
		public TerminalNode COMMENT() { return getToken(Sql92Parser.COMMENT, 0); }
		public SeperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSeperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSeperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSeperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeperatorContext seperator() throws RecognitionException {
		SeperatorContext _localctx = new SeperatorContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_seperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3694);
			_la = _input.LA(1);
			if ( !(_la==WHITE_SPACE || _la==NEWLINE || _la==COMMENT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsContext extends ParserRuleContext {
		public TerminalNode C_() { return getToken(Sql92Parser.C_, 0); }
		public TerminalNode X_() { return getToken(Sql92Parser.X_, 0); }
		public TerminalNode B_() { return getToken(Sql92Parser.B_, 0); }
		public TerminalNode N_() { return getToken(Sql92Parser.N_, 0); }
		public KeywordsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywords; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterKeywords(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitKeywords(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitKeywords(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsContext keywords() throws RecognitionException {
		KeywordsContext _localctx = new KeywordsContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_keywords);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3696);
			_la = _input.LA(1);
			if ( !(_la==B_ || _la==C_ || _la==N_ || _la==X_) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_language_identifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(Sql92Parser.IDENTIFIER, 0); }
		public KeywordsContext keywords() {
			return getRuleContext(KeywordsContext.class,0);
		}
		public Sql_language_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_language_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).enterSql_language_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Sql92Listener ) ((Sql92Listener)listener).exitSql_language_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Sql92Visitor ) return ((Sql92Visitor<? extends T>)visitor).visitSql_language_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_language_identifierContext sql_language_identifier() throws RecognitionException {
		Sql_language_identifierContext _localctx = new Sql_language_identifierContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_sql_language_identifier);
		try {
			setState(3700);
			switch (_input.LA(1)) {
			case B_:
			case C_:
			case N_:
			case X_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3698); keywords();
				}
				break;
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3699); match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 106: return joined_table_sempred((Joined_tableContext)_localctx, predIndex);
		case 218: return non_join_query_expression_sempred((Non_join_query_expressionContext)_localctx, predIndex);
		case 221: return query_term_sempred((Query_termContext)_localctx, predIndex);
		case 238: return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		case 260: return numeric_value_expression_sempred((Numeric_value_expressionContext)_localctx, predIndex);
		case 261: return term_sempred((TermContext)_localctx, predIndex);
		case 271: return datetime_value_expression_sempred((Datetime_value_expressionContext)_localctx, predIndex);
		case 272: return interval_value_expression_sempred((Interval_value_expressionContext)_localctx, predIndex);
		case 278: return interval_term_sempred((Interval_termContext)_localctx, predIndex);
		case 301: return character_value_expression_sempred((Character_value_expressionContext)_localctx, predIndex);
		case 317: return bit_value_expression_sempred((Bit_value_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean interval_value_expression_sempred(Interval_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean character_value_expression_sempred(Character_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean joined_table_sempred(Joined_tableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return precpred(_ctx, 4);
		case 1: return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return precpred(_ctx, 3);
		case 5: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean interval_term_sempred(Interval_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean datetime_value_expression_sempred(Datetime_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean query_term_sempred(Query_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean numeric_value_expression_sempred(Numeric_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean bit_value_expression_sempred(Bit_value_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean non_join_query_expression_sempred(Non_join_query_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return precpred(_ctx, 4);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0166\u0e79\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\3\2\3"+
		"\2\7\2\u03b7\n\2\f\2\16\2\u03ba\13\2\3\2\3\2\3\3\3\3\3\3\3\3\5\3\u03c2"+
		"\n\3\3\4\3\4\3\4\3\4\3\4\5\4\u03c9\n\4\3\5\3\5\3\5\3\5\3\5\5\5\u03d0\n"+
		"\5\3\6\3\6\3\6\3\6\5\6\u03d6\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u03df"+
		"\n\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\5\n\u03e8\n\n\3\n\3\n\3\n\3\n\3\n\3\13"+
		"\3\13\5\13\u03f1\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3"+
		"\r\3\16\3\16\3\17\3\17\5\17\u0402\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\3\20\3\20\5\20\u040d\n\20\3\21\3\21\3\21\3\21\5\21\u0413\n\21\3\21"+
		"\6\21\u0416\n\21\r\21\16\21\u0417\3\22\3\22\3\22\5\22\u041d\n\22\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\5\22\u0425\n\22\3\22\3\22\3\22\3\22\5\22\u042b"+
		"\n\22\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\26\5\26\u043e\n\26\3\27\3\27\3\27\5\27\u0443\n\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u044c\n\27\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\5\30\u0455\n\30\3\30\3\30\3\30\3\30\5\30\u045b\n\30\3"+
		"\30\3\30\5\30\u045f\n\30\3\31\3\31\3\32\3\32\3\33\3\33\3\33\5\33\u0468"+
		"\n\33\3\33\3\33\5\33\u046c\n\33\3\33\5\33\u046f\n\33\3\33\5\33\u0472\n"+
		"\33\3\34\5\34\u0475\n\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\5\35"+
		"\u047f\n\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\5\37\u048b"+
		"\n\37\3\37\3\37\3\37\5\37\u0490\n\37\3 \3 \3 \3!\3!\5!\u0497\n!\3\"\3"+
		"\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u04a1\n\"\f\"\16\"\u04a4\13\"\3\"\3\"\3"+
		"\"\5\"\u04a9\n\"\3#\3#\3#\5#\u04ae\n#\3$\3$\3$\7$\u04b3\n$\f$\16$\u04b6"+
		"\13$\3%\3%\3%\3%\3%\3%\3%\5%\u04bf\n%\3%\5%\u04c2\n%\3&\3&\3\'\5\'\u04c7"+
		"\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u04d3\n\'\3(\3(\5(\u04d7"+
		"\n(\3)\3)\3)\3)\3)\3)\3)\3)\5)\u04e1\n)\3*\3*\5*\u04e5\n*\3+\3+\3+\3+"+
		"\3+\3+\3+\3+\5+\u04ef\n+\3,\3,\3,\3,\3,\3,\3,\3-\3-\5-\u04fa\n-\3.\3."+
		"\3/\3/\3\60\3\60\3\61\3\61\3\61\3\61\3\61\5\61\u0507\n\61\3\62\3\62\3"+
		"\62\3\62\3\63\3\63\3\63\3\63\5\63\u0511\n\63\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\38\38\58\u0526"+
		"\n8\39\39\39\39\39\39\39\3:\3:\5:\u0531\n:\3;\3;\3<\3<\3=\3=\3>\3>\3>"+
		"\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0544\n>\3?\3?\3?\3?\3?\5?\u054b\n?\3?\3?"+
		"\3?\3@\3@\3A\3A\3A\3A\3A\3B\3B\3B\3B\3B\5B\u055c\nB\3C\3C\5C\u0560\nC"+
		"\3C\3C\3D\3D\3D\3E\3E\5E\u0569\nE\3E\3E\3E\3F\3F\5F\u0570\nF\3G\3G\3G"+
		"\3H\3H\3H\3I\3I\5I\u057a\nI\3I\3I\3I\3J\3J\3J\3J\3J\3K\3K\3K\3K\3K\3L"+
		"\3L\3L\3L\3L\3M\3M\3M\3M\5M\u0592\nM\3M\3M\3M\3M\3M\3M\3M\7M\u059b\nM"+
		"\fM\16M\u059e\13M\3M\3M\3N\3N\3N\3N\3N\3O\3O\3O\3O\3O\3P\3P\3P\3P\3Q\3"+
		"Q\3Q\3Q\3R\3R\3R\3R\3S\3S\3S\3S\3S\3T\3T\3T\3T\5T\u05c1\nT\3U\3U\3U\3"+
		"V\3V\3V\3W\3W\3W\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u05d6\nY\3Z\3Z\3Z\3"+
		"[\3[\5[\u05dd\n[\3[\5[\u05e0\n[\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3\\\3\\\5"+
		"\\\u05ec\n\\\3]\3]\3]\5]\u05f1\n]\3^\3^\3^\7^\u05f6\n^\f^\16^\u05f9\13"+
		"^\3_\3_\5_\u05fd\n_\3`\3`\3`\3a\3a\5a\u0604\na\3a\3a\3a\3a\3a\3b\3b\5"+
		"b\u060d\nb\3c\3c\5c\u0611\nc\3d\3d\3d\7d\u0616\nd\fd\16d\u0619\13d\3e"+
		"\3e\3e\3e\3e\5e\u0620\ne\3f\3f\5f\u0624\nf\3g\3g\3g\7g\u0629\ng\fg\16"+
		"g\u062c\13g\3h\3h\5h\u0630\nh\3h\5h\u0633\nh\3h\5h\u0636\nh\3i\3i\3i\3"+
		"i\7i\u063c\ni\fi\16i\u063f\13i\3j\3j\5j\u0643\nj\3k\3k\5k\u0647\nk\3k"+
		"\3k\3k\5k\u064c\nk\3l\3l\3l\3l\3l\3l\5l\u0654\nl\3l\3l\3l\3l\3l\3l\5l"+
		"\u065c\nl\3l\5l\u065f\nl\3l\3l\3l\5l\u0664\nl\7l\u0666\nl\fl\16l\u0669"+
		"\13l\3m\5m\u066c\nm\3m\3m\3m\3m\3m\5m\u0673\nm\3n\3n\3o\3o\3p\3p\3p\5"+
		"p\u067c\np\3p\5p\u067f\np\3q\3q\3r\3r\5r\u0685\nr\3s\3s\3s\3t\3t\3t\3"+
		"t\3t\3u\3u\3v\3v\3v\3w\3w\3w\3x\3x\3x\3x\3x\5x\u069c\nx\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3z\3z\3z\3z\3z\5z\u06ab\nz\3{\3{\3{\3{\3{\3|\3|\3|\3|\5|\u06b6"+
		"\n|\3|\3|\3|\5|\u06bb\n|\3}\3}\3~\3~\3~\3~\3~\3~\3~\3~\3~\3\177\3\177"+
		"\3\177\7\177\u06cb\n\177\f\177\16\177\u06ce\13\177\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\5\u0082\u06d9\n\u0082"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u06e1\n\u0083"+
		"\3\u0084\3\u0084\3\u0084\5\u0084\u06e6\n\u0084\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\7\u0085\u06ed\n\u0085\f\u0085\16\u0085\u06f0\13\u0085"+
		"\3\u0086\3\u0086\3\u0086\5\u0086\u06f5\n\u0086\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0700\n\u0088"+
		"\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\7\u008d\u0714\n\u008d\f\u008d\16\u008d\u0717\13\u008d\5\u008d\u0719\n"+
		"\u008d\3\u008e\3\u008e\5\u008e\u071d\n\u008e\3\u008f\3\u008f\5\u008f\u0721"+
		"\n\u008f\3\u0090\3\u0090\3\u0090\5\u0090\u0726\n\u0090\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\5\u0092\u072f\n\u0092\3\u0092"+
		"\3\u0092\5\u0092\u0733\n\u0092\3\u0092\5\u0092\u0736\n\u0092\3\u0093\3"+
		"\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\3\u0097\3\u0097\5\u0097\u0744\n\u0097\3\u0098\3\u0098\3\u0098\3\u0099"+
		"\3\u0099\3\u0099\5\u0099\u074c\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\5\u009a\u0753\n\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009c"+
		"\3\u009c\5\u009c\u075b\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\5\u00a1\u0771\n\u00a1"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u077a"+
		"\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0780\n\u00a3\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0788\n\u00a4\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u07a0\n\u00aa\f\u00aa\16\u00aa\u07a3"+
		"\13\u00aa\5\u00aa\u07a5\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ac"+
		"\3\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\5\u00af\u07d0\n\u00af\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u07df"+
		"\n\u00b2\f\u00b2\16\u00b2\u07e2\13\u00b2\5\u00b2\u07e4\n\u00b2\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8"+
		"\5\u00b8\u07f9\n\u00b8\3\u00b9\5\u00b9\u07fc\n\u00b9\3\u00b9\3\u00b9\3"+
		"\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\5\u00bc"+
		"\u0808\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0"+
		"\3\u00c0\3\u00c0\5\u00c0\u081c\n\u00c0\3\u00c0\5\u00c0\u081f\n\u00c0\3"+
		"\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c3\3\u00c3\5\u00c3\u0827\n\u00c3\3"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u082d\n\u00c4\f\u00c4\16\u00c4"+
		"\u0830\13\u00c4\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u083e\n\u00c7\3\u00c8"+
		"\3\u00c8\3\u00c8\5\u00c8\u0843\n\u00c8\3\u00c8\5\u00c8\u0846\n\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\5\u00c9\u084d\n\u00c9\3\u00c9\3"+
		"\u00c9\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0854\n\u00ca\3\u00cb\3\u00cb\5"+
		"\u00cb\u0858\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\5\u00cd\u085f"+
		"\n\u00cd\3\u00cd\5\u00cd\u0862\n\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u0874\n\u00cf\f\u00cf\16\u00cf\u0877"+
		"\13\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d2\3\u00d2\5\u00d2\u0886\n\u00d2\3\u00d3"+
		"\3\u00d3\3\u00d3\7\u00d3\u088b\n\u00d3\f\u00d3\16\u00d3\u088e\13\u00d3"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\7\u00d6\u089b\n\u00d6\f\u00d6\16\u00d6\u089e\13\u00d6"+
		"\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db\5\u00db\u08ae\n\u00db\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u08be\n\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\7\u00dc\u08c4\n\u00dc\f\u00dc\16\u00dc\u08c7\13\u00dc"+
		"\3\u00dd\3\u00dd\5\u00dd\u08cb\n\u00dd\3\u00dd\5\u00dd\u08ce\n\u00dd\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u08d6\n\u00de\3"+
		"\u00df\3\u00df\3\u00df\5\u00df\u08db\n\u00df\3\u00df\3\u00df\3\u00df\3"+
		"\u00df\7\u00df\u08e1\n\u00df\f\u00df\16\u00df\u08e4\13\u00df\3\u00e0\3"+
		"\u00e0\5\u00e0\u08e8\n\u00e0\3\u00e0\5\u00e0\u08eb\n\u00e0\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u08f3\n\u00e1\3\u00e2\3\u00e2"+
		"\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u08fa\n\u00e3\3\u00e4\3\u00e4\5\u00e4"+
		"\u08fe\n\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\7\u00e8\u0911\n\u00e8\f\u00e8\16\u00e8\u0914\13\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u091e"+
		"\n\u00ea\3\u00ea\5\u00ea\u0921\n\u00ea\3\u00ea\7\u00ea\u0924\n\u00ea\f"+
		"\u00ea\16\u00ea\u0927\13\u00ea\3\u00ea\5\u00ea\u092a\n\u00ea\3\u00eb\5"+
		"\u00eb\u092d\n\u00eb\3\u00eb\3\u00eb\5\u00eb\u0931\n\u00eb\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0938\n\u00ec\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ee\5\u00ee\u0940\n\u00ee\3\u00ee\3\u00ee\5\u00ee"+
		"\u0944\n\u00ee\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0949\n\u00ef\3\u00f0\3"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u0955\n\u00f0\3\u00f0\5\u00f0\u0958\n\u00f0\5\u00f0\u095a\n\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u0962\n\u00f0"+
		"\f\u00f0\16\u00f0\u0965\13\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0970\n\u00f1\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f3\3\u00f3\5\u00f3\u0978\n\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\5\u00f4\u0981\n\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u098b"+
		"\n\u00f5\3\u00f6\3\u00f6\3\u00f6\7\u00f6\u0990\n\u00f6\f\u00f6\16\u00f6"+
		"\u0993\13\u00f6\3\u00f7\3\u00f7\5\u00f7\u0997\n\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\5\u00f7\u099d\n\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9"+
		"\3\u00fa\3\u00fa\3\u00fb\3\u00fb\5\u00fb\u09a7\n\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fe"+
		"\3\u00fe\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u09b8\n\u00ff\3\u00ff\5\u00ff"+
		"\u09bb\n\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u09c9\n\u0101\3\u0102"+
		"\3\u0102\3\u0102\5\u0102\u09ce\n\u0102\3\u0103\3\u0103\3\u0103\7\u0103"+
		"\u09d3\n\u0103\f\u0103\16\u0103\u09d6\13\u0103\3\u0104\3\u0104\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\5\u0105\u09de\n\u0105\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\7\u0106\u09e6\n\u0106\f\u0106\16\u0106\u09e9"+
		"\13\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\7\u0107\u09f1"+
		"\n\u0107\f\u0107\16\u0107\u09f4\13\u0107\3\u0108\5\u0108\u09f7\n\u0108"+
		"\3\u0108\3\u0108\3\u0109\3\u0109\5\u0109\u09fd\n\u0109\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u0a05\n\u010a\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\5\u010b\u0a0c\n\u010b\3\u010c\3\u010c\3\u010c"+
		"\5\u010c\u0a11\n\u010c\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3\u010e"+
		"\3\u010e\5\u010e\u0a1a\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u0110\3\u0110\5\u0110\u0a25\n\u0110\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u0a2d\n\u0111\3\u0111\3\u0111"+
		"\3\u0111\7\u0111\u0a32\n\u0111\f\u0111\16\u0111\u0a35\13\u0111\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112"+
		"\u0a40\n\u0112\3\u0112\3\u0112\3\u0112\7\u0112\u0a45\n\u0112\f\u0112\16"+
		"\u0112\u0a48\13\u0112\3\u0113\3\u0113\3\u0114\3\u0114\5\u0114\u0a4e\n"+
		"\u0114\3\u0115\3\u0115\5\u0115\u0a52\n\u0115\3\u0116\3\u0116\3\u0116\3"+
		"\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u0a5b\n\u0117\3\u0118\3\u0118\3"+
		"\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u0a63\n\u0118\3\u0118\3\u0118\3"+
		"\u0118\7\u0118\u0a68\n\u0118\f\u0118\16\u0118\u0a6b\13\u0118\3\u0119\5"+
		"\u0119\u0a6e\n\u0119\3\u0119\3\u0119\3\u011a\3\u011a\5\u011a\u0a74\n\u011a"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\7\u011b\u0a82\n\u011b\f\u011b\16\u011b\u0a85"+
		"\13\u011b\3\u011b\3\u011b\5\u011b\u0a89\n\u011b\3\u011c\3\u011c\5\u011c"+
		"\u0a8d\n\u011c\3\u011d\3\u011d\3\u011d\6\u011d\u0a92\n\u011d\r\u011d\16"+
		"\u011d\u0a93\3\u011d\5\u011d\u0a97\n\u011d\3\u011d\3\u011d\3\u011e\3\u011e"+
		"\6\u011e\u0a9d\n\u011e\r\u011e\16\u011e\u0a9e\3\u011e\5\u011e\u0aa2\n"+
		"\u011e\3\u011e\3\u011e\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0123\3\u0123\5\u0123"+
		"\u0ab4\n\u0123\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0126\3\u0126\5\u0126\u0abf\n\u0126\3\u0127\3\u0127\3\u0127\5\u0127"+
		"\u0ac4\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a"+
		"\5\u012a\u0ad6\n\u012a\3\u012b\3\u012b\3\u012b\5\u012b\u0adb\n\u012b\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\7\u012f\u0af2\n\u012f\f\u012f\16\u012f\u0af5"+
		"\13\u012f\3\u0130\3\u0130\5\u0130\u0af9\n\u0130\3\u0131\3\u0131\5\u0131"+
		"\u0afd\n\u0131\3\u0132\3\u0132\5\u0132\u0b01\n\u0132\3\u0133\3\u0133\3"+
		"\u0133\3\u0133\3\u0133\5\u0133\u0b08\n\u0133\3\u0134\3\u0134\3\u0135\3"+
		"\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u0b13\n\u0135\3"+
		"\u0135\3\u0135\3\u0136\3\u0136\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013b\5\u013b\u0b2d\n\u013b"+
		"\3\u013b\5\u013b\u0b30\n\u013b\3\u013b\3\u013b\3\u013c\3\u013c\3\u013d"+
		"\3\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e"+
		"\u0b3f\n\u013e\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\7\u013f\u0b49\n\u013f\f\u013f\16\u013f\u0b4c\13\u013f\3\u0140"+
		"\3\u0140\3\u0141\3\u0141\5\u0141\u0b52\n\u0141\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\7\u0144\u0b61\n\u0144\f\u0144\16\u0144\u0b64\13\u0144\3\u0144"+
		"\3\u0144\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u0b6c\n\u0145\3\u0146"+
		"\3\u0146\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147"+
		"\u0b77\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\7\u0148\u0b7d\n\u0148\f"+
		"\u0148\16\u0148\u0b80\13\u0148\3\u0148\6\u0148\u0b83\n\u0148\r\u0148\16"+
		"\u0148\u0b84\3\u0149\3\u0149\3\u0149\5\u0149\u0b8a\n\u0149\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d"+
		"\3\u014d\3\u014d\3\u014d\5\u014d\u0b9a\n\u014d\3\u014d\3\u014d\3\u014e"+
		"\3\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\5\u014f\u0baa\n\u014f\3\u0150\3\u0150\3\u0150\5\u0150"+
		"\u0baf\n\u0150\3\u0150\5\u0150\u0bb2\n\u0150\3\u0150\3\u0150\3\u0150\3"+
		"\u0150\3\u0151\3\u0151\5\u0151\u0bba\n\u0151\3\u0151\5\u0151\u0bbd\n\u0151"+
		"\3\u0152\3\u0152\3\u0152\5\u0152\u0bc2\n\u0152\3\u0152\5\u0152\u0bc5\n"+
		"\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0153\3\u0153\5\u0153\u0bcd\n"+
		"\u0153\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u0bd3\n\u0154\3\u0155\3"+
		"\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0157\6\u0157\u0bdc\n\u0157\r"+
		"\u0157\16\u0157\u0bdd\3\u0158\3\u0158\5\u0158\u0be2\n\u0158\3\u0159\3"+
		"\u0159\3\u015a\3\u015a\3\u015b\3\u015b\5\u015b\u0bea\n\u015b\3\u015b\3"+
		"\u015b\6\u015b\u0bee\n\u015b\r\u015b\16\u015b\u0bef\3\u015b\3\u015b\7"+
		"\u015b\u0bf4\n\u015b\f\u015b\16\u015b\u0bf7\13\u015b\3\u015c\3\u015c\3"+
		"\u015c\5\u015c\u0bfc\n\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u0c01\n\u015c"+
		"\3\u015c\3\u015c\3\u015d\3\u015d\3\u015e\3\u015e\3\u015f\3\u015f\5\u015f"+
		"\u0c0b\n\u015f\3\u0160\3\u0160\3\u0160\3\u0161\3\u0161\3\u0162\3\u0162"+
		"\3\u0162\5\u0162\u0c15\n\u0162\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163"+
		"\u0c1b\n\u0163\3\u0163\5\u0163\u0c1e\n\u0163\3\u0164\3\u0164\3\u0164\3"+
		"\u0164\3\u0164\5\u0164\u0c25\n\u0164\3\u0165\3\u0165\3\u0166\3\u0166\3"+
		"\u0167\3\u0167\5\u0167\u0c2d\n\u0167\3\u0167\3\u0167\5\u0167\u0c31\n\u0167"+
		"\5\u0167\u0c33\n\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u0c42"+
		"\n\u016a\3\u016b\3\u016b\5\u016b\u0c46\n\u016b\3\u016b\5\u016b\u0c49\n"+
		"\u016b\3\u016b\5\u016b\u0c4c\n\u016b\3\u016b\3\u016b\5\u016b\u0c50\n\u016b"+
		"\5\u016b\u0c52\n\u016b\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016e\3\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171\3\u0172\3\u0172"+
		"\3\u0173\3\u0173\3\u0173\3\u0174\3\u0174\3\u0174\3\u0174\3\u0175\3\u0175"+
		"\3\u0175\7\u0175\u0c76\n\u0175\f\u0175\16\u0175\u0c79\13\u0175\3\u0176"+
		"\3\u0176\5\u0176\u0c7d\n\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0178"+
		"\3\u0178\3\u0178\7\u0178\u0c86\n\u0178\f\u0178\16\u0178\u0c89\13\u0178"+
		"\3\u0179\3\u0179\5\u0179\u0c8d\n\u0179\3\u0179\5\u0179\u0c90\n\u0179\3"+
		"\u017a\3\u017a\3\u017a\5\u017a\u0c95\n\u017a\3\u017a\3\u017a\5\u017a\u0c99"+
		"\n\u017a\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\5\u017c\u0ca3\n\u017c\5\u017c\u0ca5\n\u017c\3\u017d\3\u017d\3\u017d\3"+
		"\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u0cb1\n"+
		"\u017e\3\u017f\5\u017f\u0cb4\n\u017f\3\u017f\3\u017f\5\u017f\u0cb8\n\u017f"+
		"\3\u0180\3\u0180\5\u0180\u0cbc\n\u0180\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\5\u0181\u0cc4\n\u0181\3\u0182\3\u0182\3\u0182\6\u0182"+
		"\u0cc9\n\u0182\r\u0182\16\u0182\u0cca\3\u0182\3\u0182\7\u0182\u0ccf\n"+
		"\u0182\f\u0182\16\u0182\u0cd2\13\u0182\3\u0183\3\u0183\3\u0183\6\u0183"+
		"\u0cd7\n\u0183\r\u0183\16\u0183\u0cd8\3\u0183\3\u0183\7\u0183\u0cdd\n"+
		"\u0183\f\u0183\16\u0183\u0ce0\13\u0183\3\u0184\3\u0184\3\u0184\6\u0184"+
		"\u0ce5\n\u0184\r\u0184\16\u0184\u0ce6\3\u0184\3\u0184\7\u0184\u0ceb\n"+
		"\u0184\f\u0184\16\u0184\u0cee\13\u0184\3\u0185\3\u0185\3\u0185\5\u0185"+
		"\u0cf3\n\u0185\3\u0186\3\u0186\3\u0186\3\u0187\3\u0187\3\u0187\3\u0188"+
		"\3\u0188\3\u0188\3\u0189\3\u0189\5\u0189\u0d00\n\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u018a\3\u018a\3\u018a\5\u018a\u0d08\n\u018a\3\u018b\3\u018b"+
		"\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u0d11\n\u018c\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u0d18\n\u018d\3\u018e\3\u018e"+
		"\3\u018f\3\u018f\3\u018f\7\u018f\u0d1f\n\u018f\f\u018f\16\u018f\u0d22"+
		"\13\u018f\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u0d28\n\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u0d2f\n\u0190\3\u0191\3\u0191"+
		"\5\u0191\u0d33\n\u0191\3\u0191\5\u0191\u0d36\n\u0191\3\u0191\3\u0191\3"+
		"\u0191\3\u0191\5\u0191\u0d3c\n\u0191\3\u0192\3\u0192\3\u0192\5\u0192\u0d41"+
		"\n\u0192\3\u0192\5\u0192\u0d44\n\u0192\3\u0192\3\u0192\5\u0192\u0d48\n"+
		"\u0192\5\u0192\u0d4a\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u0d50"+
		"\n\u0192\3\u0193\3\u0193\5\u0193\u0d54\n\u0193\3\u0193\3\u0193\3\u0193"+
		"\3\u0193\5\u0193\u0d5a\n\u0193\3\u0194\3\u0194\5\u0194\u0d5e\n\u0194\3"+
		"\u0195\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u0d65\n\u0195\3\u0195\3"+
		"\u0195\5\u0195\u0d69\n\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u0d6e\n\u0195"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u0d75\n\u0196\3\u0196"+
		"\3\u0196\3\u0196\5\u0196\u0d7a\n\u0196\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\5\u0197\u0d82\n\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\5\u0197\u0d89\n\u0197\5\u0197\u0d8b\n\u0197\3\u0197\3\u0197\3"+
		"\u0197\5\u0197\u0d90\n\u0197\5\u0197\u0d92\n\u0197\3\u0198\3\u0198\3\u0199"+
		"\3\u0199\3\u019a\3\u019a\3\u019b\3\u019b\3\u019b\3\u019c\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\5\u019c\u0da2\n\u019c\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\5\u019d\u0da9\n\u019d\3\u019e\3\u019e\3\u019f\3\u019f\3\u01a0"+
		"\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u0db5\n\u01a0\3\u01a1"+
		"\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u0dbe\n\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2"+
		"\u0dc8\n\u01a2\3\u01a2\3\u01a2\5\u01a2\u0dcc\n\u01a2\5\u01a2\u0dce\n\u01a2"+
		"\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3"+
		"\u0dd8\n\u01a3\3\u01a4\3\u01a4\5\u01a4\u0ddc\n\u01a4\3\u01a5\3\u01a5\3"+
		"\u01a5\3\u01a6\3\u01a6\3\u01a7\3\u01a7\5\u01a7\u0de5\n\u01a7\3\u01a8\5"+
		"\u01a8\u0de8\n\u01a8\3\u01a8\3\u01a8\3\u01a9\3\u01a9\3\u01a9\3\u01aa\3"+
		"\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u0df6\n\u01aa\3"+
		"\u01ab\3\u01ab\3\u01ac\3\u01ac\3\u01ad\3\u01ad\3\u01ae\3\u01ae\3\u01af"+
		"\3\u01af\3\u01b0\3\u01b0\3\u01b1\3\u01b1\3\u01b2\3\u01b2\3\u01b3\3\u01b3"+
		"\5\u01b3\u0e0a\n\u01b3\3\u01b4\3\u01b4\5\u01b4\u0e0e\n\u01b4\3\u01b5\3"+
		"\u01b5\3\u01b5\3\u01b6\3\u01b6\3\u01b7\3\u01b7\5\u01b7\u0e17\n\u01b7\3"+
		"\u01b8\3\u01b8\5\u01b8\u0e1b\n\u01b8\3\u01b9\3\u01b9\3\u01ba\3\u01ba\5"+
		"\u01ba\u0e21\n\u01ba\3\u01bb\3\u01bb\3\u01bc\3\u01bc\3\u01bd\3\u01bd\3"+
		"\u01be\3\u01be\3\u01bf\3\u01bf\3\u01c0\3\u01c0\3\u01c1\3\u01c1\3\u01c2"+
		"\3\u01c2\5\u01c2\u0e33\n\u01c2\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c5"+
		"\3\u01c5\3\u01c6\3\u01c6\3\u01c7\3\u01c7\3\u01c8\3\u01c8\3\u01c9\3\u01c9"+
		"\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u0e52\n\u01cf"+
		"\3\u01cf\3\u01cf\3\u01d0\3\u01d0\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u0e5b"+
		"\n\u01d1\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u0e60\n\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d4\3\u01d4\3\u01d5\3\u01d5"+
		"\3\u01d6\3\u01d6\3\u01d7\3\u01d7\3\u01d8\3\u01d8\3\u01d9\3\u01d9\3\u01da"+
		"\3\u01da\5\u01da\u0e77\n\u01da\3\u01da\2\r\u00d6\u01b6\u01bc\u01de\u020a"+
		"\u020c\u0220\u0222\u022e\u025c\u027c\u01db\2\4\6\b\n\f\16\20\22\24\26"+
		"\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|"+
		"~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096"+
		"\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae"+
		"\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6"+
		"\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de"+
		"\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6"+
		"\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e"+
		"\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126"+
		"\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e"+
		"\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156"+
		"\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e"+
		"\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186"+
		"\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e"+
		"\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6"+
		"\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce"+
		"\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6"+
		"\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe"+
		"\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216"+
		"\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e"+
		"\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246"+
		"\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e"+
		"\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276"+
		"\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e"+
		"\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6"+
		"\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be"+
		"\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6"+
		"\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee"+
		"\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306"+
		"\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e"+
		"\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336"+
		"\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e"+
		"\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366"+
		"\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e"+
		"\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396"+
		"\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae"+
		"\u03b0\u03b2\2%\4\2\u00a5\u00a5\u00cc\u00cc\4\2}}\u00fd\u00fd\4\2==\u00cc"+
		"\u00cc\5\2\u00b7\u00b7\u0105\u0105\u0144\u0144\4\2<<\u0108\u0108\4\2#"+
		"#\u0106\u0106\5\2\u00a3\u00a3\u00c8\u00c8\u010d\u010d\4\2XX\u013f\u013f"+
		"\4\2\u00ee\u00ee\u0154\u0154\4\2||\u00af\u00af\4\2\u00bf\u00bf\u0148\u0148"+
		"\7\2VV\u0089\u0089\u00da\u00da\u00e8\u00e8\u0110\u0110\16\2AAKKUUYY\\"+
		"\\`b\u00d3\u00d5\u010b\u010b\u0113\u0113\u0119\u0119\u012b\u012b\u0130"+
		"\u0130\4\2\u0091\u0091\u0140\u0140\4\2\u00a3\u00a3\u00f7\u00f7\3\2\b\t"+
		"\4\2\20\20\23\23\4\2EEII\4\2\u00cf\u00cf\u0145\u0145\4\2\u0123\u0123\u0126"+
		"\u0126\4\2zz\u00e5\u00e5\4\2..~~\3\2CD\4\2wx\u00e9\u00e9\7\2uu\u00ad\u00ad"+
		"\u00d7\u00d7\u00d9\u00d9\u0156\u0156\b\2%%;;NN\u00a0\u00a0\u00db\u00db"+
		"\u00f8\u00f9\3\2\u0135\u0136\5\299\u00c7\u00c7\u0138\u0138\5\2\u0099\u0099"+
		"\u013d\u013d\u0142\u0142\3\2\26\33\7\2\63\63gg\u00d2\u00d2\u00d6\u00d6"+
		"\u012d\u012d\4\2\'\'\u0083\u0083\4\2++\u0120\u0120\5\2\5\5\7\7\u0162\u0162"+
		"\6\2\64\64;;\u00dc\u00dc\u0155\u0155\u0e93\2\u03b4\3\2\2\2\4\u03c1\3\2"+
		"\2\2\6\u03c8\3\2\2\2\b\u03cf\3\2\2\2\n\u03d5\3\2\2\2\f\u03de\3\2\2\2\16"+
		"\u03e0\3\2\2\2\20\u03e2\3\2\2\2\22\u03e4\3\2\2\2\24\u03ee\3\2\2\2\26\u03f9"+
		"\3\2\2\2\30\u03fb\3\2\2\2\32\u03fd\3\2\2\2\34\u0401\3\2\2\2\36\u040c\3"+
		"\2\2\2 \u040e\3\2\2\2\"\u042a\3\2\2\2$\u042c\3\2\2\2&\u042e\3\2\2\2(\u0433"+
		"\3\2\2\2*\u043d\3\2\2\2,\u043f\3\2\2\2.\u044d\3\2\2\2\60\u0460\3\2\2\2"+
		"\62\u0462\3\2\2\2\64\u0464\3\2\2\2\66\u0474\3\2\2\28\u0479\3\2\2\2:\u0480"+
		"\3\2\2\2<\u0485\3\2\2\2>\u0491\3\2\2\2@\u0496\3\2\2\2B\u0498\3\2\2\2D"+
		"\u04ad\3\2\2\2F\u04af\3\2\2\2H\u04c1\3\2\2\2J\u04c3\3\2\2\2L\u04d2\3\2"+
		"\2\2N\u04d6\3\2\2\2P\u04d8\3\2\2\2R\u04e4\3\2\2\2T\u04ee\3\2\2\2V\u04f0"+
		"\3\2\2\2X\u04f9\3\2\2\2Z\u04fb\3\2\2\2\\\u04fd\3\2\2\2^\u04ff\3\2\2\2"+
		"`\u0501\3\2\2\2b\u0508\3\2\2\2d\u0510\3\2\2\2f\u0512\3\2\2\2h\u051c\3"+
		"\2\2\2j\u051e\3\2\2\2l\u0520\3\2\2\2n\u0525\3\2\2\2p\u0527\3\2\2\2r\u0530"+
		"\3\2\2\2t\u0532\3\2\2\2v\u0534\3\2\2\2x\u0536\3\2\2\2z\u0543\3\2\2\2|"+
		"\u0545\3\2\2\2~\u054f\3\2\2\2\u0080\u0551\3\2\2\2\u0082\u055b\3\2\2\2"+
		"\u0084\u055d\3\2\2\2\u0086\u0563\3\2\2\2\u0088\u0566\3\2\2\2\u008a\u056f"+
		"\3\2\2\2\u008c\u0571\3\2\2\2\u008e\u0574\3\2\2\2\u0090\u0577\3\2\2\2\u0092"+
		"\u057e\3\2\2\2\u0094\u0583\3\2\2\2\u0096\u0588\3\2\2\2\u0098\u058d\3\2"+
		"\2\2\u009a\u05a1\3\2\2\2\u009c\u05a6\3\2\2\2\u009e\u05ab\3\2\2\2\u00a0"+
		"\u05af\3\2\2\2\u00a2\u05b3\3\2\2\2\u00a4\u05b7\3\2\2\2\u00a6\u05c0\3\2"+
		"\2\2\u00a8\u05c2\3\2\2\2\u00aa\u05c5\3\2\2\2\u00ac\u05c8\3\2\2\2\u00ae"+
		"\u05cb\3\2\2\2\u00b0\u05d5\3\2\2\2\u00b2\u05d7\3\2\2\2\u00b4\u05da\3\2"+
		"\2\2\u00b6\u05eb\3\2\2\2\u00b8\u05f0\3\2\2\2\u00ba\u05f2\3\2\2\2\u00bc"+
		"\u05fc\3\2\2\2\u00be\u05fe\3\2\2\2\u00c0\u0601\3\2\2\2\u00c2\u060a\3\2"+
		"\2\2\u00c4\u0610\3\2\2\2\u00c6\u0612\3\2\2\2\u00c8\u061f\3\2\2\2\u00ca"+
		"\u0621\3\2\2\2\u00cc\u0625\3\2\2\2\u00ce\u062d\3\2\2\2\u00d0\u0637\3\2"+
		"\2\2\u00d2\u0642\3\2\2\2\u00d4\u064b\3\2\2\2\u00d6\u0653\3\2\2\2\u00d8"+
		"\u066b\3\2\2\2\u00da\u0674\3\2\2\2\u00dc\u0676\3\2\2\2\u00de\u067e\3\2"+
		"\2\2\u00e0\u0680\3\2\2\2\u00e2\u0684\3\2\2\2\u00e4\u0686\3\2\2\2\u00e6"+
		"\u0689\3\2\2\2\u00e8\u068e\3\2\2\2\u00ea\u0690\3\2\2\2\u00ec\u0693\3\2"+
		"\2\2\u00ee\u069b\3\2\2\2\u00f0\u069d\3\2\2\2\u00f2\u06a5\3\2\2\2\u00f4"+
		"\u06ac\3\2\2\2\u00f6\u06ba\3\2\2\2\u00f8\u06bc\3\2\2\2\u00fa\u06be\3\2"+
		"\2\2\u00fc\u06c7\3\2\2\2\u00fe\u06cf\3\2\2\2\u0100\u06d3\3\2\2\2\u0102"+
		"\u06d8\3\2\2\2\u0104\u06da\3\2\2\2\u0106\u06e5\3\2\2\2\u0108\u06e7\3\2"+
		"\2\2\u010a\u06f4\3\2\2\2\u010c\u06f6\3\2\2\2\u010e\u06ff\3\2\2\2\u0110"+
		"\u0701\3\2\2\2\u0112\u0704\3\2\2\2\u0114\u0708\3\2\2\2\u0116\u070a\3\2"+
		"\2\2\u0118\u0718\3\2\2\2\u011a\u071a\3\2\2\2\u011c\u071e\3\2\2\2\u011e"+
		"\u0725\3\2\2\2\u0120\u0727\3\2\2\2\u0122\u0735\3\2\2\2\u0124\u0737\3\2"+
		"\2\2\u0126\u0739\3\2\2\2\u0128\u073b\3\2\2\2\u012a\u073d\3\2\2\2\u012c"+
		"\u0743\3\2\2\2\u012e\u0745\3\2\2\2\u0130\u074b\3\2\2\2\u0132\u0752\3\2"+
		"\2\2\u0134\u0754\3\2\2\2\u0136\u075a\3\2\2\2\u0138\u075c\3\2\2\2\u013a"+
		"\u0760\3\2\2\2\u013c\u0764\3\2\2\2\u013e\u0769\3\2\2\2\u0140\u0770\3\2"+
		"\2\2\u0142\u0779\3\2\2\2\u0144\u077f\3\2\2\2\u0146\u0781\3\2\2\2\u0148"+
		"\u0789\3\2\2\2\u014a\u078c\3\2\2\2\u014c\u078e\3\2\2\2\u014e\u0790\3\2"+
		"\2\2\u0150\u0794\3\2\2\2\u0152\u07a4\3\2\2\2\u0154\u07a6\3\2\2\2\u0156"+
		"\u07aa\3\2\2\2\u0158\u07ac\3\2\2\2\u015a\u07ae\3\2\2\2\u015c\u07cf\3\2"+
		"\2\2\u015e\u07d1\3\2\2\2\u0160\u07d3\3\2\2\2\u0162\u07e3\3\2\2\2\u0164"+
		"\u07e5\3\2\2\2\u0166\u07e9\3\2\2\2\u0168\u07eb\3\2\2\2\u016a\u07ef\3\2"+
		"\2\2\u016c\u07f1\3\2\2\2\u016e\u07f8\3\2\2\2\u0170\u07fb\3\2\2\2\u0172"+
		"\u07ff\3\2\2\2\u0174\u0801\3\2\2\2\u0176\u0807\3\2\2\2\u0178\u0809\3\2"+
		"\2\2\u017a\u080e\3\2\2\2\u017c\u0813\3\2\2\2\u017e\u0818\3\2\2\2\u0180"+
		"\u0820\3\2\2\2\u0182\u0822\3\2\2\2\u0184\u0826\3\2\2\2\u0186\u0828\3\2"+
		"\2\2\u0188\u0831\3\2\2\2\u018a\u0833\3\2\2\2\u018c\u083d\3\2\2\2\u018e"+
		"\u083f\3\2\2\2\u0190\u084c\3\2\2\2\u0192\u0850\3\2\2\2\u0194\u0857\3\2"+
		"\2\2\u0196\u0859\3\2\2\2\u0198\u085c\3\2\2\2\u019a\u0865\3\2\2\2\u019c"+
		"\u086d\3\2\2\2\u019e\u087d\3\2\2\2\u01a0\u087f\3\2\2\2\u01a2\u0885\3\2"+
		"\2\2\u01a4\u0887\3\2\2\2\u01a6\u088f\3\2\2\2\u01a8\u0893\3\2\2\2\u01aa"+
		"\u0895\3\2\2\2\u01ac\u089f\3\2\2\2\u01ae\u08a1\3\2\2\2\u01b0\u08a5\3\2"+
		"\2\2\u01b2\u08a7\3\2\2\2\u01b4\u08ad\3\2\2\2\u01b6\u08bd\3\2\2\2\u01b8"+
		"\u08c8\3\2\2\2\u01ba\u08d5\3\2\2\2\u01bc\u08da\3\2\2\2\u01be\u08e5\3\2"+
		"\2\2\u01c0\u08ec\3\2\2\2\u01c2\u08f4\3\2\2\2\u01c4\u08f9\3\2\2\2\u01c6"+
		"\u08fb\3\2\2\2\u01c8\u0902\3\2\2\2\u01ca\u0905\3\2\2\2\u01cc\u0909\3\2"+
		"\2\2\u01ce\u090c\3\2\2\2\u01d0\u0917\3\2\2\2\u01d2\u091a\3\2\2\2\u01d4"+
		"\u092c\3\2\2\2\u01d6\u0937\3\2\2\2\u01d8\u0939\3\2\2\2\u01da\u093f\3\2"+
		"\2\2\u01dc\u0948\3\2\2\2\u01de\u0959\3\2\2\2\u01e0\u096f\3\2\2\2\u01e2"+
		"\u0971\3\2\2\2\u01e4\u0975\3\2\2\2\u01e6\u097e\3\2\2\2\u01e8\u098a\3\2"+
		"\2\2\u01ea\u098c\3\2\2\2\u01ec\u0994\3\2\2\2\u01ee\u099e\3\2\2\2\u01f0"+
		"\u09a0\3\2\2\2\u01f2\u09a2\3\2\2\2\u01f4\u09a4\3\2\2\2\u01f6\u09aa\3\2"+
		"\2\2\u01f8\u09af\3\2\2\2\u01fa\u09b2\3\2\2\2\u01fc\u09b4\3\2\2\2\u01fe"+
		"\u09be\3\2\2\2\u0200\u09c8\3\2\2\2\u0202\u09cd\3\2\2\2\u0204\u09cf\3\2"+
		"\2\2\u0206\u09d7\3\2\2\2\u0208\u09dd\3\2\2\2\u020a\u09df\3\2\2\2\u020c"+
		"\u09ea\3\2\2\2\u020e\u09f6\3\2\2\2\u0210\u09fc\3\2\2\2\u0212\u0a04\3\2"+
		"\2\2\u0214\u0a0b\3\2\2\2\u0216\u0a0d\3\2\2\2\u0218\u0a15\3\2\2\2\u021a"+
		"\u0a19\3\2\2\2\u021c\u0a1b\3\2\2\2\u021e\u0a24\3\2\2\2\u0220\u0a2c\3\2"+
		"\2\2\u0222\u0a3f\3\2\2\2\u0224\u0a49\3\2\2\2\u0226\u0a4b\3\2\2\2\u0228"+
		"\u0a51\3\2\2\2\u022a\u0a53\3\2\2\2\u022c\u0a5a\3\2\2\2\u022e\u0a62\3\2"+
		"\2\2\u0230\u0a6d\3\2\2\2\u0232\u0a71\3\2\2\2\u0234\u0a88\3\2\2\2\u0236"+
		"\u0a8c\3\2\2\2\u0238\u0a8e\3\2\2\2\u023a\u0a9a\3\2\2\2\u023c\u0aa5\3\2"+
		"\2\2\u023e\u0aa7\3\2\2\2\u0240\u0aac\3\2\2\2\u0242\u0aaf\3\2\2\2\u0244"+
		"\u0ab3\3\2\2\2\u0246\u0ab5\3\2\2\2\u0248\u0ab7\3\2\2\2\u024a\u0abe\3\2"+
		"\2\2\u024c\u0ac3\3\2\2\2\u024e\u0ac5\3\2\2\2\u0250\u0acc\3\2\2\2\u0252"+
		"\u0ad5\3\2\2\2\u0254\u0ada\3\2\2\2\u0256\u0adc\3\2\2\2\u0258\u0ae1\3\2"+
		"\2\2\u025a\u0ae6\3\2\2\2\u025c\u0aeb\3\2\2\2\u025e\u0af6\3\2\2\2\u0260"+
		"\u0afc\3\2\2\2\u0262\u0b00\3\2\2\2\u0264\u0b07\3\2\2\2\u0266\u0b09\3\2"+
		"\2\2\u0268\u0b0b\3\2\2\2\u026a\u0b16\3\2\2\2\u026c\u0b18\3\2\2\2\u026e"+
		"\u0b1a\3\2\2\2\u0270\u0b1f\3\2\2\2\u0272\u0b26\3\2\2\2\u0274\u0b2f\3\2"+
		"\2\2\u0276\u0b33\3\2\2\2\u0278\u0b35\3\2\2\2\u027a\u0b37\3\2\2\2\u027c"+
		"\u0b42\3\2\2\2\u027e\u0b4d\3\2\2\2\u0280\u0b51\3\2\2\2\u0282\u0b53\3\2"+
		"\2\2\u0284\u0b5a\3\2\2\2\u0286\u0b5c\3\2\2\2\u0288\u0b6b\3\2\2\2\u028a"+
		"\u0b6d\3\2\2\2\u028c\u0b76\3\2\2\2\u028e\u0b78\3\2\2\2\u0290\u0b89\3\2"+
		"\2\2\u0292\u0b8b\3\2\2\2\u0294\u0b8f\3\2\2\2\u0296\u0b91\3\2\2\2\u0298"+
		"\u0b95\3\2\2\2\u029a\u0b9d\3\2\2\2\u029c\u0b9f\3\2\2\2\u029e\u0bab\3\2"+
		"\2\2\u02a0\u0bb7\3\2\2\2\u02a2\u0bbe\3\2\2\2\u02a4\u0bcc\3\2\2\2\u02a6"+
		"\u0bd2\3\2\2\2\u02a8\u0bd4\3\2\2\2\u02aa\u0bd6\3\2\2\2\u02ac\u0bdb\3\2"+
		"\2\2\u02ae\u0be1\3\2\2\2\u02b0\u0be3\3\2\2\2\u02b2\u0be5\3\2\2\2\u02b4"+
		"\u0be9\3\2\2\2\u02b6\u0bfb\3\2\2\2\u02b8\u0c04\3\2\2\2\u02ba\u0c06\3\2"+
		"\2\2\u02bc\u0c0a\3\2\2\2\u02be\u0c0c\3\2\2\2\u02c0\u0c0f\3\2\2\2\u02c2"+
		"\u0c14\3\2\2\2\u02c4\u0c16\3\2\2\2\u02c6\u0c1f\3\2\2\2\u02c8\u0c26\3\2"+
		"\2\2\u02ca\u0c28\3\2\2\2\u02cc\u0c32\3\2\2\2\u02ce\u0c34\3\2\2\2\u02d0"+
		"\u0c38\3\2\2\2\u02d2\u0c41\3\2\2\2\u02d4\u0c51\3\2\2\2\u02d6\u0c53\3\2"+
		"\2\2\u02d8\u0c56\3\2\2\2\u02da\u0c5b\3\2\2\2\u02dc\u0c5d\3\2\2\2\u02de"+
		"\u0c64\3\2\2\2\u02e0\u0c66\3\2\2\2\u02e2\u0c69\3\2\2\2\u02e4\u0c6b\3\2"+
		"\2\2\u02e6\u0c6e\3\2\2\2\u02e8\u0c72\3\2\2\2\u02ea\u0c7a\3\2\2\2\u02ec"+
		"\u0c7e\3\2\2\2\u02ee\u0c82\3\2\2\2\u02f0\u0c8a\3\2\2\2\u02f2\u0c98\3\2"+
		"\2\2\u02f4\u0c9a\3\2\2\2\u02f6\u0c9c\3\2\2\2\u02f8\u0ca6\3\2\2\2\u02fa"+
		"\u0cb0\3\2\2\2\u02fc\u0cb7\3\2\2\2\u02fe\u0cbb\3\2\2\2\u0300\u0cc3\3\2"+
		"\2\2\u0302\u0cc5\3\2\2\2\u0304\u0cd3\3\2\2\2\u0306\u0ce1\3\2\2\2\u0308"+
		"\u0cf2\3\2\2\2\u030a\u0cf4\3\2\2\2\u030c\u0cf7\3\2\2\2\u030e\u0cfa\3\2"+
		"\2\2\u0310\u0cfd\3\2\2\2\u0312\u0d07\3\2\2\2\u0314\u0d09\3\2\2\2\u0316"+
		"\u0d0b\3\2\2\2\u0318\u0d12\3\2\2\2\u031a\u0d19\3\2\2\2\u031c\u0d1b\3\2"+
		"\2\2\u031e\u0d2e\3\2\2\2\u0320\u0d35\3\2\2\2\u0322\u0d49\3\2\2\2\u0324"+
		"\u0d51\3\2\2\2\u0326\u0d5d\3\2\2\2\u0328\u0d6d\3\2\2\2\u032a\u0d79\3\2"+
		"\2\2\u032c\u0d91\3\2\2\2\u032e\u0d93\3\2\2\2\u0330\u0d95\3\2\2\2\u0332"+
		"\u0d97\3\2\2\2\u0334\u0d99\3\2\2\2\u0336\u0da1\3\2\2\2\u0338\u0da3\3\2"+
		"\2\2\u033a\u0daa\3\2\2\2\u033c\u0dac\3\2\2\2\u033e\u0db4\3\2\2\2\u0340"+
		"\u0db6\3\2\2\2\u0342\u0dcd\3\2\2\2\u0344\u0dd7\3\2\2\2\u0346\u0dd9\3\2"+
		"\2\2\u0348\u0ddd\3\2\2\2\u034a\u0de0\3\2\2\2\u034c\u0de2\3\2\2\2\u034e"+
		"\u0de7\3\2\2\2\u0350\u0deb\3\2\2\2\u0352\u0df5\3\2\2\2\u0354\u0df7\3\2"+
		"\2\2\u0356\u0df9\3\2\2\2\u0358\u0dfb\3\2\2\2\u035a\u0dfd\3\2\2\2\u035c"+
		"\u0dff\3\2\2\2\u035e\u0e01\3\2\2\2\u0360\u0e03\3\2\2\2\u0362\u0e05\3\2"+
		"\2\2\u0364\u0e09\3\2\2\2\u0366\u0e0d\3\2\2\2\u0368\u0e0f\3\2\2\2\u036a"+
		"\u0e12\3\2\2\2\u036c\u0e16\3\2\2\2\u036e\u0e1a\3\2\2\2\u0370\u0e1c\3\2"+
		"\2\2\u0372\u0e20\3\2\2\2\u0374\u0e22\3\2\2\2\u0376\u0e24\3\2\2\2\u0378"+
		"\u0e26\3\2\2\2\u037a\u0e28\3\2\2\2\u037c\u0e2a\3\2\2\2\u037e\u0e2c\3\2"+
		"\2\2\u0380\u0e2e\3\2\2\2\u0382\u0e32\3\2\2\2\u0384\u0e34\3\2\2\2\u0386"+
		"\u0e36\3\2\2\2\u0388\u0e38\3\2\2\2\u038a\u0e3a\3\2\2\2\u038c\u0e3c\3\2"+
		"\2\2\u038e\u0e3e\3\2\2\2\u0390\u0e40\3\2\2\2\u0392\u0e42\3\2\2\2\u0394"+
		"\u0e44\3\2\2\2\u0396\u0e46\3\2\2\2\u0398\u0e48\3\2\2\2\u039a\u0e4a\3\2"+
		"\2\2\u039c\u0e51\3\2\2\2\u039e\u0e55\3\2\2\2\u03a0\u0e5a\3\2\2\2\u03a2"+
		"\u0e63\3\2\2\2\u03a4\u0e66\3\2\2\2\u03a6\u0e68\3\2\2\2\u03a8\u0e6a\3\2"+
		"\2\2\u03aa\u0e6c\3\2\2\2\u03ac\u0e6e\3\2\2\2\u03ae\u0e70\3\2\2\2\u03b0"+
		"\u0e72\3\2\2\2\u03b2\u0e76\3\2\2\2\u03b4\u03b8\5\4\3\2\u03b5\u03b7\7\25"+
		"\2\2\u03b6\u03b5\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8"+
		"\u03b9\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03bc\7\2"+
		"\2\3\u03bc\3\3\2\2\2\u03bd\u03c2\5\6\4\2\u03be\u03c2\5\n\6\2\u03bf\u03c2"+
		"\5\u0282\u0142\2\u03c0\u03c2\5\u028e\u0148\2\u03c1\u03bd\3\2\2\2\u03c1"+
		"\u03be\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c0\3\2\2\2\u03c2\5\3\2\2\2"+
		"\u03c3\u03c9\5\b\5\2\u03c4\u03c9\5\34\17\2\u03c5\u03c9\5\u0106\u0084\2"+
		"\u03c6\u03c9\5\u011e\u0090\2\u03c7\u03c9\5\u0132\u009a\2\u03c8\u03c3\3"+
		"\2\2\2\u03c8\u03c4\3\2\2\2\u03c8\u03c5\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8"+
		"\u03c7\3\2\2\2\u03c9\7\3\2\2\2\u03ca\u03d0\5\u00f2z\2\u03cb\u03d0\5\u00c2"+
		"b\2\u03cc\u03d0\5\u00f4{\2\u03cd\u03d0\5\u0104\u0083\2\u03ce\u03d0\5\u029c"+
		"\u014f\2\u03cf\u03ca\3\2\2\2\u03cf\u03cb\3\2\2\2\u03cf\u03cc\3\2\2\2\u03cf"+
		"\u03cd\3\2\2\2\u03cf\u03ce\3\2\2\2\u03d0\t\3\2\2\2\u03d1\u03d6\5\f\7\2"+
		"\u03d2\u03d6\5\26\f\2\u03d3\u03d6\5\30\r\2\u03d4\u03d6\5\32\16\2\u03d5"+
		"\u03d1\3\2\2\2\u03d5\u03d2\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d4\3\2"+
		"\2\2\u03d6\13\3\2\2\2\u03d7\u03df\5\u00f2z\2\u03d8\u03df\5\16\b\2\u03d9"+
		"\u03df\5\u00f4{\2\u03da\u03df\5\20\t\2\u03db\u03df\5\u0104\u0083\2\u03dc"+
		"\u03df\5\22\n\2\u03dd\u03df\5\24\13\2\u03de\u03d7\3\2\2\2\u03de\u03d8"+
		"\3\2\2\2\u03de\u03d9\3\2\2\2\u03de\u03da\3\2\2\2\u03de\u03db\3\2\2\2\u03de"+
		"\u03dc\3\2\2\2\u03de\u03dd\3\2\2\2\u03df\r\3\2\2\2\u03e0\u03e1\5\u01c6"+
		"\u00e4\2\u03e1\17\3\2\2\2\u03e2\u03e3\5\u02a0\u0151\2\u03e3\21\3\2\2\2"+
		"\u03e4\u03e7\7}\2\2\u03e5\u03e6\7\u00a2\2\2\u03e6\u03e8\5\u02bc\u015f"+
		"\2\u03e7\u03e5\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea"+
		"\7\u0151\2\2\u03ea\u03eb\7j\2\2\u03eb\u03ec\7\u00eb\2\2\u03ec\u03ed\5"+
		"\u0390\u01c9\2\u03ed\23\3\2\2\2\u03ee\u03f0\7\u0144\2\2\u03ef\u03f1\5"+
		"\u02bc\u015f\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\3\2"+
		"\2\2\u03f2\u03f3\7\u011c\2\2\u03f3\u03f4\5\u00fe\u0080\2\u03f4\u03f5\7"+
		"\u0151\2\2\u03f5\u03f6\7j\2\2\u03f6\u03f7\7\u00eb\2\2\u03f7\u03f8\5\u0390"+
		"\u01c9\2\u03f8\25\3\2\2\2\u03f9\u03fa\5\34\17\2\u03fa\27\3\2\2\2\u03fb"+
		"\u03fc\5\u0106\u0084\2\u03fc\31\3\2\2\2\u03fd\u03fe\5\u0132\u009a\2\u03fe"+
		"\33\3\2\2\2\u03ff\u0402\5\36\20\2\u0400\u0402\5z>\2\u0401\u03ff\3\2\2"+
		"\2\u0401\u0400\3\2\2\2\u0402\35\3\2\2\2\u0403\u040d\5 \21\2\u0404\u040d"+
		"\5,\27\2\u0405\u040d\5.\30\2\u0406\u040d\5B\"\2\u0407\u040d\5\64\33\2"+
		"\u0408\u040d\5<\37\2\u0409\u040d\5P)\2\u040a\u040d\5f\64\2\u040b\u040d"+
		"\58\35\2\u040c\u0403\3\2\2\2\u040c\u0404\3\2\2\2\u040c\u0405\3\2\2\2\u040c"+
		"\u0406\3\2\2\2\u040c\u0407\3\2\2\2\u040c\u0408\3\2\2\2\u040c\u0409\3\2"+
		"\2\2\u040c\u040a\3\2\2\2\u040c\u040b\3\2\2\2\u040d\37\3\2\2\2\u040e\u040f"+
		"\7h\2\2\u040f\u0410\7\u0112\2\2\u0410\u0412\5\"\22\2\u0411\u0413\5&\24"+
		"\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415\3\2\2\2\u0414\u0416"+
		"\5*\26\2\u0415\u0414\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0415\3\2\2\2\u0417"+
		"\u0418\3\2\2\2\u0418!\3\2\2\2\u0419\u041a\5\u02b2\u015a\2\u041a\u041b"+
		"\7\22\2\2\u041b\u041d\3\2\2\2\u041c\u0419\3\2\2\2\u041c\u041d\3\2\2\2"+
		"\u041d\u041e\3\2\2\2\u041e\u042b\5\u02b0\u0159\2\u041f\u0420\7\61\2\2"+
		"\u0420\u042b\5$\23\2\u0421\u0422\5\u02b2\u015a\2\u0422\u0423\7\22\2\2"+
		"\u0423\u0425\3\2\2\2\u0424\u0421\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426"+
		"\3\2\2\2\u0426\u0427\5\u02b0\u0159\2\u0427\u0428\7\61\2\2\u0428\u0429"+
		"\5$\23\2\u0429\u042b\3\2\2\2\u042a\u041c\3\2\2\2\u042a\u041f\3\2\2\2\u042a"+
		"\u0424\3\2\2\2\u042b#\3\2\2\2\u042c\u042d\5\u038e\u01c8\2\u042d%\3\2\2"+
		"\2\u042e\u042f\7z\2\2\u042f\u0430\7D\2\2\u0430\u0431\7\u011c\2\2\u0431"+
		"\u0432\5\u02b8\u015d\2\u0432\'\3\2\2\2\u0433\u0434\5\u02b6\u015c\2\u0434"+
		")\3\2\2\2\u0435\u043e\5\64\33\2\u0436\u043e\5,\27\2\u0437\u043e\5.\30"+
		"\2\u0438\u043e\5B\"\2\u0439\u043e\58\35\2\u043a\u043e\5<\37\2\u043b\u043e"+
		"\5P)\2\u043c\u043e\5f\64\2\u043d\u0435\3\2\2\2\u043d\u0436\3\2\2\2\u043d"+
		"\u0437\3\2\2\2\u043d\u0438\3\2\2\2\u043d\u0439\3\2\2\2\u043d\u043a\3\2"+
		"\2\2\u043d\u043b\3\2\2\2\u043d\u043c\3\2\2\2\u043e+\3\2\2\2\u043f\u0442"+
		"\7h\2\2\u0440\u0441\t\2\2\2\u0441\u0443\7\u0131\2\2\u0442\u0440\3\2\2"+
		"\2\u0442\u0443\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445\7\u012f\2\2\u0445"+
		"\u0446\5\u02bc\u015f\2\u0446\u044b\5\u01ce\u00e8\2\u0447\u0448\7\u00ed"+
		"\2\2\u0448\u0449\7W\2\2\u0449\u044a\t\3\2\2\u044a\u044c\7\u010f\2\2\u044b"+
		"\u0447\3\2\2\2\u044b\u044c\3\2\2\2\u044c-\3\2\2\2\u044d\u044e\7h\2\2\u044e"+
		"\u044f\7\u014d\2\2\u044f\u0454\5\u02bc\u015f\2\u0450\u0451\7\16\2\2\u0451"+
		"\u0452\5\60\31\2\u0452\u0453\7\17\2\2\u0453\u0455\3\2\2\2\u0454\u0450"+
		"\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457\7-\2\2\u0457"+
		"\u045e\5\u01b4\u00db\2\u0458\u045a\7\u0152\2\2\u0459\u045b\5\62\32\2\u045a"+
		"\u0459\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045d\7J"+
		"\2\2\u045d\u045f\7\u00f0\2\2\u045e\u0458\3\2\2\2\u045e\u045f\3\2\2\2\u045f"+
		"/\3\2\2\2\u0460\u0461\5\u031c\u018f\2\u0461\61\3\2\2\2\u0462\u0463\t\4"+
		"\2\2\u0463\63\3\2\2\2\u0464\u0465\7h\2\2\u0465\u0467\7\u0084\2\2\u0466"+
		"\u0468\7-\2\2\u0467\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\3\2"+
		"\2\2\u0469\u046b\5\u031e\u0190\2\u046a\u046c\5\u02f8\u017d\2\u046b\u046a"+
		"\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3\2\2\2\u046d\u046f\5\66\34\2"+
		"\u046e\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0471\3\2\2\2\u0470\u0472"+
		"\5\u02e0\u0171\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\65\3\2"+
		"\2\2\u0473\u0475\5\u02be\u0160\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2"+
		"\2\u0475\u0476\3\2\2\2\u0476\u0477\5\u01d8\u00ed\2\u0477\u0478\5\u02d4"+
		"\u016b\2\u0478\67\3\2\2\2\u0479\u047a\7h\2\2\u047a\u047b\7/\2\2\u047b"+
		"\u047c\5\u02c0\u0161\2\u047c\u047e\5:\36\2\u047d\u047f\5\u02d4\u016b\2"+
		"\u047e\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047f9\3\2\2\2\u0480\u0481\7"+
		"J\2\2\u0481\u0482\7\16\2\2\u0482\u0483\5\u01de\u00f0\2\u0483\u0484\7\17"+
		"\2\2\u0484;\3\2\2\2\u0485\u0486\7h\2\2\u0486\u0487\7D\2\2\u0487\u0488"+
		"\7\u011c\2\2\u0488\u048a\5\u02b6\u015c\2\u0489\u048b\7-\2\2\u048a\u0489"+
		"\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u048f\5> \2\u048d"+
		"\u0490\5\u02e0\u0171\2\u048e\u0490\5b\62\2\u048f\u048d\3\2\2\2\u048f\u048e"+
		"\3\2\2\2\u048f\u0490\3\2\2\2\u0490=\3\2\2\2\u0491\u0492\7\u00a4\2\2\u0492"+
		"\u0493\5@!\2\u0493?\3\2\2\2\u0494\u0497\5\u02ba\u015e\2\u0495\u0497\5"+
		"(\25\2\u0496\u0494\3\2\2\2\u0496\u0495\3\2\2\2\u0497A\3\2\2\2\u0498\u0499"+
		"\7\u00a8\2\2\u0499\u049a\5D#\2\u049a\u049b\7\u00ed\2\2\u049b\u049c\5L"+
		"\'\2\u049c\u049d\7\u0137\2\2\u049d\u04a2\5N(\2\u049e\u049f\7\21\2\2\u049f"+
		"\u04a1\5N(\2\u04a0\u049e\3\2\2\2\u04a1\u04a4\3\2\2\2\u04a2\u04a0\3\2\2"+
		"\2\u04a2\u04a3\3\2\2\2\u04a3\u04a8\3\2\2\2\u04a4\u04a2\3\2\2\2\u04a5\u04a6"+
		"\7\u0152\2\2\u04a6\u04a7\7\u00a8\2\2\u04a7\u04a9\7\u00f0\2\2\u04a8\u04a5"+
		"\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9C\3\2\2\2\u04aa\u04ab\7\'\2\2\u04ab"+
		"\u04ae\7\u0100\2\2\u04ac\u04ae\5F$\2\u04ad\u04aa\3\2\2\2\u04ad\u04ac\3"+
		"\2\2\2\u04aeE\3\2\2\2\u04af\u04b4\5H%\2\u04b0\u04b1\7\21\2\2\u04b1\u04b3"+
		"\5H%\2\u04b2\u04b0\3\2\2\2\u04b3\u04b6\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b4"+
		"\u04b5\3\2\2\2\u04b5G\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b7\u04c2\7\u0117"+
		"\2\2\u04b8\u04c2\7}\2\2\u04b9\u04be\t\5\2\2\u04ba\u04bb\7\16\2\2\u04bb"+
		"\u04bc\5J&\2\u04bc\u04bd\7\17\2\2\u04bd\u04bf\3\2\2\2\u04be\u04ba\3\2"+
		"\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c2\3\2\2\2\u04c0\u04c2\7\u0146\2\2\u04c1"+
		"\u04b7\3\2\2\2\u04c1\u04b8\3\2\2\2\u04c1\u04b9\3\2\2\2\u04c1\u04c0\3\2"+
		"\2\2\u04c2I\3\2\2\2\u04c3\u04c4\5\u031c\u018f\2\u04c4K\3\2\2\2\u04c5\u04c7"+
		"\7\u012f\2\2\u04c6\u04c5\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\3\2\2"+
		"\2\u04c8\u04d3\5\u02bc\u015f\2\u04c9\u04ca\7\u0084\2\2\u04ca\u04d3\5\u039e"+
		"\u01d0\2\u04cb\u04cc\7P\2\2\u04cc\u04d3\5\u02e2\u0172\2\u04cd\u04ce\7"+
		"D\2\2\u04ce\u04cf\7\u011c\2\2\u04cf\u04d3\5\u02b6\u015c\2\u04d0\u04d1"+
		"\7\u013b\2\2\u04d1\u04d3\5\u03a6\u01d4\2\u04d2\u04c6\3\2\2\2\u04d2\u04c9"+
		"\3\2\2\2\u04d2\u04cb\3\2\2\2\u04d2\u04cd\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d3"+
		"M\3\2\2\2\u04d4\u04d7\7\u0102\2\2\u04d5\u04d7\5\u038e\u01c8\2\u04d6\u04d4"+
		"\3\2\2\2\u04d6\u04d5\3\2\2\2\u04d7O\3\2\2\2\u04d8\u04d9\7h\2\2\u04d9\u04da"+
		"\7P\2\2\u04da\u04db\5\u02e2\u0172\2\u04db\u04dc\7\u009e\2\2\u04dc\u04dd"+
		"\5\u02b8\u015d\2\u04dd\u04de\7\u00a2\2\2\u04de\u04e0\5R*\2\u04df\u04e1"+
		"\5d\63\2\u04e0\u04df\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1Q\3\2\2\2\u04e2"+
		"\u04e5\5T+\2\u04e3\u04e5\5`\61\2\u04e4\u04e2\3\2\2\2\u04e4\u04e3\3\2\2"+
		"\2\u04e5S\3\2\2\2\u04e6\u04ef\5V,\2\u04e7\u04ef\5^\60\2\u04e8\u04e9\7"+
		"~\2\2\u04e9\u04ea\7\16\2\2\u04ea\u04eb\5\u02e2\u0172\2\u04eb\u04ec\7\17"+
		"\2\2\u04ec\u04ef\3\2\2\2\u04ed\u04ef\7z\2\2\u04ee\u04e6\3\2\2\2\u04ee"+
		"\u04e7\3\2\2\2\u04ee\u04e8\3\2\2\2\u04ee\u04ed\3\2\2\2\u04efU\3\2\2\2"+
		"\u04f0\u04f1\7\u0097\2\2\u04f1\u04f2\7\16\2\2\u04f2\u04f3\7\r\2\2\u04f3"+
		"\u04f4\5X-\2\u04f4\u04f5\7\r\2\2\u04f5\u04f6\7\17\2\2\u04f6W\3\2\2\2\u04f7"+
		"\u04fa\5Z.\2\u04f8\u04fa\5\\/\2\u04f9\u04f7\3\2\2\2\u04f9\u04f8\3\2\2"+
		"\2\u04faY\3\2\2\2\u04fb\u04fc\5\u02e2\u0172\2\u04fc[\3\2\2\2\u04fd\u04fe"+
		"\5\u02e2\u0172\2\u04fe]\3\2\2\2\u04ff\u0500\5\u02e2\u0172\2\u0500_\3\2"+
		"\2\2\u0501\u0502\7\u013b\2\2\u0502\u0506\5\u03a6\u01d4\2\u0503\u0504\7"+
		"\u0132\2\2\u0504\u0505\7P\2\2\u0505\u0507\5\u02e2\u0172\2\u0506\u0503"+
		"\3\2\2\2\u0506\u0507\3\2\2\2\u0507a\3\2\2\2\u0508\u0509\7P\2\2\u0509\u050a"+
		"\7\u00a2\2\2\u050a\u050b\5R*\2\u050bc\3\2\2\2\u050c\u050d\7\u00e3\2\2"+
		"\u050d\u0511\7\u00f6\2\2\u050e\u050f\7\u00f6\2\2\u050f\u0511\7\u0121\2"+
		"\2\u0510\u050c\3\2\2\2\u0510\u050e\3\2\2\2\u0511e\3\2\2\2\u0512\u0513"+
		"\7h\2\2\u0513\u0514\7\u013b\2\2\u0514\u0515\5\u03a6\u01d4\2\u0515\u0516"+
		"\7\u009e\2\2\u0516\u0517\5h\65\2\u0517\u0518\7\u0137\2\2\u0518\u0519\5"+
		"\u02b8\u015d\2\u0519\u051a\7\u00a2\2\2\u051a\u051b\5l\67\2\u051bg\3\2"+
		"\2\2\u051c\u051d\5\u02b8\u015d\2\u051di\3\2\2\2\u051e\u051f\5\u02b8\u015d"+
		"\2\u051fk\3\2\2\2\u0520\u0521\5n8\2\u0521m\3\2\2\2\u0522\u0526\5p9\2\u0523"+
		"\u0526\7\u00ae\2\2\u0524\u0526\5x=\2\u0525\u0522\3\2\2\2\u0525\u0523\3"+
		"\2\2\2\u0525\u0524\3\2\2\2\u0526o\3\2\2\2\u0527\u0528\7\u0097\2\2\u0528"+
		"\u0529\7\16\2\2\u0529\u052a\7\r\2\2\u052a\u052b\5r:\2\u052b\u052c\7\r"+
		"\2\2\u052c\u052d\7\17\2\2\u052dq\3\2\2\2\u052e\u0531\5t;\2\u052f\u0531"+
		"\5v<\2\u0530\u052e\3\2\2\2\u0530\u052f\3\2\2\2\u0531s\3\2\2\2\u0532\u0533"+
		"\5\u03a6\u01d4\2\u0533u\3\2\2\2\u0534\u0535\5\u03a6\u01d4\2\u0535w\3\2"+
		"\2\2\u0536\u0537\5\u03a6\u01d4\2\u0537y\3\2\2\2\u0538\u0544\5|?\2\u0539"+
		"\u0544\5\u0080A\2\u053a\u0544\5\u0094K\2\u053b\u0544\5\u0096L\2\u053c"+
		"\u0544\5\u0098M\2\u053d\u0544\5\u00a4S\2\u053e\u0544\5\u009aN\2\u053f"+
		"\u0544\5\u009cO\2\u0540\u0544\5\u009eP\2\u0541\u0544\5\u00a0Q\2\u0542"+
		"\u0544\5\u00a2R\2\u0543\u0538\3\2\2\2\u0543\u0539\3\2\2\2\u0543\u053a"+
		"\3\2\2\2\u0543\u053b\3\2\2\2\u0543\u053c\3\2\2\2\u0543\u053d\3\2\2\2\u0543"+
		"\u053e\3\2\2\2\u0543\u053f\3\2\2\2\u0543\u0540\3\2\2\2\u0543\u0541\3\2"+
		"\2\2\u0543\u0542\3\2\2\2\u0544{\3\2\2\2\u0545\u0546\7\u0088\2\2\u0546"+
		"\u054a\7\u0112\2\2\u0547\u0548\5\u02b2\u015a\2\u0548\u0549\7\22\2\2\u0549"+
		"\u054b\3\2\2\2\u054a\u0547\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\3\2"+
		"\2\2\u054c\u054d\5\u02b0\u0159\2\u054d\u054e\5~@\2\u054e}\3\2\2\2\u054f"+
		"\u0550\t\6\2\2\u0550\177\3\2\2\2\u0551\u0552\7)\2\2\u0552\u0553\7\u012f"+
		"\2\2\u0553\u0554\5\u02bc\u015f\2\u0554\u0555\5\u0082B\2\u0555\u0081\3"+
		"\2\2\2\u0556\u055c\5\u0084C\2\u0557\u055c\5\u0088E\2\u0558\u055c\5\u0090"+
		"I\2\u0559\u055c\5\u0086D\2\u055a\u055c\5\u0092J\2\u055b\u0556\3\2\2\2"+
		"\u055b\u0557\3\2\2\2\u055b\u0558\3\2\2\2\u055b\u0559\3\2\2\2\u055b\u055a"+
		"\3\2\2\2\u055c\u0083\3\2\2\2\u055d\u055f\7&\2\2\u055e\u0560\7T\2\2\u055f"+
		"\u055e\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\5\u01d2"+
		"\u00ea\2\u0562\u0085\3\2\2\2\u0563\u0564\7&\2\2\u0564\u0565\5\u01da\u00ee"+
		"\2\u0565\u0087\3\2\2\2\u0566\u0568\7)\2\2\u0567\u0569\7T\2\2\u0568\u0567"+
		"\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056b\5\u031a\u018e"+
		"\2\u056b\u056c\5\u008aF\2\u056c\u0089\3\2\2\2\u056d\u0570\5\u008cG\2\u056e"+
		"\u0570\5\u008eH\2\u056f\u056d\3\2\2\2\u056f\u056e\3\2\2\2\u0570\u008b"+
		"\3\2\2\2\u0571\u0572\7\u011c\2\2\u0572\u0573\5\u02f8\u017d\2\u0573\u008d"+
		"\3\2\2\2\u0574\u0575\7\u0088\2\2\u0575\u0576\7z\2\2\u0576\u008f\3\2\2"+
		"\2\u0577\u0579\7\u0088\2\2\u0578\u057a\7T\2\2\u0579\u0578\3\2\2\2\u0579"+
		"\u057a\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u057c\5\u031a\u018e\2\u057c\u057d"+
		"\5~@\2\u057d\u0091\3\2\2\2\u057e\u057f\7\u0088\2\2\u057f\u0580\7^\2\2"+
		"\u0580\u0581\5\u02c0\u0161\2\u0581\u0582\5~@\2\u0582\u0093\3\2\2\2\u0583"+
		"\u0584\7\u0088\2\2\u0584\u0585\7\u012f\2\2\u0585\u0586\5\u02bc\u015f\2"+
		"\u0586\u0587\5~@\2\u0587\u0095\3\2\2\2\u0588\u0589\7\u0088\2\2\u0589\u058a"+
		"\7\u014d\2\2\u058a\u058b\5\u02bc\u015f\2\u058b\u058c\5~@\2\u058c\u0097"+
		"\3\2\2\2\u058d\u0591\7\u010c\2\2\u058e\u058f\7\u00a8\2\2\u058f\u0590\7"+
		"\u00f0\2\2\u0590\u0592\7\u009e\2\2\u0591\u058e\3\2\2\2\u0591\u0592\3\2"+
		"\2\2\u0592\u0593\3\2\2\2\u0593\u0594\5D#\2\u0594\u0595\7\u00ed\2\2\u0595"+
		"\u0596\5L\'\2\u0596\u0597\7\u00a2\2\2\u0597\u059c\5N(\2\u0598\u0599\7"+
		"\21\2\2\u0599\u059b\5N(\2\u059a\u0598\3\2\2\2\u059b\u059e\3\2\2\2\u059c"+
		"\u059a\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059f\3\2\2\2\u059e\u059c\3\2"+
		"\2\2\u059f\u05a0\5~@\2\u05a0\u0099\3\2\2\2\u05a1\u05a2\7\u0088\2\2\u05a2"+
		"\u05a3\7\u0084\2\2\u05a3\u05a4\5\u039e\u01d0\2\u05a4\u05a5\5~@\2\u05a5"+
		"\u009b\3\2\2\2\u05a6\u05a7\7\u0088\2\2\u05a7\u05a8\7D\2\2\u05a8\u05a9"+
		"\7\u011c\2\2\u05a9\u05aa\5\u02b6\u015c\2\u05aa\u009d\3\2\2\2\u05ab\u05ac"+
		"\7\u0088\2\2\u05ac\u05ad\7P\2\2\u05ad\u05ae\5\u02e2\u0172\2\u05ae\u009f"+
		"\3\2\2\2\u05af\u05b0\7\u0088\2\2\u05b0\u05b1\7\u013b\2\2\u05b1\u05b2\5"+
		"\u03a6\u01d4\2\u05b2\u00a1\3\2\2\2\u05b3\u05b4\7\u0088\2\2\u05b4\u05b5"+
		"\7/\2\2\u05b5\u05b6\5\u02c0\u0161\2\u05b6\u00a3\3\2\2\2\u05b7\u05b8\7"+
		")\2\2\u05b8\u05b9\7\u0084\2\2\u05b9\u05ba\5\u039e\u01d0\2\u05ba\u05bb"+
		"\5\u00a6T\2\u05bb\u00a5\3\2\2\2\u05bc\u05c1\5\u00a8U\2\u05bd\u05c1\5\u00aa"+
		"V\2\u05be\u05c1\5\u00acW\2\u05bf\u05c1\5\u00aeX\2\u05c0\u05bc\3\2\2\2"+
		"\u05c0\u05bd\3\2\2\2\u05c0\u05be\3\2\2\2\u05c0\u05bf\3\2\2\2\u05c1\u00a7"+
		"\3\2\2\2\u05c2\u05c3\7\u011c\2\2\u05c3\u05c4\5\u02f8\u017d\2\u05c4\u00a9"+
		"\3\2\2\2\u05c5\u05c6\7\u0088\2\2\u05c6\u05c7\7z\2\2\u05c7\u00ab\3\2\2"+
		"\2\u05c8\u05c9\7&\2\2\u05c9\u05ca\5\66\34\2\u05ca\u00ad\3\2\2\2\u05cb"+
		"\u05cc\7\u0088\2\2\u05cc\u05cd\7^\2\2\u05cd\u05ce\5\u02c0\u0161\2\u05ce"+
		"\u00af\3\2\2\2\u05cf\u05d6\5\u00b2Z\2\u05d0\u05d6\5\u00b4[\2\u05d1\u05d6"+
		"\5\u00be`\2\u05d2\u05d6\5\u00c0a\2\u05d3\u05d6\5\u00c2b\2\u05d4\u05d6"+
		"\5\u00eex\2\u05d5\u05cf\3\2\2\2\u05d5\u05d0\3\2\2\2\u05d5\u05d1\3\2\2"+
		"\2\u05d5\u05d2\3\2\2\2\u05d5\u05d3\3\2\2\2\u05d5\u05d4\3\2\2\2\u05d6\u00b1"+
		"\3\2\2\2\u05d7\u05d8\7\u00ef\2\2\u05d8\u05d9\5\u0390\u01c9\2\u05d9\u00b3"+
		"\3\2\2\2\u05da\u05df\7\u009a\2\2\u05db\u05dd\5\u00b6\\\2\u05dc\u05db\3"+
		"\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05e0\7\u00a2\2\2"+
		"\u05df\u05dc\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e2"+
		"\5\u0390\u01c9\2\u05e2\u05e3\7\u00bf\2\2\u05e3\u05e4\5\u00ba^\2\u05e4"+
		"\u00b5\3\2\2\2\u05e5\u05ec\7\u00e2\2\2\u05e6\u05ec\7\u00ff\2\2\u05e7\u05ec"+
		"\7\u009b\2\2\u05e8\u05ec\7\u00c6\2\2\u05e9\u05ea\t\7\2\2\u05ea\u05ec\5"+
		"\u00b8]\2\u05eb\u05e5\3\2\2\2\u05eb\u05e6\3\2\2\2\u05eb\u05e7\3\2\2\2"+
		"\u05eb\u05e8\3\2\2\2\u05eb\u05e9\3\2\2\2\u05ec\u00b7\3\2\2\2\u05ed\u05f1"+
		"\5\u03a2\u01d2\2\u05ee\u05f1\5\u0350\u01a9\2\u05ef\u05f1\5\u02fc\u017f"+
		"\2\u05f0\u05ed\3\2\2\2\u05f0\u05ee\3\2\2\2\u05f0\u05ef\3\2\2\2\u05f1\u00b9"+
		"\3\2\2\2\u05f2\u05f7\5\u00bc_\2\u05f3\u05f4\7\21\2\2\u05f4\u05f6\5\u00bc"+
		"_\2\u05f5\u05f3\3\2\2\2\u05f6\u05f9\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f7"+
		"\u05f8\3\2\2\2\u05f8\u00bb\3\2\2\2\u05f9\u05f7\3\2\2\2\u05fa\u05fd\5\u0346"+
		"\u01a4\2\u05fb\u05fd\5\u034c\u01a7\2\u05fc\u05fa\3\2\2\2\u05fc\u05fb\3"+
		"\2\2\2\u05fd\u00bd\3\2\2\2\u05fe\u05ff\7L\2\2\u05ff\u0600\5\u0390\u01c9"+
		"\2\u0600\u00bf\3\2\2\2\u0601\u0603\7\u0117\2\2\u0602\u0604\5\u0380\u01c1"+
		"\2\u0603\u0602\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0606"+
		"\5\u00c4c\2\u0606\u0607\7\u00bf\2\2\u0607\u0608\5\u00ccg\2\u0608\u0609"+
		"\5\u00ceh\2\u0609\u00c1\3\2\2\2\u060a\u060c\5\u01c6\u00e4\2\u060b\u060d"+
		"\5\u02ec\u0177\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u00c3\3"+
		"\2\2\2\u060e\u0611\7\20\2\2\u060f\u0611\5\u00c6d\2\u0610\u060e\3\2\2\2"+
		"\u0610\u060f\3\2\2\2\u0611\u00c5\3\2\2\2\u0612\u0617\5\u00c8e\2\u0613"+
		"\u0614\7\21\2\2\u0614\u0616\5\u00c8e\2\u0615\u0613\3\2\2\2\u0616\u0619"+
		"\3\2\2\2\u0617\u0615\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u00c7\3\2\2\2\u0619"+
		"\u0617\3\2\2\2\u061a\u0620\5\u00caf\2\u061b\u061c\5\u02bc\u015f\2\u061c"+
		"\u061d\7\22\2\2\u061d\u061e\7\20\2\2\u061e\u0620\3\2\2\2\u061f\u061a\3"+
		"\2\2\2\u061f\u061b\3\2\2\2\u0620\u00c9\3\2\2\2\u0621\u0623\5\u0208\u0105"+
		"\2\u0622\u0624\5\u02e4\u0173\2\u0623\u0622\3\2\2\2\u0623\u0624\3\2\2\2"+
		"\u0624\u00cb\3\2\2\2\u0625\u062a\5\u00bc_\2\u0626\u0627\7\21\2\2\u0627"+
		"\u0629\5\u00bc_\2\u0628\u0626\3\2\2\2\u0629\u062c\3\2\2\2\u062a\u0628"+
		"\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u00cd\3\2\2\2\u062c\u062a\3\2\2\2\u062d"+
		"\u062f\5\u00d0i\2\u062e\u0630\5\u00eav\2\u062f\u062e\3\2\2\2\u062f\u0630"+
		"\3\2\2\2\u0630\u0632\3\2\2\2\u0631\u0633\5\u02e6\u0174\2\u0632\u0631\3"+
		"\2\2\2\u0632\u0633\3\2\2\2\u0633\u0635\3\2\2\2\u0634\u0636\5\u00ecw\2"+
		"\u0635\u0634\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u00cf\3\2\2\2\u0637\u0638"+
		"\7\u00a2\2\2\u0638\u063d\5\u00d2j\2\u0639\u063a\7\21\2\2\u063a\u063c\5"+
		"\u00d2j\2\u063b\u0639\3\2\2\2\u063c\u063f\3\2\2\2\u063d\u063b\3\2\2\2"+
		"\u063d\u063e\3\2\2\2\u063e\u00d1\3\2\2\2\u063f\u063d\3\2\2\2\u0640\u0643"+
		"\5\u00d4k\2\u0641\u0643\5\u00d6l\2\u0642\u0640\3\2\2\2\u0642\u0641\3\2"+
		"\2\2\u0643\u00d3\3\2\2\2\u0644\u0646\5\u02bc\u015f\2\u0645\u0647\5\u00d8"+
		"m\2\u0646\u0645\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u064c\3\2\2\2\u0648"+
		"\u0649\5\u00dco\2\u0649\u064a\5\u00d8m\2\u064a\u064c\3\2\2\2\u064b\u0644"+
		"\3\2\2\2\u064b\u0648\3\2\2\2\u064c\u00d5\3\2\2\2\u064d\u064e\bl\1\2\u064e"+
		"\u064f\7\16\2\2\u064f\u0650\5\u00d6l\2\u0650\u0651\7\17\2\2\u0651\u0654"+
		"\3\2\2\2\u0652\u0654\5\u00d4k\2\u0653\u064d\3\2\2\2\u0653\u0652\3\2\2"+
		"\2\u0654\u0667\3\2\2\2\u0655\u0656\f\6\2\2\u0656\u0657\7i\2\2\u0657\u0658"+
		"\7\u00c3\2\2\u0658\u0666\5\u00d6l\7\u0659\u065b\f\5\2\2\u065a\u065c\7"+
		"\u00e0\2\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u065e\3\2\2\2"+
		"\u065d\u065f\5\u00dep\2\u065e\u065d\3\2\2\2\u065e\u065f\3\2\2\2\u065f"+
		"\u0660\3\2\2\2\u0660\u0661\7\u00c3\2\2\u0661\u0663\5\u00d6l\2\u0662\u0664"+
		"\5\u00e2r\2\u0663\u0662\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0666\3\2\2"+
		"\2\u0665\u0655\3\2\2\2\u0665\u0659\3\2\2\2\u0666\u0669\3\2\2\2\u0667\u0665"+
		"\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u00d7\3\2\2\2\u0669\u0667\3\2\2\2\u066a"+
		"\u066c\7-\2\2\u066b\u066a\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066d\3\2"+
		"\2\2\u066d\u0672\5\u0392\u01ca\2\u066e\u066f\7\16\2\2\u066f\u0670\5\u00da"+
		"n\2\u0670\u0671\7\17\2\2\u0671\u0673\3\2\2\2\u0672\u066e\3\2\2\2\u0672"+
		"\u0673\3\2\2\2\u0673\u00d9\3\2\2\2\u0674\u0675\5\u031c\u018f\2\u0675\u00db"+
		"\3\2\2\2\u0676\u0677\5\u01fa\u00fe\2\u0677\u00dd\3\2\2\2\u0678\u067f\7"+
		"\u00b4\2\2\u0679\u067b\5\u00e0q\2\u067a\u067c\7\u00f3\2\2\u067b\u067a"+
		"\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067f\3\2\2\2\u067d\u067f\7\u0140\2"+
		"\2\u067e\u0678\3\2\2\2\u067e\u0679\3\2\2\2\u067e\u067d\3\2\2\2\u067f\u00df"+
		"\3\2\2\2\u0680\u0681\t\b\2\2\u0681\u00e1\3\2\2\2\u0682\u0685\5\u00e4s"+
		"\2\u0683\u0685\5\u00e6t\2\u0684\u0682\3\2\2\2\u0684\u0683\3\2\2\2\u0685"+
		"\u00e3\3\2\2\2\u0686\u0687\7\u00ed\2\2\u0687\u0688\5\u01de\u00f0\2\u0688"+
		"\u00e5\3\2\2\2\u0689\u068a\7\u0148\2\2\u068a\u068b\7\16\2\2\u068b\u068c"+
		"\5\u00e8u\2\u068c\u068d\7\17\2\2\u068d\u00e7\3\2\2\2\u068e\u068f\5\u031c"+
		"\u018f\2\u068f\u00e9\3\2\2\2\u0690\u0691\7\u0151\2\2\u0691\u0692\5\u01de"+
		"\u00f0\2\u0692\u00eb\3\2\2\2\u0693\u0694\7\u00ab\2\2\u0694\u0695\5\u01de"+
		"\u00f0\2\u0695\u00ed\3\2\2\2\u0696\u069c\5\u00f0y\2\u0697\u069c\5\u00f2"+
		"z\2\u0698\u069c\5\u00f4{\2\u0699\u069c\5\u00fa~\2\u069a\u069c\5\u0104"+
		"\u0083\2\u069b\u0696\3\2\2\2\u069b\u0697\3\2\2\2\u069b\u0698\3\2\2\2\u069b"+
		"\u0699\3\2\2\2\u069b\u069a\3\2\2\2\u069c\u00ef\3\2\2\2\u069d\u069e\7}"+
		"\2\2\u069e\u069f\7\u00a2\2\2\u069f\u06a0\5\u02bc\u015f\2\u06a0\u06a1\7"+
		"\u0151\2\2\u06a1\u06a2\7j\2\2\u06a2\u06a3\7\u00eb\2\2\u06a3\u06a4\5\u0390"+
		"\u01c9\2\u06a4\u00f1\3\2\2\2\u06a5\u06a6\7}\2\2\u06a6\u06a7\7\u00a2\2"+
		"\2\u06a7\u06aa\5\u02bc\u015f\2\u06a8\u06a9\7\u0151\2\2\u06a9\u06ab\5\u01de"+
		"\u00f0\2\u06aa\u06a8\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u00f3\3\2\2\2\u06ac"+
		"\u06ad\7\u00b7\2\2\u06ad\u06ae\7\u00bf\2\2\u06ae\u06af\5\u02bc\u015f\2"+
		"\u06af\u06b0\5\u00f6|\2\u06b0\u00f5\3\2\2\2\u06b1\u06b2\7\16\2\2\u06b2"+
		"\u06b3\5\u00f8}\2\u06b3\u06b4\7\17\2\2\u06b4\u06b6\3\2\2\2\u06b5\u06b1"+
		"\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06bb\5\u01b4\u00db"+
		"\2\u06b8\u06b9\7z\2\2\u06b9\u06bb\7\u014a\2\2\u06ba\u06b5\3\2\2\2\u06ba"+
		"\u06b8\3\2\2\2\u06bb\u00f7\3\2\2\2\u06bc\u06bd\5\u031c\u018f\2\u06bd\u00f9"+
		"\3\2\2\2\u06be\u06bf\7\u0144\2\2\u06bf\u06c0\5\u02bc\u015f\2\u06c0\u06c1"+
		"\7\u011c\2\2\u06c1\u06c2\5\u00fc\177\2\u06c2\u06c3\7\u0151\2\2\u06c3\u06c4"+
		"\7j\2\2\u06c4\u06c5\7\u00eb\2\2\u06c5\u06c6\5\u0390\u01c9\2\u06c6\u00fb"+
		"\3\2\2\2\u06c7\u06cc\5\u00fe\u0080\2\u06c8\u06c9\7\21\2\2\u06c9\u06cb"+
		"\5\u00fe\u0080\2\u06ca\u06c8\3\2\2\2\u06cb\u06ce\3\2\2\2\u06cc\u06ca\3"+
		"\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u00fd\3\2\2\2\u06ce\u06cc\3\2\2\2\u06cf"+
		"\u06d0\5\u0100\u0081\2\u06d0\u06d1\7\30\2\2\u06d1\u06d2\5\u0102\u0082"+
		"\2\u06d2\u00ff\3\2\2\2\u06d3\u06d4\5\u031a\u018e\2\u06d4\u0101\3\2\2\2"+
		"\u06d5\u06d9\5\u0208\u0105\2\u06d6\u06d9\5\u0378\u01bd\2\u06d7\u06d9\7"+
		"z\2\2\u06d8\u06d5\3\2\2\2\u06d8\u06d6\3\2\2\2\u06d8\u06d7\3\2\2\2\u06d9"+
		"\u0103\3\2\2\2\u06da\u06db\7\u0144\2\2\u06db\u06dc\5\u02bc\u015f\2\u06dc"+
		"\u06dd\7\u011c\2\2\u06dd\u06e0\5\u00fc\177\2\u06de\u06df\7\u0151\2\2\u06df"+
		"\u06e1\5\u01de\u00f0\2\u06e0\u06de\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u0105"+
		"\3\2\2\2\u06e2\u06e6\5\u0116\u008c\2\u06e3\u06e6\5\u011a\u008e\2\u06e4"+
		"\u06e6\5\u011c\u008f\2\u06e5\u06e2\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e5\u06e4"+
		"\3\2\2\2\u06e6\u0107\3\2\2\2\u06e7\u06e8\7\u011c\2\2\u06e8\u06e9\7\u0139"+
		"\2\2\u06e9\u06ee\5\u010a\u0086\2\u06ea\u06eb\7\21\2\2\u06eb\u06ed\5\u010a"+
		"\u0086\2\u06ec\u06ea\3\2\2\2\u06ed\u06f0\3\2\2\2\u06ee\u06ec\3\2\2\2\u06ee"+
		"\u06ef\3\2\2\2\u06ef\u0109\3\2\2\2\u06f0\u06ee\3\2\2\2\u06f1\u06f5\5\u010c"+
		"\u0087\2\u06f2\u06f5\5\u0110\u0089\2\u06f3\u06f5\5\u0112\u008a\2\u06f4"+
		"\u06f1\3\2\2\2\u06f4\u06f2\3\2\2\2\u06f4\u06f3\3\2\2\2\u06f5\u010b\3\2"+
		"\2\2\u06f6\u06f7\7\u00c2\2\2\u06f7\u06f8\7\u00ca\2\2\u06f8\u06f9\5\u010e"+
		"\u0088\2\u06f9\u010d\3\2\2\2\u06fa\u06fb\7\u0103\2\2\u06fb\u0700\t\t\2"+
		"\2\u06fc\u06fd\7\u0107\2\2\u06fd\u0700\7\u0103\2\2\u06fe\u0700\7\u0118"+
		"\2\2\u06ff\u06fa\3\2\2\2\u06ff\u06fc\3\2\2\2\u06ff\u06fe\3\2\2\2\u0700"+
		"\u010f\3\2\2\2\u0701\u0702\7\u0103\2\2\u0702\u0703\t\n\2\2\u0703\u0111"+
		"\3\2\2\2\u0704\u0705\7\u0081\2\2\u0705\u0706\7\u011e\2\2\u0706\u0707\5"+
		"\u0114\u008b\2\u0707\u0113\3\2\2\2\u0708\u0709\5\u00b8]\2\u0709\u0115"+
		"\3\2\2\2\u070a\u070b\7\u011c\2\2\u070b\u070c\7^\2\2\u070c\u070d\5\u0118"+
		"\u008d\2\u070d\u070e\t\13\2\2\u070e\u0117\3\2\2\2\u070f\u0719\7\'\2\2"+
		"\u0710\u0715\5\u02c0\u0161\2\u0711\u0712\7\21\2\2\u0712\u0714\5\u02c0"+
		"\u0161\2\u0713\u0711\3\2\2\2\u0714\u0717\3\2\2\2\u0715\u0713\3\2\2\2\u0715"+
		"\u0716\3\2\2\2\u0716\u0719\3\2\2\2\u0717\u0715\3\2\2\2\u0718\u070f\3\2"+
		"\2\2\u0718\u0710\3\2\2\2\u0719\u0119\3\2\2\2\u071a\u071c\7W\2\2\u071b"+
		"\u071d\7\u0153\2\2\u071c\u071b\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u011b"+
		"\3\2\2\2\u071e\u0720\7\u010e\2\2\u071f\u0721\7\u0153\2\2\u0720\u071f\3"+
		"\2\2\2\u0720\u0721\3\2\2\2\u0721\u011d\3\2\2\2\u0722\u0726\5\u0120\u0091"+
		"\2\u0723\u0726\5\u012a\u0096\2\u0724\u0726\5\u012e\u0098\2\u0725\u0722"+
		"\3\2\2\2\u0725\u0723\3\2\2\2\u0725\u0724\3\2\2\2\u0726\u011f\3\2\2\2\u0727"+
		"\u0728\7Z\2\2\u0728\u0729\7\u0137\2\2\u0729\u072a\5\u0122\u0092\2\u072a"+
		"\u0121\3\2\2\2\u072b\u072e\5\u0124\u0093\2\u072c\u072d\7-\2\2\u072d\u072f"+
		"\5\u0126\u0094\2\u072e\u072c\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0732\3"+
		"\2\2\2\u0730\u0731\7\u0147\2\2\u0731\u0733\5\u0128\u0095\2\u0732\u0730"+
		"\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0736\3\2\2\2\u0734\u0736\7z\2\2\u0735"+
		"\u072b\3\2\2\2\u0735\u0734\3\2\2\2\u0736\u0123\3\2\2\2\u0737\u0738\5\u00b8"+
		"]\2\u0738\u0125\3\2\2\2\u0739\u073a\5\u00b8]\2\u073a\u0127\3\2\2\2\u073b"+
		"\u073c\5\u00b8]\2\u073c\u0129\3\2\2\2\u073d\u073e\7\u011c\2\2\u073e\u073f"+
		"\7[\2\2\u073f\u0740\5\u012c\u0097\2\u0740\u012b\3\2\2\2\u0741\u0744\7"+
		"z\2\2\u0742\u0744\5\u0126\u0094\2\u0743\u0741\3\2\2\2\u0743\u0742\3\2"+
		"\2\2\u0744\u012d\3\2\2\2\u0745\u0746\7\u0082\2\2\u0746\u0747\5\u0130\u0099"+
		"\2\u0747\u012f\3\2\2\2\u0748\u074c\5\u012c\u0097\2\u0749\u074c\7\'\2\2"+
		"\u074a\u074c\7j\2\2\u074b\u0748\3\2\2\2\u074b\u0749\3\2\2\2\u074b\u074a"+
		"\3\2\2\2\u074c\u0131\3\2\2\2\u074d\u0753\5\u0134\u009b\2\u074e\u0753\5"+
		"\u0138\u009d\2\u074f\u0753\5\u013a\u009e\2\u0750\u0753\5\u013c\u009f\2"+
		"\u0751\u0753\5\u013e\u00a0\2\u0752\u074d\3\2\2\2\u0752\u074e\3\2\2\2\u0752"+
		"\u074f\3\2\2\2\u0752\u0750\3\2\2\2\u0752\u0751\3\2\2\2\u0753\u0133\3\2"+
		"\2\2\u0754\u0755\7\u011c\2\2\u0755\u0756\7@\2\2\u0756\u0757\5\u0136\u009c"+
		"\2\u0757\u0135\3\2\2\2\u0758\u075b\5\u02fc\u017f\2\u0759\u075b\5\u0344"+
		"\u01a3\2\u075a\u0758\3\2\2\2\u075a\u0759\3\2\2\2\u075b\u0137\3\2\2\2\u075c"+
		"\u075d\7\u011c\2\2\u075d\u075e\7\u0112\2\2\u075e\u075f\5\u0136\u009c\2"+
		"\u075f\u0139\3\2\2\2\u0760\u0761\7\u011c\2\2\u0761\u0762\7\u00de\2\2\u0762"+
		"\u0763\5\u0136\u009c\2\u0763\u013b\3\2\2\2\u0764\u0765\7\u011c\2\2\u0765"+
		"\u0766\7\u011a\2\2\u0766\u0767\7\61\2\2\u0767\u0768\5\u0136\u009c\2\u0768"+
		"\u013d\3\2\2\2\u0769\u076a\7\u011c\2\2\u076a\u076b\7\u0133\2\2\u076b\u076c"+
		"\7\u0157\2\2\u076c\u076d\5\u0140\u00a1\2\u076d\u013f\3\2\2\2\u076e\u0771"+
		"\5\u0222\u0112\2\u076f\u0771\7\u00cc\2\2\u0770\u076e\3\2\2\2\u0770\u076f"+
		"\3\2\2\2\u0771\u0141\3\2\2\2\u0772\u077a\5\u0144\u00a3\2\u0773\u077a\5"+
		"\u016c\u00b7\2\u0774\u077a\5\u0174\u00bb\2\u0775\u077a\5\u0176\u00bc\2"+
		"\u0776\u077a\5\u017e\u00c0\2\u0777\u077a\5\u018a\u00c6\2\u0778\u077a\5"+
		"\u018c\u00c7\2\u0779\u0772\3\2\2\2\u0779\u0773\3\2\2\2\u0779\u0774\3\2"+
		"\2\2\u0779\u0775\3\2\2\2\u0779\u0776\3\2\2\2\u0779\u0777\3\2\2\2\u0779"+
		"\u0778\3\2\2\2\u077a\u0143\3\2\2\2\u077b\u0780\5\u0146\u00a4\2\u077c\u0780"+
		"\5\u014e\u00a8\2\u077d\u0780\5\u0150\u00a9\2\u077e\u0780\5\u0160\u00b1"+
		"\2\u077f\u077b\3\2\2\2\u077f\u077c\3\2\2\2\u077f\u077d\3\2\2\2\u077f\u077e"+
		"\3\2\2\2\u0780\u0145\3\2\2\2\u0781\u0782\7(\2\2\u0782\u0783\7\u0080\2"+
		"\2\u0783\u0787\5\u0148\u00a5\2\u0784\u0785\7\u0152\2\2\u0785\u0786\7\u00d2"+
		"\2\2\u0786\u0788\5\u014c\u00a7\2\u0787\u0784\3\2\2\2\u0787\u0788\3\2\2"+
		"\2\u0788\u0147\3\2\2\2\u0789\u078a\5\u014a\u00a6\2\u078a\u078b\5\u00b8"+
		"]\2\u078b\u0149\3\2\2\2\u078c\u078d\t\2\2\2\u078d\u014b\3\2\2\2\u078e"+
		"\u078f\5\u00b8]\2\u078f\u014d\3\2\2\2\u0790\u0791\7v\2\2\u0791\u0792\7"+
		"\u0080\2\2\u0792\u0793\5\u0148\u00a5\2\u0793\u014f\3\2\2\2\u0794\u0795"+
		"\7\u011c\2\2\u0795\u0796\7\u0080\2\2\u0796\u0797\5\u0148\u00a5\2\u0797"+
		"\u0798\5\u0152\u00aa\2\u0798\u0151\3\2\2\2\u0799\u07a5\5\u0154\u00ab\2"+
		"\u079a\u079b\7\u0149\2\2\u079b\u079c\5\u0158\u00ad\2\u079c\u07a1\5\u015a"+
		"\u00ae\2\u079d\u079e\7\21\2\2\u079e\u07a0\5\u015a\u00ae\2\u079f\u079d"+
		"\3\2\2\2\u07a0\u07a3\3\2\2\2\u07a1\u079f\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2"+
		"\u07a5\3\2\2\2\u07a3\u07a1\3\2\2\2\u07a4\u0799\3\2\2\2\u07a4\u079a\3\2"+
		"\2\2\u07a5\u0153\3\2\2\2\u07a6\u07a7\7g\2\2\u07a7\u07a8\7\30\2\2\u07a8"+
		"\u07a9\5\u0156\u00ac\2\u07a9\u0155\3\2\2\2\u07aa\u07ab\5\u00b8]\2\u07ab"+
		"\u0157\3\2\2\2\u07ac\u07ad\5\u00b8]\2\u07ad\u0159\3\2\2\2\u07ae\u07af"+
		"\5\u015c\u00af\2\u07af\u07b0\7\30\2\2\u07b0\u07b1\5\u015e\u00b0\2\u07b1"+
		"\u015b\3\2\2\2\u07b2\u07d0\7\u013e\2\2\u07b3\u07d0\7\u00c9\2\2\u07b4\u07d0"+
		"\7\u00ea\2\2\u07b5\u07d0\7\u0109\2\2\u07b6\u07d0\7\u010a\2\2\u07b7\u07d0"+
		"\7\u00fb\2\2\u07b8\u07d0\7\u0111\2\2\u07b9\u07d0\7s\2\2\u07ba\u07d0\7"+
		"t\2\2\u07bb\u07d0\7\u00e6\2\2\u07bc\u07d0\7\u00b1\2\2\u07bd\u07d0\7q\2"+
		"\2\u07be\u07d0\7\u00dd\2\2\u07bf\u07d0\7\u0143\2\2\u07c0\u07c1\7P\2\2"+
		"\u07c1\u07d0\7@\2\2\u07c2\u07c3\7P\2\2\u07c3\u07d0\7\u0112\2\2\u07c4\u07c5"+
		"\7P\2\2\u07c5\u07d0\7\u00dd\2\2\u07c6\u07c7\7D\2\2\u07c7\u07c8\7\u011c"+
		"\2\2\u07c8\u07d0\7@\2\2\u07c9\u07ca\7D\2\2\u07ca\u07cb\7\u011c\2\2\u07cb"+
		"\u07d0\7\u0112\2\2\u07cc\u07cd\7D\2\2\u07cd\u07ce\7\u011c\2\2\u07ce\u07d0"+
		"\7\u00dd\2\2\u07cf\u07b2\3\2\2\2\u07cf\u07b3\3\2\2\2\u07cf\u07b4\3\2\2"+
		"\2\u07cf\u07b5\3\2\2\2\u07cf\u07b6\3\2\2\2\u07cf\u07b7\3\2\2\2\u07cf\u07b8"+
		"\3\2\2\2\u07cf\u07b9\3\2\2\2\u07cf\u07ba\3\2\2\2\u07cf\u07bb\3\2\2\2\u07cf"+
		"\u07bc\3\2\2\2\u07cf\u07bd\3\2\2\2\u07cf\u07be\3\2\2\2\u07cf\u07bf\3\2"+
		"\2\2\u07cf\u07c0\3\2\2\2\u07cf\u07c2\3\2\2\2\u07cf\u07c4\3\2\2\2\u07cf"+
		"\u07c6\3\2\2\2\u07cf\u07c9\3\2\2\2\u07cf\u07cc\3\2\2\2\u07d0\u015d\3\2"+
		"\2\2\u07d1\u07d2\5\u00b8]\2\u07d2\u015f\3\2\2\2\u07d3\u07d4\7\u00a4\2"+
		"\2\u07d4\u07d5\7\u0080\2\2\u07d5\u07d6\5\u0148\u00a5\2\u07d6\u07d7\5\u0162"+
		"\u00b2\2\u07d7\u0161\3\2\2\2\u07d8\u07e4\5\u0164\u00b3\2\u07d9\u07da\7"+
		"\u0149\2\2\u07da\u07db\5\u0158\u00ad\2\u07db\u07e0\5\u0168\u00b5\2\u07dc"+
		"\u07dd\7\21\2\2\u07dd\u07df\5\u0168\u00b5\2\u07de\u07dc\3\2\2\2\u07df"+
		"\u07e2\3\2\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e4\3\2"+
		"\2\2\u07e2\u07e0\3\2\2\2\u07e3\u07d8\3\2\2\2\u07e3\u07d9\3\2\2\2\u07e4"+
		"\u0163\3\2\2\2\u07e5\u07e6\5\u0166\u00b4\2\u07e6\u07e7\7\30\2\2\u07e7"+
		"\u07e8\7g\2\2\u07e8\u0165\3\2\2\2\u07e9\u07ea\5\u0364\u01b3\2\u07ea\u0167"+
		"\3\2\2\2\u07eb\u07ec\5\u016a\u00b6\2\u07ec\u07ed\7\30\2\2\u07ed\u07ee"+
		"\5\u015c\u00af\2\u07ee\u0169\3\2\2\2\u07ef\u07f0\5\u0364\u01b3\2\u07f0"+
		"\u016b\3\2\2\2\u07f1\u07f2\7\u00fc\2\2\u07f2\u07f3\5\u016e\u00b8\2\u07f3"+
		"\u07f4\7\u00a2\2\2\u07f4\u07f5\5\u0172\u00ba\2\u07f5\u016d\3\2\2\2\u07f6"+
		"\u07f9\5\u0394\u01cb\2\u07f7\u07f9\5\u0170\u00b9\2\u07f8\u07f6\3\2\2\2"+
		"\u07f8\u07f7\3\2\2\2\u07f9\u016f\3\2\2\2\u07fa\u07fc\5\u014a\u00a6\2\u07fb"+
		"\u07fa\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07fe\5\u00b8"+
		"]\2\u07fe\u0171\3\2\2\2\u07ff\u0800\5\u00b8]\2\u0800\u0173\3\2\2\2\u0801"+
		"\u0802\7v\2\2\u0802\u0803\7\u00fc\2\2\u0803\u0804\5\u016e\u00b8\2\u0804"+
		"\u0175\3\2\2\2\u0805\u0808\5\u0178\u00bd\2\u0806\u0808\5\u017c\u00bf\2"+
		"\u0807\u0805\3\2\2\2\u0807\u0806\3\2\2\2\u0808\u0177\3\2\2\2\u0809\u080a"+
		"\7\177\2\2\u080a\u080b\7\u00b5\2\2\u080b\u080c\5\u016e\u00b8\2\u080c\u080d"+
		"\5\u017a\u00be\2\u080d\u0179\3\2\2\2\u080e\u080f\t\f\2\2\u080f\u0810\7"+
		"\u0122\2\2\u0810\u0811\7\u0080\2\2\u0811\u0812\5\u0148\u00a5\2\u0812\u017b"+
		"\3\2\2\2\u0813\u0814\7\177\2\2\u0814\u0815\7\u00f4\2\2\u0815\u0816\5\u016e"+
		"\u00b8\2\u0816\u0817\5\u017a\u00be\2\u0817\u017d\3\2\2\2\u0818\u0819\7"+
		"\u0094\2\2\u0819\u081b\5\u016e\u00b8\2\u081a\u081c\5\u0180\u00c1\2\u081b"+
		"\u081a\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081e\3\2\2\2\u081d\u081f\5\u0182"+
		"\u00c2\2\u081e\u081d\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u017f\3\2\2\2\u0820"+
		"\u0821\5\u0184\u00c3\2\u0821\u0181\3\2\2\2\u0822\u0823\5\u0184\u00c3\2"+
		"\u0823\u0183\3\2\2\2\u0824\u0827\5\u0186\u00c4\2\u0825\u0827\5\u017a\u00be"+
		"\2\u0826\u0824\3\2\2\2\u0826\u0825\3\2\2\2\u0827\u0185\3\2\2\2\u0828\u0829"+
		"\t\f\2\2\u0829\u082e\5\u0188\u00c5\2\u082a\u082b\7\21\2\2\u082b\u082d"+
		"\5\u0188\u00c5\2\u082c\u082a\3\2\2\2\u082d\u0830\3\2\2\2\u082e\u082c\3"+
		"\2\2\2\u082e\u082f\3\2\2\2\u082f\u0187\3\2\2\2\u0830\u082e\3\2\2\2\u0831"+
		"\u0832\5\u00bc_\2\u0832\u0189\3\2\2\2\u0833\u0834\7\u0094\2\2\u0834\u0835"+
		"\7\u00af\2\2\u0835\u0836\5\u0172\u00ba\2\u0836\u018b\3\2\2\2\u0837\u083e"+
		"\5\u018e\u00c8\2\u0838\u083e\5\u0192\u00ca\2\u0839\u083e\5\u0196\u00cc"+
		"\2\u083a\u083e\5\u0198\u00cd\2\u083b\u083e\5\u019a\u00ce\2\u083c\u083e"+
		"\5\u019c\u00cf\2\u083d\u0837\3\2\2\2\u083d\u0838\3\2\2\2\u083d\u0839\3"+
		"\2\2\2\u083d\u083a\3\2\2\2\u083d\u083b\3\2\2\2\u083d\u083c\3\2\2\2\u083e"+
		"\u018d\3\2\2\2\u083f\u0840\7(\2\2\u0840\u0842\5\u0190\u00c9\2\u0841\u0843"+
		"\7\u00b6\2\2\u0842\u0841\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u0845\3\2\2"+
		"\2\u0844\u0846\7\u0114\2\2\u0845\u0844\3\2\2\2\u0845\u0846\3\2\2\2\u0846"+
		"\u0847\3\2\2\2\u0847\u0848\7o\2\2\u0848\u0849\7\u009e\2\2\u0849\u084a"+
		"\5\u0170\u00b9\2\u084a\u018f\3\2\2\2\u084b\u084d\5\u014a\u00a6\2\u084c"+
		"\u084b\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u084e\3\2\2\2\u084e\u084f\5\u00b8"+
		"]\2\u084f\u0191\3\2\2\2\u0850\u0851\7\u00ef\2\2\u0851\u0853\5\u0194\u00cb"+
		"\2\u0852\u0854\5\u0184\u00c3\2\u0853\u0852\3\2\2\2\u0853\u0854\3\2\2\2"+
		"\u0854\u0193\3\2\2\2\u0855\u0858\5\u0390\u01c9\2\u0856\u0858\5\u0190\u00c9"+
		"\2\u0857\u0855\3\2\2\2\u0857\u0856\3\2\2\2\u0858\u0195\3\2\2\2\u0859\u085a"+
		"\7L\2\2\u085a\u085b\5\u0194\u00cb\2\u085b\u0197\3\2\2\2\u085c\u0861\7"+
		"\u009a\2\2\u085d\u085f\5\u00b6\\\2\u085e\u085d\3\2\2\2\u085e\u085f\3\2"+
		"\2\2\u085f\u0860\3\2\2\2\u0860\u0862\7\u00a2\2\2\u0861\u085e\3\2\2\2\u0861"+
		"\u0862\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0864\5\u0194\u00cb\2\u0864\u0199"+
		"\3\2\2\2\u0865\u0866\7}\2\2\u0866\u0867\7\u00a2\2\2\u0867\u0868\5\u02bc"+
		"\u015f\2\u0868\u0869\7\u0151\2\2\u0869\u086a\7j\2\2\u086a\u086b\7\u00eb"+
		"\2\2\u086b\u086c\5\u0194\u00cb\2\u086c\u019b\3\2\2\2\u086d\u086e\7\u0144"+
		"\2\2\u086e\u086f\5\u02bc\u015f\2\u086f\u0870\7\u011c\2\2\u0870\u0875\5"+
		"\u00fe\u0080\2\u0871\u0872\7\21\2\2\u0872\u0874\5\u00fe\u0080\2\u0873"+
		"\u0871\3\2\2\2\u0874\u0877\3\2\2\2\u0875\u0873\3\2\2\2\u0875\u0876\3\2"+
		"\2\2\u0876\u0878\3\2\2\2\u0877\u0875\3\2\2\2\u0878\u0879\7\u0151\2\2\u0879"+
		"\u087a\7j\2\2\u087a\u087b\7\u00eb\2\2\u087b\u087c\5\u0194\u00cb\2\u087c"+
		"\u019d\3\2\2\2\u087d\u087e\5\u01a0\u00d1\2\u087e\u019f\3\2\2\2\u087f\u0880"+
		"\7\u00a4\2\2\u0880\u0881\7\u0081\2\2\u0881\u0882\5\u01a2\u00d2\2\u0882"+
		"\u01a1\3\2\2\2\u0883\u0886\5\u01a4\u00d3\2\u0884\u0886\5\u01aa\u00d6\2"+
		"\u0885\u0883\3\2\2\2\u0885\u0884\3\2\2\2\u0886\u01a3\3\2\2\2\u0887\u088c"+
		"\5\u01a6\u00d4\2\u0888\u0889\7\21\2\2\u0889\u088b\5\u01a6\u00d4\2\u088a"+
		"\u0888\3\2\2\2\u088b\u088e\3\2\2\2\u088c\u088a\3\2\2\2\u088c\u088d\3\2"+
		"\2\2\u088d\u01a5\3\2\2\2\u088e\u088c\3\2\2\2\u088f\u0890\5\u0364\u01b3"+
		"\2\u0890\u0891\7\30\2\2\u0891\u0892\5\u01a8\u00d5\2\u0892\u01a7\3\2\2"+
		"\2\u0893\u0894\t\r\2\2\u0894\u01a9\3\2\2\2\u0895\u0896\7\u0092\2\2\u0896"+
		"\u0897\5\u01ac\u00d7\2\u0897\u089c\5\u01ae\u00d8\2\u0898\u0899\7\21\2"+
		"\2\u0899\u089b\5\u01ae\u00d8\2\u089a\u0898\3\2\2\2\u089b\u089e\3\2\2\2"+
		"\u089c\u089a\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u01ab\3\2\2\2\u089e\u089c"+
		"\3\2\2\2\u089f\u08a0\5\u00b8]\2\u08a0\u01ad\3\2\2\2\u08a1\u08a2\5\u0364"+
		"\u01b3\2\u08a2\u08a3\7\30\2\2\u08a3\u08a4\5\u01b0\u00d9\2\u08a4\u01af"+
		"\3\2\2\2\u08a5\u08a6\t\16\2\2\u08a6\u01b1\3\2\2\2\u08a7\u08a8\7\16\2\2"+
		"\u08a8\u08a9\5\u01b4\u00db\2\u08a9\u08aa\7\17\2\2\u08aa\u01b3\3\2\2\2"+
		"\u08ab\u08ae\5\u01b6\u00dc\2\u08ac\u08ae\5\u00d6l\2\u08ad\u08ab\3\2\2"+
		"\2\u08ad\u08ac\3\2\2\2\u08ae\u01b5\3\2\2\2\u08af\u08b0\b\u00dc\1\2\u08b0"+
		"\u08b1\7\16\2\2\u08b1\u08b2\5\u01b6\u00dc\2\u08b2\u08b3\7\17\2\2\u08b3"+
		"\u08be\3\2\2\2\u08b4\u08b5\5\u00d6l\2\u08b5\u08b6\5\u01b8\u00dd\2\u08b6"+
		"\u08b7\5\u01bc\u00df\2\u08b7\u08be\3\2\2\2\u08b8\u08b9\5\u01bc\u00df\2"+
		"\u08b9\u08ba\5\u01be\u00e0\2\u08ba\u08bb\5\u01ba\u00de\2\u08bb\u08be\3"+
		"\2\2\2\u08bc\u08be\5\u01c4\u00e3\2\u08bd\u08af\3\2\2\2\u08bd\u08b4\3\2"+
		"\2\2\u08bd\u08b8\3\2\2\2\u08bd\u08bc\3\2\2\2\u08be\u08c5\3\2\2\2\u08bf"+
		"\u08c0\f\6\2\2\u08c0\u08c1\5\u01b8\u00dd\2\u08c1\u08c2\5\u01bc\u00df\2"+
		"\u08c2\u08c4\3\2\2\2\u08c3\u08bf\3\2\2\2\u08c4\u08c7\3\2\2\2\u08c5\u08c3"+
		"\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u01b7\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c8"+
		"\u08ca\t\17\2\2\u08c9\u08cb\7\'\2\2\u08ca\u08c9\3\2\2\2\u08ca\u08cb\3"+
		"\2\2\2\u08cb\u08cd\3\2\2\2\u08cc\u08ce\5\u01c0\u00e1\2\u08cd\u08cc\3\2"+
		"\2\2\u08cd\u08ce\3\2\2\2\u08ce\u01b9\3\2\2\2\u08cf\u08d6\5\u01c4\u00e3"+
		"\2\u08d0\u08d6\5\u00d6l\2\u08d1\u08d2\7\16\2\2\u08d2\u08d3\5\u01b6\u00dc"+
		"\2\u08d3\u08d4\7\17\2\2\u08d4\u08d6\3\2\2\2\u08d5\u08cf\3\2\2\2\u08d5"+
		"\u08d0\3\2\2\2\u08d5\u08d1\3\2\2\2\u08d6\u01bb\3\2\2\2\u08d7\u08d8\b\u00df"+
		"\1\2\u08d8\u08db\5\u01c4\u00e3\2\u08d9\u08db\5\u00d6l\2\u08da\u08d7\3"+
		"\2\2\2\u08da\u08d9\3\2\2\2\u08db\u08e2\3\2\2\2\u08dc\u08dd\f\3\2\2\u08dd"+
		"\u08de\5\u01be\u00e0\2\u08de\u08df\5\u01ba\u00de\2\u08df\u08e1\3\2\2\2"+
		"\u08e0\u08dc\3\2\2\2\u08e1\u08e4\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e2\u08e3"+
		"\3\2\2\2\u08e3\u01bd\3\2\2\2\u08e4\u08e2\3\2\2\2\u08e5\u08e7\7\u00bd\2"+
		"\2\u08e6\u08e8\7\'\2\2\u08e7\u08e6\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08ea"+
		"\3\2\2\2\u08e9\u08eb\5\u01c0\u00e1\2\u08ea\u08e9\3\2\2\2\u08ea\u08eb\3"+
		"\2\2\2\u08eb\u01bf\3\2\2\2\u08ec\u08f2\7f\2\2\u08ed\u08ee\7:\2\2\u08ee"+
		"\u08ef\7\16\2\2\u08ef\u08f0\5\u01c2\u00e2\2\u08f0\u08f1\7\17\2\2\u08f1"+
		"\u08f3\3\2\2\2\u08f2\u08ed\3\2\2\2\u08f2\u08f3\3\2\2\2\u08f3\u01c1\3\2"+
		"\2\2\u08f4\u08f5\5\u031c\u018f\2\u08f5\u01c3\3\2\2\2\u08f6\u08fa\5\u01c6"+
		"\u00e4\2\u08f7\u08fa\5\u01c8\u00e5\2\u08f8\u08fa\5\u01cc\u00e7\2\u08f9"+
		"\u08f6\3\2\2\2\u08f9\u08f7\3\2\2\2\u08f9\u08f8\3\2\2\2\u08fa\u01c5\3\2"+
		"\2\2\u08fb\u08fd\7\u0117\2\2\u08fc\u08fe\5\u0380\u01c1\2\u08fd\u08fc\3"+
		"\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u08ff\3\2\2\2\u08ff\u0900\5\u00c4c\2"+
		"\u0900\u0901\5\u00ceh\2\u0901\u01c7\3\2\2\2\u0902\u0903\7\u014a\2\2\u0903"+
		"\u0904\5\u01ca\u00e6\2\u0904\u01c9\3\2\2\2\u0905\u0906\5\u0200\u0101\2"+
		"\u0906\u0907\7\21\2\2\u0907\u0908\5\u0200\u0101\2\u0908\u01cb\3\2\2\2"+
		"\u0909\u090a\7\u012f\2\2\u090a\u090b\5\u02bc\u015f\2\u090b\u01cd\3\2\2"+
		"\2\u090c\u090d\7\16\2\2\u090d\u0912\5\u01d0\u00e9\2\u090e\u090f\7\21\2"+
		"\2\u090f\u0911\5\u01d0\u00e9\2\u0910\u090e\3\2\2\2\u0911\u0914\3\2\2\2"+
		"\u0912\u0910\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0915\3\2\2\2\u0914\u0912"+
		"\3\2\2\2\u0915\u0916\7\17\2\2\u0916\u01cf\3\2\2\2\u0917\u0918\5\u01d2"+
		"\u00ea\2\u0918\u0919\5\u01da\u00ee\2\u0919\u01d1\3\2\2\2\u091a\u091d\5"+
		"\u031a\u018e\2\u091b\u091e\5\u031e\u0190\2\u091c\u091e\5\u039e\u01d0\2"+
		"\u091d\u091b\3\2\2\2\u091d\u091c\3\2\2\2\u091e\u0920\3\2\2\2\u091f\u0921"+
		"\5\u02f8\u017d\2\u0920\u091f\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0925\3"+
		"\2\2\2\u0922\u0924\5\u01d4\u00eb\2\u0923\u0922\3\2\2\2\u0924\u0927\3\2"+
		"\2\2\u0925\u0923\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0929\3\2\2\2\u0927"+
		"\u0925\3\2\2\2\u0928\u092a\5\u02e0\u0171\2\u0929\u0928\3\2\2\2\u0929\u092a"+
		"\3\2\2\2\u092a\u01d3\3\2\2\2\u092b\u092d\5\u02be\u0160\2\u092c\u092b\3"+
		"\2\2\2\u092c\u092d\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u0930\5\u01d6\u00ec"+
		"\2\u092f\u0931\5\u02d4\u016b\2\u0930\u092f\3\2\2\2\u0930\u0931\3\2\2\2"+
		"\u0931\u01d5\3\2\2\2\u0932\u0933\7\u00e4\2\2\u0933\u0938\7\u00e5\2\2\u0934"+
		"\u0938\5\u02c2\u0162\2\u0935\u0938\5\u02c4\u0163\2\u0936\u0938\5\u01d8"+
		"\u00ed\2\u0937\u0932\3\2\2\2\u0937\u0934\3\2\2\2\u0937\u0935\3\2\2\2\u0937"+
		"\u0936\3\2\2\2\u0938\u01d7\3\2\2\2\u0939\u093a\7J\2\2\u093a\u093b\7\16"+
		"\2\2\u093b\u093c\5\u01de\u00f0\2\u093c\u093d\7\17\2\2\u093d\u01d9\3\2"+
		"\2\2\u093e\u0940\5\u02be\u0160\2\u093f\u093e\3\2\2\2\u093f\u0940\3\2\2"+
		"\2\u0940\u0941\3\2\2\2\u0941\u0943\5\u01dc\u00ef\2\u0942\u0944\5\u02d6"+
		"\u016c\2\u0943\u0942\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u01db\3\2\2\2\u0945"+
		"\u0949\5\u02d8\u016d\2\u0946\u0949\5\u02dc\u016f\2\u0947\u0949\5\u01d8"+
		"\u00ed\2\u0948\u0945\3\2\2\2\u0948\u0946\3\2\2\2\u0948\u0947\3\2\2\2\u0949"+
		"\u01dd\3\2\2\2\u094a\u094b\b\u00f0\1\2\u094b\u094c\7\u00e4\2\2\u094c\u095a"+
		"\5\u01de\u00f0\6\u094d\u094e\7\16\2\2\u094e\u094f\5\u01de\u00f0\2\u094f"+
		"\u0950\7\17\2\2\u0950\u095a\3\2\2\2\u0951\u0957\5\u01e0\u00f1\2\u0952"+
		"\u0954\7\u00c0\2\2\u0953\u0955\7\u00e4\2\2\u0954\u0953\3\2\2\2\u0954\u0955"+
		"\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u0958\5\u0376\u01bc\2\u0957\u0952\3"+
		"\2\2\2\u0957\u0958\3\2\2\2\u0958\u095a\3\2\2\2\u0959\u094a\3\2\2\2\u0959"+
		"\u094d\3\2\2\2\u0959\u0951\3\2\2\2\u095a\u0963\3\2\2\2\u095b\u095c\f\5"+
		"\2\2\u095c\u095d\7*\2\2\u095d\u0962\5\u01de\u00f0\6\u095e\u095f\f\4\2"+
		"\2\u095f\u0960\7\u00f1\2\2\u0960\u0962\5\u01de\u00f0\5\u0961\u095b\3\2"+
		"\2\2\u0961\u095e\3\2\2\2\u0962\u0965\3\2\2\2\u0963\u0961\3\2\2\2\u0963"+
		"\u0964\3\2\2\2\u0964\u01df\3\2\2\2\u0965\u0963\3\2\2\2\u0966\u0970\5\u01e2"+
		"\u00f2\2\u0967\u0970\5\u01e4\u00f3\2\u0968\u0970\5\u01e6\u00f4\2\u0969"+
		"\u0970\5\u01ec\u00f7\2\u096a\u0970\5\u01f4\u00fb\2\u096b\u0970";
	private static final String _serializedATNSegment1 =
		"\5\u01f6\u00fc\2\u096c\u0970\5\u01f8\u00fd\2\u096d\u0970\5\u01fc\u00ff"+
		"\2\u096e\u0970\5\u01fe\u0100\2\u096f\u0966\3\2\2\2\u096f\u0967\3\2\2\2"+
		"\u096f\u0968\3\2\2\2\u096f\u0969\3\2\2\2\u096f\u096a\3\2\2\2\u096f\u096b"+
		"\3\2\2\2\u096f\u096c\3\2\2\2\u096f\u096d\3\2\2\2\u096f\u096e\3\2\2\2\u0970"+
		"\u01e1\3\2\2\2\u0971\u0972\5\u0200\u0101\2\u0972\u0973\5\u037c\u01bf\2"+
		"\u0973\u0974\5\u0200\u0101\2\u0974\u01e3\3\2\2\2\u0975\u0977\5\u0200\u0101"+
		"\2\u0976\u0978\7\u00e4\2\2\u0977\u0976\3\2\2\2\u0977\u0978\3\2\2\2\u0978"+
		"\u0979\3\2\2\2\u0979\u097a\7\66\2\2\u097a\u097b\5\u0200\u0101\2\u097b"+
		"\u097c\7*\2\2\u097c\u097d\5\u0200\u0101\2\u097d\u01e5\3\2\2\2\u097e\u0980"+
		"\5\u0200\u0101\2\u097f\u0981\7\u00e4\2\2\u0980\u097f\3\2\2\2\u0980\u0981"+
		"\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0983\7\u00b0\2\2\u0983\u0984\5\u01e8"+
		"\u00f5\2\u0984\u01e7\3\2\2\2\u0985\u098b\5\u01fa\u00fe\2\u0986\u0987\7"+
		"\16\2\2\u0987\u0988\5\u01ea\u00f6\2\u0988\u0989\7\17\2\2\u0989\u098b\3"+
		"\2\2\2\u098a\u0985\3\2\2\2\u098a\u0986\3\2\2\2\u098b\u01e9\3\2\2\2\u098c"+
		"\u0991\5\u0208\u0105\2\u098d\u098e\7\21\2\2\u098e\u0990\5\u0208\u0105"+
		"\2\u098f\u098d\3\2\2\2\u0990\u0993\3\2\2\2\u0991\u098f\3\2\2\2\u0991\u0992"+
		"\3\2\2\2\u0992\u01eb\3\2\2\2\u0993\u0991\3\2\2\2\u0994\u0996\5\u01ee\u00f8"+
		"\2\u0995\u0997\7\u00e4\2\2\u0996\u0995\3\2\2\2\u0996\u0997\3\2\2\2\u0997"+
		"\u0998\3\2\2\2\u0998\u0999\7\u00cb\2\2\u0999\u099c\5\u01f0\u00f9\2\u099a"+
		"\u099b\7\u0090\2\2\u099b\u099d\5\u01f2\u00fa\2\u099c\u099a\3\2\2\2\u099c"+
		"\u099d\3\2\2\2\u099d\u01ed\3\2\2\2\u099e\u099f\5\u025c\u012f\2\u099f\u01ef"+
		"\3\2\2\2\u09a0\u09a1\5\u025c\u012f\2\u09a1\u01f1\3\2\2\2\u09a2\u09a3\5"+
		"\u025c\u012f\2\u09a3\u01f3\3\2\2\2\u09a4\u09a6\7\u00c0\2\2\u09a5\u09a7"+
		"\7\u00e4\2\2\u09a6\u09a5\3\2\2\2\u09a6\u09a7\3\2\2\2\u09a7\u09a8\3\2\2"+
		"\2\u09a8\u09a9\7\u00e5\2\2\u09a9\u01f5\3\2\2\2\u09aa\u09ab\5\u0200\u0101"+
		"\2\u09ab\u09ac\5\u037c\u01bf\2\u09ac\u09ad\5\u0382\u01c2\2\u09ad\u09ae"+
		"\5\u01fa\u00fe\2\u09ae\u01f7\3\2\2\2\u09af\u09b0\7\u0095\2\2\u09b0\u09b1"+
		"\5\u01fa\u00fe\2\u09b1\u01f9\3\2\2\2\u09b2\u09b3\5\u01b2\u00da\2\u09b3"+
		"\u01fb\3\2\2\2\u09b4\u09b5\5\u0200\u0101\2\u09b5\u09b7\7\u00d1\2\2\u09b6"+
		"\u09b8\7\u0141\2\2\u09b7\u09b6\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u09ba"+
		"\3\2\2\2\u09b9\u09bb\t\20\2\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb\3\2\2\2"+
		"\u09bb\u09bc\3\2\2\2\u09bc\u09bd\5\u01fa\u00fe\2\u09bd\u01fd\3\2\2\2\u09be"+
		"\u09bf\5\u0200\u0101\2\u09bf\u09c0\7\u00f5\2\2\u09c0\u09c1\5\u0200\u0101"+
		"\2\u09c1\u01ff\3\2\2\2\u09c2\u09c9\5\u0202\u0102\2\u09c3\u09c4\7\16\2"+
		"\2\u09c4\u09c5\5\u0204\u0103\2\u09c5\u09c6\7\17\2\2\u09c6\u09c9\3\2\2"+
		"\2\u09c7\u09c9\5\u0206\u0104\2\u09c8\u09c2\3\2\2\2\u09c8\u09c3\3\2\2\2"+
		"\u09c8\u09c7\3\2\2\2\u09c9\u0201\3\2\2\2\u09ca\u09ce\5\u0208\u0105\2\u09cb"+
		"\u09ce\5\u0378\u01bd\2\u09cc\u09ce\5\u037a\u01be\2\u09cd\u09ca\3\2\2\2"+
		"\u09cd\u09cb\3\2\2\2\u09cd\u09cc\3\2\2\2\u09ce\u0203\3\2\2\2\u09cf\u09d4"+
		"\5\u0202\u0102\2\u09d0\u09d1\7\21\2\2\u09d1\u09d3\5\u0202\u0102\2\u09d2"+
		"\u09d0\3\2\2\2\u09d3\u09d6\3\2\2\2\u09d4\u09d2\3\2\2\2\u09d4\u09d5\3\2"+
		"\2\2\u09d5\u0205\3\2\2\2\u09d6\u09d4\3\2\2\2\u09d7\u09d8\5\u01b2\u00da"+
		"\2\u09d8\u0207\3\2\2\2\u09d9\u09de\5\u020a\u0106\2\u09da\u09de\5\u021e"+
		"\u0110\2\u09db\u09de\5\u0220\u0111\2\u09dc\u09de\5\u0222\u0112\2\u09dd"+
		"\u09d9\3\2\2\2\u09dd\u09da\3\2\2\2\u09dd\u09db\3\2\2\2\u09dd\u09dc\3\2"+
		"\2\2\u09de\u0209\3\2\2\2\u09df\u09e0\b\u0106\1\2\u09e0\u09e1\5\u020c\u0107"+
		"\2\u09e1\u09e7\3\2\2\2\u09e2\u09e3\f\3\2\2\u09e3\u09e4\t\21\2\2\u09e4"+
		"\u09e6\5\u020c\u0107\2\u09e5\u09e2\3\2\2\2\u09e6\u09e9\3\2\2\2\u09e7\u09e5"+
		"\3\2\2\2\u09e7\u09e8\3\2\2\2\u09e8\u020b\3\2\2\2\u09e9\u09e7\3\2\2\2\u09ea"+
		"\u09eb\b\u0107\1\2\u09eb\u09ec\5\u020e\u0108\2\u09ec\u09f2\3\2\2\2\u09ed"+
		"\u09ee\f\3\2\2\u09ee\u09ef\t\22\2\2\u09ef\u09f1\5\u020e\u0108\2\u09f0"+
		"\u09ed\3\2\2\2\u09f1\u09f4\3\2\2\2\u09f2\u09f0\3\2\2\2\u09f2\u09f3\3\2"+
		"\2\2\u09f3\u020d\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f5\u09f7\5\u03ac\u01d7"+
		"\2\u09f6\u09f5\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09f9"+
		"\5\u0210\u0109\2\u09f9\u020f\3\2\2\2\u09fa\u09fd\5\u0212\u010a\2\u09fb"+
		"\u09fd\5\u024c\u0127\2\u09fc\u09fa\3\2\2\2\u09fc\u09fb\3\2\2\2\u09fd\u0211"+
		"\3\2\2\2\u09fe\u0a05\5\u0366\u01b4\2\u09ff\u0a05\5\u039c\u01cf\2\u0a00"+
		"\u0a05\5\u0214\u010b\2\u0a01\u0a05\5\u0218\u010d\2\u0a02\u0a05\5\u021a"+
		"\u010e\2\u0a03\u0a05\5\u021c\u010f\2\u0a04\u09fe\3\2\2\2\u0a04\u09ff\3"+
		"\2\2\2\u0a04\u0a00\3\2\2\2\u0a04\u0a01\3\2\2\2\u0a04\u0a02\3\2\2\2\u0a04"+
		"\u0a03\3\2\2\2\u0a05\u0213\3\2\2\2\u0a06\u0a07\7g\2\2\u0a07\u0a08\7\16"+
		"\2\2\u0a08\u0a09\7\20\2\2\u0a09\u0a0c\7\17\2\2\u0a0a\u0a0c\5\u0216\u010c"+
		"\2\u0a0b\u0a06\3\2\2\2\u0a0b\u0a0a\3\2\2\2\u0a0c\u0215\3\2\2\2\u0a0d\u0a0e"+
		"\5\u037e\u01c0\2\u0a0e\u0a10\7\16\2\2\u0a0f\u0a11\5\u0380\u01c1\2\u0a10"+
		"\u0a0f\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u0a13\5\u0208"+
		"\u0105\2\u0a13\u0a14\7\17\2\2\u0a14\u0217\3\2\2\2\u0a15\u0a16\5\u01b2"+
		"\u00da\2\u0a16\u0219\3\2\2\2\u0a17\u0a1a\5\u0234\u011b\2\u0a18\u0a1a\5"+
		"\u0236\u011c\2\u0a19\u0a17\3\2\2\2\u0a19\u0a18\3\2\2\2\u0a1a\u021b\3\2"+
		"\2\2\u0a1b\u0a1c\7?\2\2\u0a1c\u0a1d\7\16\2\2\u0a1d\u0a1e\5\u024a\u0126"+
		"\2\u0a1e\u0a1f\7-\2\2\u0a1f\u0a20\5\u0372\u01ba\2\u0a20\u0a21\7\17\2\2"+
		"\u0a21\u021d\3\2\2\2\u0a22\u0a25\5\u025c\u012f\2\u0a23\u0a25\5\u027c\u013f"+
		"\2\u0a24\u0a22\3\2\2\2\u0a24\u0a23\3\2\2\2\u0a25\u021f\3\2\2\2\u0a26\u0a27"+
		"\b\u0111\1\2\u0a27\u0a2d\5\u0224\u0113\2\u0a28\u0a29\5\u0222\u0112\2\u0a29"+
		"\u0a2a\7\b\2\2\u0a2a\u0a2b\5\u0224\u0113\2\u0a2b\u0a2d\3\2\2\2\u0a2c\u0a26"+
		"\3\2\2\2\u0a2c\u0a28\3\2\2\2\u0a2d\u0a33\3\2\2\2\u0a2e\u0a2f\f\3\2\2\u0a2f"+
		"\u0a30\t\21\2\2\u0a30\u0a32\5\u022e\u0118\2\u0a31\u0a2e\3\2\2\2\u0a32"+
		"\u0a35\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0221\3\2"+
		"\2\2\u0a35\u0a33\3\2\2\2\u0a36\u0a37\b\u0112\1\2\u0a37\u0a40\5\u022e\u0118"+
		"\2\u0a38\u0a39\7\16\2\2\u0a39\u0a3a\5\u0220\u0111\2\u0a3a\u0a3b\7\t\2"+
		"\2\u0a3b\u0a3c\5\u0224\u0113\2\u0a3c\u0a3d\7\17\2\2\u0a3d\u0a3e\5\u0336"+
		"\u019c\2\u0a3e\u0a40\3\2\2\2\u0a3f\u0a36\3\2\2\2\u0a3f\u0a38\3\2\2\2\u0a40"+
		"\u0a46\3\2\2\2\u0a41\u0a42\f\4\2\2\u0a42\u0a43\t\21\2\2\u0a43\u0a45\5"+
		"\u022e\u0118\2\u0a44\u0a41\3\2\2\2\u0a45\u0a48\3\2\2\2\u0a46\u0a44\3\2"+
		"\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0223\3\2\2\2\u0a48\u0a46\3\2\2\2\u0a49"+
		"\u0a4a\5\u0226\u0114\2\u0a4a\u0225\3\2\2\2\u0a4b\u0a4d\5\u0228\u0115\2"+
		"\u0a4c\u0a4e\5\u022a\u0116\2\u0a4d\u0a4c\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e"+
		"\u0227\3\2\2\2\u0a4f\u0a52\5\u0212\u010a\2\u0a50\u0a52\5\u0312\u018a\2"+
		"\u0a51\u0a4f\3\2\2\2\u0a51\u0a50\3\2\2\2\u0a52\u0229\3\2\2\2\u0a53\u0a54"+
		"\7\60\2\2\u0a54\u0a55\5\u022c\u0117\2\u0a55\u022b\3\2\2\2\u0a56\u0a5b"+
		"\7\u00cc\2\2\u0a57\u0a58\7\u0133\2\2\u0a58\u0a59\7\u0157\2\2\u0a59\u0a5b"+
		"\5\u0222\u0112\2\u0a5a\u0a56\3\2\2\2\u0a5a\u0a57\3\2\2\2\u0a5b\u022d\3"+
		"\2\2\2\u0a5c\u0a5d\b\u0118\1\2\u0a5d\u0a63\5\u0230\u0119\2\u0a5e\u0a5f"+
		"\5\u020c\u0107\2\u0a5f\u0a60\7\20\2\2\u0a60\u0a61\5\u0230\u0119\2\u0a61"+
		"\u0a63\3\2\2\2\u0a62\u0a5c\3\2\2\2\u0a62\u0a5e\3\2\2\2\u0a63\u0a69\3\2"+
		"\2\2\u0a64\u0a65\f\4\2\2\u0a65\u0a66\t\22\2\2\u0a66\u0a68\5\u0230\u0119"+
		"\2\u0a67\u0a64\3\2\2\2\u0a68\u0a6b\3\2\2\2\u0a69\u0a67\3\2\2\2\u0a69\u0a6a"+
		"\3\2\2\2\u0a6a\u022f\3\2\2\2\u0a6b\u0a69\3\2\2\2\u0a6c\u0a6e\5\u03ac\u01d7"+
		"\2\u0a6d\u0a6c\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a70"+
		"\5\u0232\u011a\2\u0a70\u0231\3\2\2\2\u0a71\u0a73\5\u0212\u010a\2\u0a72"+
		"\u0a74\5\u0336\u019c\2\u0a73\u0a72\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0233"+
		"\3\2\2\2\u0a75\u0a76\7\u00e7\2\2\u0a76\u0a77\7\16\2\2\u0a77\u0a78\5\u0208"+
		"\u0105\2\u0a78\u0a79\7\21\2\2\u0a79\u0a7a\5\u0208\u0105\2\u0a7a\u0a7b"+
		"\7\17\2\2\u0a7b\u0a89\3\2\2\2\u0a7c\u0a7d\7M\2\2\u0a7d\u0a7e\7\16\2\2"+
		"\u0a7e\u0a83\5\u0208\u0105\2\u0a7f\u0a80\7\21\2\2\u0a80\u0a82\5\u0208"+
		"\u0105\2\u0a81\u0a7f\3\2\2\2\u0a82\u0a85\3\2\2\2\u0a83\u0a81\3\2\2\2\u0a83"+
		"\u0a84\3\2\2\2\u0a84\u0a86\3\2\2\2\u0a85\u0a83\3\2\2\2\u0a86\u0a87\7\17"+
		"\2\2\u0a87\u0a89\3\2\2\2\u0a88\u0a75\3\2\2\2\u0a88\u0a7c\3\2\2\2\u0a89"+
		"\u0235\3\2\2\2\u0a8a\u0a8d\5\u0238\u011d\2\u0a8b\u0a8d\5\u023a\u011e\2"+
		"\u0a8c\u0a8a\3\2\2\2\u0a8c\u0a8b\3\2\2\2\u0a8d\u0237\3\2\2\2\u0a8e\u0a8f"+
		"\7>\2\2\u0a8f\u0a91\5\u023c\u011f\2\u0a90\u0a92\5\u023e\u0120\2\u0a91"+
		"\u0a90\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a91\3\2\2\2\u0a93\u0a94\3\2"+
		"\2\2\u0a94\u0a96\3\2\2\2\u0a95\u0a97\5\u0240\u0121\2\u0a96\u0a95\3\2\2"+
		"\2\u0a96\u0a97\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a99\7\u008e\2\2\u0a99"+
		"\u0239\3\2\2\2\u0a9a\u0a9c\7>\2\2\u0a9b\u0a9d\5\u0248\u0125\2\u0a9c\u0a9b"+
		"\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9c\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f"+
		"\u0aa1\3\2\2\2\u0aa0\u0aa2\5\u0240\u0121\2\u0aa1\u0aa0\3\2\2\2\u0aa1\u0aa2"+
		"\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa4\7\u008e\2\2\u0aa4\u023b\3\2\2"+
		"\2\u0aa5\u0aa6\5\u0208\u0105\2\u0aa6\u023d\3\2\2\2\u0aa7\u0aa8\7\u014f"+
		"\2\2\u0aa8\u0aa9\5\u0242\u0122\2\u0aa9\u0aaa\7\u0132\2\2\u0aaa\u0aab\5"+
		"\u0244\u0123\2\u0aab\u023f\3\2\2\2\u0aac\u0aad\7\u008d\2\2\u0aad\u0aae"+
		"\5\u0244\u0123\2\u0aae\u0241\3\2\2\2\u0aaf\u0ab0\5\u0208\u0105\2\u0ab0"+
		"\u0243\3\2\2\2\u0ab1\u0ab4\5\u0246\u0124\2\u0ab2\u0ab4\7\u00e5\2\2\u0ab3"+
		"\u0ab1\3\2\2\2\u0ab3\u0ab2\3\2\2\2\u0ab4\u0245\3\2\2\2\u0ab5\u0ab6\5\u0208"+
		"\u0105\2\u0ab6\u0247\3\2\2\2\u0ab7\u0ab8\7\u014f\2\2\u0ab8\u0ab9\5\u01de"+
		"\u00f0\2\u0ab9\u0aba\7\u0132\2\2\u0aba\u0abb\5\u0244\u0123\2\u0abb\u0249"+
		"\3\2\2\2\u0abc\u0abf\5\u0208\u0105\2\u0abd\u0abf\7\u00e5\2\2\u0abe\u0abc"+
		"\3\2\2\2\u0abe\u0abd\3\2\2\2\u0abf\u024b\3\2\2\2\u0ac0\u0ac4\5\u024e\u0128"+
		"\2\u0ac1\u0ac4\5\u0250\u0129\2\u0ac2\u0ac4\5\u0254\u012b\2\u0ac3\u0ac0"+
		"\3\2\2\2\u0ac3\u0ac1\3\2\2\2\u0ac3\u0ac2\3\2\2\2\u0ac4\u024d\3\2\2\2\u0ac5"+
		"\u0ac6\7\u00fa\2\2\u0ac6\u0ac7\7\16\2\2\u0ac7\u0ac8\5\u025c\u012f\2\u0ac8"+
		"\u0ac9\7\u00b0\2\2\u0ac9\u0aca\5\u025c\u012f\2\u0aca\u0acb\7\17\2\2\u0acb"+
		"\u024f\3\2\2\2\u0acc\u0acd\7\u0098\2\2\u0acd\u0ace\7\16\2\2\u0ace\u0acf"+
		"\5\u036c\u01b7\2\u0acf\u0ad0\7\u00a2\2\2\u0ad0\u0ad1\5\u0252\u012a\2\u0ad1"+
		"\u0ad2\7\17\2\2\u0ad2\u0251\3\2\2\2\u0ad3\u0ad6\5\u0220\u0111\2\u0ad4"+
		"\u0ad6\5\u0222\u0112\2\u0ad5\u0ad3\3\2\2\2\u0ad5\u0ad4\3\2\2\2\u0ad6\u0253"+
		"\3\2\2\2\u0ad7\u0adb\5\u0256\u012c\2\u0ad8\u0adb\5\u0258\u012d\2\u0ad9"+
		"\u0adb\5\u025a\u012e\2\u0ada\u0ad7\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0ada\u0ad9"+
		"\3\2\2\2\u0adb\u0255\3\2\2\2\u0adc\u0add\t\23\2\2\u0add\u0ade\7\16\2\2"+
		"\u0ade\u0adf\5\u021e\u0110\2\u0adf\u0ae0\7\17\2\2\u0ae0\u0257\3\2\2\2"+
		"\u0ae1\u0ae2\7\u00ea\2\2\u0ae2\u0ae3\7\16\2\2\u0ae3\u0ae4\5\u021e\u0110"+
		"\2\u0ae4\u0ae5\7\17\2\2\u0ae5\u0259\3\2\2\2\u0ae6\u0ae7\78\2\2\u0ae7\u0ae8"+
		"\7\16\2\2\u0ae8\u0ae9\5\u021e\u0110\2\u0ae9\u0aea\7\17\2\2\u0aea\u025b"+
		"\3\2\2\2\u0aeb\u0aec\b\u012f\1\2\u0aec\u0aed\5\u025e\u0130\2\u0aed\u0af3"+
		"\3\2\2\2\u0aee\u0aef\f\4\2\2\u0aef\u0af0\7!\2\2\u0af0\u0af2\5\u025e\u0130"+
		"\2\u0af1\u0aee\3\2\2\2\u0af2\u0af5\3\2\2\2\u0af3\u0af1\3\2\2\2\u0af3\u0af4"+
		"\3\2\2\2\u0af4\u025d\3\2\2\2\u0af5\u0af3\3\2\2\2\u0af6\u0af8\5\u0260\u0131"+
		"\2\u0af7\u0af9\5\u02e0\u0171\2\u0af8\u0af7\3\2\2\2\u0af8\u0af9\3\2\2\2"+
		"\u0af9\u025f\3\2\2\2\u0afa\u0afd\5\u0212\u010a\2\u0afb\u0afd\5\u0262\u0132"+
		"\2\u0afc\u0afa\3\2\2\2\u0afc\u0afb\3\2\2\2\u0afd\u0261\3\2\2\2\u0afe\u0b01"+
		"\5\u0264\u0133\2\u0aff\u0b01\5\u0266\u0134\2\u0b00\u0afe\3\2\2\2\u0b00"+
		"\u0aff\3\2\2\2\u0b01\u0263\3\2\2\2\u0b02\u0b08\5\u0268\u0135\2\u0b03\u0b08"+
		"\5\u026e\u0138\2\u0b04\u0b08\5\u03a4\u01d3\2\u0b05\u0b08\5\u0270\u0139"+
		"\2\u0b06\u0b08\5\u0272\u013a\2\u0b07\u0b02\3\2\2\2\u0b07\u0b03\3\2\2\2"+
		"\u0b07\u0b04\3\2\2\2\u0b07\u0b05\3\2\2\2\u0b07\u0b06\3\2\2\2\u0b08\u0265"+
		"\3\2\2\2\u0b09\u0b0a\5\u027a\u013e\2\u0b0a\u0267\3\2\2\2\u0b0b\u0b0c\7"+
		"\u012c\2\2\u0b0c\u0b0d\7\16\2\2\u0b0d\u0b0e\5\u025c\u012f\2\u0b0e\u0b0f"+
		"\7\u00a2\2\2\u0b0f\u0b12\5\u026a\u0136\2\u0b10\u0b11\7\u009e\2\2\u0b11"+
		"\u0b13\5\u026c\u0137\2\u0b12\u0b10\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b14"+
		"\3\2\2\2\u0b14\u0b15\7\17\2\2\u0b15\u0269\3\2\2\2\u0b16\u0b17\5\u020a"+
		"\u0106\2\u0b17\u026b\3\2\2\2\u0b18\u0b19\5\u020a\u0106\2\u0b19\u026d\3"+
		"\2\2\2\u0b1a\u0b1b\t\24\2\2\u0b1b\u0b1c\7\16\2\2\u0b1c\u0b1d\5\u025c\u012f"+
		"\2\u0b1d\u0b1e\7\17\2\2\u0b1e\u026f\3\2\2\2\u0b1f\u0b20\7\u013a\2\2\u0b20"+
		"\u0b21\7\16\2\2\u0b21\u0b22\5\u025c\u012f\2\u0b22\u0b23\7\u0148\2\2\u0b23"+
		"\u0b24\5\u03a6\u01d4\2\u0b24\u0b25\7\17\2\2\u0b25\u0271\3\2\2\2\u0b26"+
		"\u0b27\7\u013c\2\2\u0b27\u0b28\7\16\2\2\u0b28\u0b29\5\u0274\u013b\2\u0b29"+
		"\u0b2a\7\17\2\2\u0b2a\u0273\3\2\2\2\u0b2b\u0b2d\5\u0374\u01bb\2\u0b2c"+
		"\u0b2b\3\2\2\2\u0b2c\u0b2d\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b30\5\u0276"+
		"\u013c\2\u0b2f\u0b2c\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31"+
		"\u0b32\5\u0278\u013d\2\u0b32\u0275\3\2\2\2\u0b33\u0b34\5\u025c\u012f\2"+
		"\u0b34\u0277\3\2\2\2\u0b35\u0b36\5\u025c\u012f\2\u0b36\u0279\3\2\2\2\u0b37"+
		"\u0b38\7\u012c\2\2\u0b38\u0b39\7\16\2\2\u0b39\u0b3a\5\u027c\u013f\2\u0b3a"+
		"\u0b3b\7\u00a2\2\2\u0b3b\u0b3e\5\u026a\u0136\2\u0b3c\u0b3d\7\u009e\2\2"+
		"\u0b3d\u0b3f\5\u026c\u0137\2\u0b3e\u0b3c\3\2\2\2\u0b3e\u0b3f\3\2\2\2\u0b3f"+
		"\u0b40\3\2\2\2\u0b40\u0b41\7\17\2\2\u0b41\u027b\3\2\2\2\u0b42\u0b43\b"+
		"\u013f\1\2\u0b43\u0b44\5\u027e\u0140\2\u0b44\u0b4a\3\2\2\2\u0b45\u0b46"+
		"\f\4\2\2\u0b46\u0b47\7!\2\2\u0b47\u0b49\5\u027e\u0140\2\u0b48\u0b45\3"+
		"\2\2\2\u0b49\u0b4c\3\2\2\2\u0b4a\u0b48\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b"+
		"\u027d\3\2\2\2\u0b4c\u0b4a\3\2\2\2\u0b4d\u0b4e\5\u0280\u0141\2\u0b4e\u027f"+
		"\3\2\2\2\u0b4f\u0b52\5\u0212\u010a\2\u0b50\u0b52\5\u0262\u0132\2\u0b51"+
		"\u0b4f\3\2\2\2\u0b51\u0b50\3\2\2\2\u0b52\u0281\3\2\2\2\u0b53\u0b54\7\u0101"+
		"\2\2\u0b54\u0b55\5\u0284\u0143\2\u0b55\u0b56\5\u0286\u0144\2\u0b56\u0b57"+
		"\7\25\2\2\u0b57\u0b58\5\u028c\u0147\2\u0b58\u0b59\7\25\2\2\u0b59\u0283"+
		"\3\2\2\2\u0b5a\u0b5b\5\u02a4\u0153\2\u0b5b\u0285\3\2\2\2\u0b5c\u0b5d\7"+
		"\16\2\2\u0b5d\u0b62\5\u0288\u0145\2\u0b5e\u0b5f\7\21\2\2\u0b5f\u0b61\5"+
		"\u0288\u0145\2\u0b60\u0b5e\3\2\2\2\u0b61\u0b64\3\2\2\2\u0b62\u0b60\3\2"+
		"\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b65\3\2\2\2\u0b64\u0b62\3\2\2\2\u0b65"+
		"\u0b66\7\17\2\2\u0b66\u0287\3\2\2\2\u0b67\u0b68\5\u03a2\u01d2\2\u0b68"+
		"\u0b69\5\u031e\u0190\2\u0b69\u0b6c\3\2\2\2\u0b6a\u0b6c\5\u028a\u0146\2"+
		"\u0b6b\u0b67\3\2\2\2\u0b6b\u0b6a\3\2\2\2\u0b6c\u0289\3\2\2\2\u0b6d\u0b6e"+
		"\t\25\2\2\u0b6e\u028b\3\2\2\2\u0b6f\u0b77\5\34\17\2\u0b70\u0b77\5\u00b0"+
		"Y\2\u0b71\u0b77\5\u0106\u0084\2\u0b72\u0b77\5\u011e\u0090\2\u0b73\u0b77"+
		"\5\u0132\u009a\2\u0b74\u0b77\5\u0142\u00a2\2\u0b75\u0b77\5\u019e\u00d0"+
		"\2\u0b76\u0b6f\3\2\2\2\u0b76\u0b70\3\2\2\2\u0b76\u0b71\3\2\2\2\u0b76\u0b72"+
		"\3\2\2\2\u0b76\u0b73\3\2\2\2\u0b76\u0b74\3\2\2\2\u0b76\u0b75\3\2\2\2\u0b77"+
		"\u028d\3\2\2\2\u0b78\u0b79\5\u0292\u014a\2\u0b79\u0b7a\5\u0368\u01b5\2"+
		"\u0b7a\u0b7e\5\u0298\u014d\2\u0b7b\u0b7d\5\u029c\u014f\2\u0b7c\u0b7b\3"+
		"\2\2\2\u0b7d\u0b80\3\2\2\2\u0b7e\u0b7c\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f"+
		"\u0b82\3\2\2\2\u0b80\u0b7e\3\2\2\2\u0b81\u0b83\5\u0290\u0149\2\u0b82\u0b81"+
		"\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b82\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85"+
		"\u028f\3\2\2\2\u0b86\u0b8a\5\u029e\u0150\2\u0b87\u0b8a\5\u02a2\u0152\2"+
		"\u0b88\u0b8a\5\u0282\u0142\2\u0b89\u0b86\3\2\2\2\u0b89\u0b87\3\2\2\2\u0b89"+
		"\u0b88\3\2\2\2\u0b8a\u0291\3\2\2\2\u0b8b\u0b8c\7\u00d8\2\2\u0b8c\u0b8d"+
		"\5\u0294\u014b\2\u0b8d\u0b8e\5\u0296\u014c\2\u0b8e\u0293\3\2\2\2\u0b8f"+
		"\u0b90\5\u02a4\u0153\2\u0b90\u0295\3\2\2\2\u0b91\u0b92\7\u00de\2\2\u0b92"+
		"\u0b93\7,\2\2\u0b93\u0b94\5\u02b8\u015d\2\u0b94\u0297\3\2\2\2\u0b95\u0b99"+
		"\7\u0112\2\2\u0b96\u0b97\5\u02b2\u015a\2\u0b97\u0b98\7\22\2\2\u0b98\u0b9a"+
		"\3\2\2\2\u0b99\u0b96\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a\u0b9b\3\2\2\2\u0b9b"+
		"\u0b9c\5\u02b0\u0159\2\u0b9c\u0299\3\2\2\2\u0b9d\u0b9e\5\u038e\u01c8\2"+
		"\u0b9e\u029b\3\2\2\2\u0b9f\u0ba0\7y\2\2\u0ba0\u0ba1\7\u00cc\2\2\u0ba1"+
		"\u0ba2\7\u0131\2\2\u0ba2\u0ba3\7\u012f\2\2\u0ba3\u0ba4\5\u039a\u01ce\2"+
		"\u0ba4\u0ba9\5\u01ce\u00e8\2\u0ba5\u0ba6\7\u00ed\2\2\u0ba6\u0ba7\7W\2"+
		"\2\u0ba7\u0ba8\t\3\2\2\u0ba8\u0baa\7\u010f\2\2\u0ba9\u0ba5\3\2\2\2\u0ba9"+
		"\u0baa\3\2\2\2\u0baa\u029d\3\2\2\2\u0bab\u0bac\7y\2\2\u0bac\u0bae\5\u0390"+
		"\u01c9\2\u0bad\u0baf\7\u00b6\2\2\u0bae\u0bad\3\2\2\2\u0bae\u0baf\3\2\2"+
		"\2\u0baf\u0bb1\3\2\2\2\u0bb0\u0bb2\7\u0114\2\2\u0bb1\u0bb0\3\2\2\2\u0bb1"+
		"\u0bb2\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb4\7o\2\2\u0bb4\u0bb5\7\u009e"+
		"\2\2\u0bb5\u0bb6\5\u02a0\u0151\2\u0bb6\u029f\3\2\2\2\u0bb7\u0bb9\5\u01b4"+
		"\u00db\2\u0bb8\u0bba\5\u02ec\u0177\2\u0bb9\u0bb8\3\2\2\2\u0bb9\u0bba\3"+
		"\2\2\2\u0bba\u0bbc\3\2\2\2\u0bbb\u0bbd\5\u02f6\u017c\2\u0bbc\u0bbb\3\2"+
		"\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd\u02a1\3\2\2\2\u0bbe\u0bbf\7y\2\2\u0bbf"+
		"\u0bc1\5\u0390\u01c9\2\u0bc0\u0bc2\7\u00b6\2\2\u0bc1\u0bc0\3\2\2\2\u0bc1"+
		"\u0bc2\3\2\2\2\u0bc2\u0bc4\3\2\2\2\u0bc3\u0bc5\7\u0114\2\2\u0bc4\u0bc3"+
		"\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc7\7o\2\2\u0bc7"+
		"\u0bc8\7\u009e\2\2\u0bc8\u0bc9\5\u0394\u01cb\2\u0bc9\u02a3\3\2\2\2\u0bca"+
		"\u0bcb\7\35\2\2\u0bcb\u0bcd\5\u02b8\u015d\2\u0bcc\u0bca\3\2\2\2\u0bcc"+
		"\u0bcd\3\2\2\2\u0bcd\u0bce\3\2\2\2\u0bce\u0bcf\5\u02a6\u0154\2\u0bcf\u02a5"+
		"\3\2\2\2\u0bd0\u0bd3\5\u02a8\u0155\2\u0bd1\u0bd3\5\u02aa\u0156\2\u0bd2"+
		"\u0bd0\3\2\2\2\u0bd2\u0bd1\3\2\2\2\u0bd3\u02a7\3\2\2\2\u0bd4\u0bd5\5\u03b2"+
		"\u01da\2\u0bd5\u02a9\3\2\2\2\u0bd6\u0bd7\7\n\2\2\u0bd7\u0bd8\5\u02ac\u0157"+
		"\2\u0bd8\u0bd9\7\n\2\2\u0bd9\u02ab\3\2\2\2\u0bda\u0bdc\5\u02ae\u0158\2"+
		"\u0bdb\u0bda\3\2\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0bdb\3\2\2\2\u0bdd\u0bde"+
		"\3\2\2\2\u0bde\u02ad\3\2\2\2\u0bdf\u0be2\5\u03a8\u01d5\2\u0be0\u0be2\5"+
		"\u03aa\u01d6\2\u0be1\u0bdf\3\2\2\2\u0be1\u0be0\3\2\2\2\u0be2\u02af\3\2"+
		"\2\2\u0be3\u0be4\5\u02a4\u0153\2\u0be4\u02b1\3\2\2\2\u0be5\u0be6\5\u02a4"+
		"\u0153\2\u0be6\u02b3\3\2\2\2\u0be7\u0be8\7\35\2\2\u0be8\u0bea\5\u02b8"+
		"\u015d\2\u0be9\u0be7\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb"+
		"\u0bf5\7\u0165\2\2\u0bec\u0bee\5\u03ae\u01d8\2\u0bed\u0bec\3\2\2\2\u0bee"+
		"\u0bef\3\2\2\2\u0bef\u0bed\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf1\3\2"+
		"\2\2\u0bf1\u0bf2\7\u0165\2\2\u0bf2\u0bf4\3\2\2\2\u0bf3\u0bed\3\2\2\2\u0bf4"+
		"\u0bf7\3\2\2\2\u0bf5\u0bf3\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u02b5\3\2"+
		"\2\2\u0bf7\u0bf5\3\2\2\2\u0bf8\u0bf9\5\u02b2\u015a\2\u0bf9\u0bfa\7\22"+
		"\2\2\u0bfa\u0bfc\3\2\2\2\u0bfb\u0bf8\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc"+
		"\u0c00\3\2\2\2\u0bfd\u0bfe\5\u02b0\u0159\2\u0bfe\u0bff\7\22\2\2\u0bff"+
		"\u0c01\3\2\2\2\u0c00\u0bfd\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01\u0c02\3\2"+
		"\2\2\u0c02\u0c03\5\u03b2\u01da\2\u0c03\u02b7\3\2\2\2\u0c04\u0c05\5\u02b6"+
		"\u015c\2\u0c05\u02b9\3\2\2\2\u0c06\u0c07\5\u02b6\u015c\2\u0c07\u02bb\3"+
		"\2\2\2\u0c08\u0c0b\5\u03a0\u01d1\2\u0c09\u0c0b\5\u039a\u01ce\2\u0c0a\u0c08"+
		"\3\2\2\2\u0c0a\u0c09\3\2\2\2\u0c0b\u02bd\3\2\2\2\u0c0c\u0c0d\7^\2\2\u0c0d"+
		"\u0c0e\5\u02c0\u0161\2\u0c0e\u02bf\3\2\2\2\u0c0f\u0c10\5\u03a0\u01d1\2"+
		"\u0c10\u02c1\3\2\2\2\u0c11\u0c15\7\u0141\2\2\u0c12\u0c13\7\u00fe\2\2\u0c13"+
		"\u0c15\7\u00c4\2\2\u0c14\u0c11\3\2\2\2\u0c14\u0c12\3\2\2\2\u0c15\u02c3"+
		"\3\2\2\2\u0c16\u0c17\7\u0105\2\2\u0c17\u0c1a\5\u02c6\u0164\2\u0c18\u0c19"+
		"\7\u00d1\2\2\u0c19\u0c1b\5\u02ca\u0166\2\u0c1a\u0c18\3\2\2\2\u0c1a\u0c1b"+
		"\3\2\2\2\u0c1b\u0c1d\3\2\2\2\u0c1c\u0c1e\5\u02cc\u0167\2\u0c1d\u0c1c\3"+
		"\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u02c5\3\2\2\2\u0c1f\u0c24\5\u02bc\u015f"+
		"\2\u0c20\u0c21\7\16\2\2\u0c21\u0c22\5\u02c8\u0165\2\u0c22\u0c23\7\17\2"+
		"\2\u0c23\u0c25\3\2\2\2\u0c24\u0c20\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u02c7"+
		"\3\2\2\2\u0c26\u0c27\5\u031c\u018f\2\u0c27\u02c9\3\2\2\2\u0c28\u0c29\t"+
		"\20\2\2\u0c29\u02cb\3\2\2\2\u0c2a\u0c2c\5\u02ce\u0168\2\u0c2b\u0c2d\5"+
		"\u02d0\u0169\2\u0c2c\u0c2b\3\2\2\2\u0c2c\u0c2d\3\2\2\2\u0c2d\u0c33\3\2"+
		"\2\2\u0c2e\u0c30\5\u02d0\u0169\2\u0c2f\u0c31\5\u02ce\u0168\2\u0c30\u0c2f"+
		"\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c33\3\2\2\2\u0c32\u0c2a\3\2\2\2\u0c32"+
		"\u0c2e\3\2\2\2\u0c33\u02cd\3\2\2\2\u0c34\u0c35\7\u00ed\2\2\u0c35\u0c36"+
		"\7\u0144\2\2\u0c36\u0c37\5\u02d2\u016a\2\u0c37\u02cf\3\2\2\2\u0c38\u0c39"+
		"\7\u00ed\2\2\u0c39\u0c3a\7}\2\2\u0c3a\u0c3b\5\u02d2\u016a\2\u0c3b\u02d1"+
		"\3\2\2\2\u0c3c\u0c42\7<\2\2\u0c3d\u0c3e\7\u011c\2\2\u0c3e\u0c42\t\26\2"+
		"\2\u0c3f\u0c40\7\u00e3\2\2\u0c40\u0c42\7$\2\2\u0c41\u0c3c\3\2\2\2\u0c41"+
		"\u0c3d\3\2\2\2\u0c41\u0c3f\3\2\2\2\u0c42\u02d3\3\2\2\2\u0c43\u0c48\5\u02d6"+
		"\u016c\2\u0c44\u0c46\7\u00e4\2\2\u0c45\u0c44\3\2\2\2\u0c45\u0c46\3\2\2"+
		"\2\u0c46\u0c47\3\2\2\2\u0c47\u0c49\7{\2\2\u0c48\u0c45\3\2\2\2\u0c48\u0c49"+
		"\3\2\2\2\u0c49\u0c52\3\2\2\2\u0c4a\u0c4c\7\u00e4\2\2\u0c4b\u0c4a\3\2\2"+
		"\2\u0c4b\u0c4c\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c4f\7{\2\2\u0c4e\u0c50"+
		"\5\u02d6\u016c\2\u0c4f\u0c4e\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c52\3"+
		"\2\2\2\u0c51\u0c43\3\2\2\2\u0c51\u0c4b\3\2\2\2\u0c52\u02d5\3\2\2\2\u0c53"+
		"\u0c54\7\u00b3\2\2\u0c54\u0c55\t\13\2\2\u0c55\u02d7\3\2\2\2\u0c56\u0c57"+
		"\5\u02c2\u0162\2\u0c57\u0c58\7\16\2\2\u0c58\u0c59\5\u02da\u016e\2\u0c59"+
		"\u0c5a\7\17\2\2\u0c5a\u02d9\3\2\2\2\u0c5b\u0c5c\5\u031c\u018f\2\u0c5c"+
		"\u02db\3\2\2\2\u0c5d\u0c5e\7\u009f\2\2\u0c5e\u0c5f\7\u00c4\2\2\u0c5f\u0c60"+
		"\7\16\2\2\u0c60\u0c61\5\u02de\u0170\2\u0c61\u0c62\7\17\2\2\u0c62\u0c63"+
		"\5\u02c4\u0163\2\u0c63\u02dd\3\2\2\2\u0c64\u0c65\5\u02c8\u0165\2\u0c65"+
		"\u02df\3\2\2\2\u0c66\u0c67\7O\2\2\u0c67\u0c68\5\u02e2\u0172\2\u0c68\u02e1"+
		"\3\2\2\2\u0c69\u0c6a\5\u03a0\u01d1\2\u0c6a\u02e3\3\2\2\2\u0c6b\u0c6c\7"+
		"-\2\2\u0c6c\u0c6d\5\u031a\u018e\2\u0c6d\u02e5\3\2\2\2\u0c6e\u0c6f\7\u00a9"+
		"\2\2\u0c6f\u0c70\7:\2\2\u0c70\u0c71\5\u02e8\u0175\2\u0c71\u02e7\3\2\2"+
		"\2\u0c72\u0c77\5\u02ea\u0176\2\u0c73\u0c74\7\21\2\2\u0c74\u0c76\5\u02ea"+
		"\u0176\2\u0c75\u0c73\3\2\2\2\u0c76\u0c79\3\2\2\2\u0c77\u0c75\3\2\2\2\u0c77"+
		"\u0c78\3\2\2\2\u0c78\u02e9\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c7a\u0c7c\5\u039c"+
		"\u01cf\2\u0c7b\u0c7d\5\u02e0\u0171\2\u0c7c\u0c7b\3\2\2\2\u0c7c\u0c7d\3"+
		"\2\2\2\u0c7d\u02eb\3\2\2\2\u0c7e\u0c7f\7\u00f2\2\2\u0c7f\u0c80\7:\2\2"+
		"\u0c80\u0c81\5\u02ee\u0178\2\u0c81\u02ed\3\2\2\2\u0c82\u0c87\5\u02f0\u0179"+
		"\2\u0c83\u0c84\7\21\2\2\u0c84\u0c86\5\u02f0\u0179\2\u0c85\u0c83\3\2\2"+
		"\2\u0c86\u0c89\3\2\2\2\u0c87\u0c85\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u02ef"+
		"\3\2\2\2\u0c89\u0c87\3\2\2\2\u0c8a\u0c8c\5\u02f2\u017a\2\u0c8b\u0c8d\5"+
		"\u02e0\u0171\2\u0c8c\u0c8b\3\2\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d\u0c8f\3\2"+
		"\2\2\u0c8e\u0c90\5\u02f4\u017b\2\u0c8f\u0c8e\3\2\2\2\u0c8f\u0c90\3\2\2"+
		"\2\u0c90\u02f1\3\2\2\2\u0c91\u0c92\5\u02bc\u015f\2\u0c92\u0c93\7\22\2"+
		"\2\u0c93\u0c95\3\2\2\2\u0c94\u0c91\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u0c96"+
		"\3\2\2\2\u0c96\u0c99\5\u031a\u018e\2\u0c97\u0c99\7\u0159\2\2\u0c98\u0c94"+
		"\3\2\2\2\u0c98\u0c97\3\2\2\2\u0c99\u02f3\3\2\2\2\u0c9a\u0c9b\t\27\2\2"+
		"\u0c9b\u02f5\3\2\2\2\u0c9c\u0ca4\7\u009e\2\2\u0c9d\u0c9e\7\u0103\2\2\u0c9e"+
		"\u0ca5\7\u00ee\2\2\u0c9f\u0ca2\7\u0144\2\2\u0ca0\u0ca1\7\u00eb\2\2\u0ca1"+
		"\u0ca3\5\u031c\u018f\2\u0ca2\u0ca0\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca5"+
		"\3\2\2\2\u0ca4\u0c9d\3\2\2\2\u0ca4\u0c9f\3\2\2\2\u0ca5\u02f7\3\2\2\2\u0ca6"+
		"\u0ca7\7z\2\2\u0ca7\u0ca8\5\u02fa\u017e\2\u0ca8\u02f9\3\2\2\2\u0ca9\u0cb1"+
		"\5\u02fc\u017f\2\u0caa\u0cb1\5\u0312\u018a\2\u0cab\u0cb1\7\u0147\2\2\u0cac"+
		"\u0cb1\7n\2\2\u0cad\u0cb1\7\u011b\2\2\u0cae\u0cb1\7\u012e\2\2\u0caf\u0cb1"+
		"\7\u00e5\2\2\u0cb0\u0ca9\3\2\2\2\u0cb0\u0caa\3\2\2\2\u0cb0\u0cab\3\2\2"+
		"\2\u0cb0\u0cac\3\2\2\2\u0cb0\u0cad\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0caf"+
		"\3\2\2\2\u0cb1\u02fb\3\2\2\2\u0cb2\u0cb4\5\u03ac\u01d7\2\u0cb3\u0cb2\3"+
		"\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cb8\7\u0159\2\2"+
		"\u0cb6\u0cb8\5\u0300\u0181\2\u0cb7\u0cb3\3\2\2\2\u0cb7\u0cb6\3\2\2\2\u0cb8"+
		"\u02fd\3\2\2\2\u0cb9\u0cbc\7\u0159\2\2\u0cba\u0cbc\5\u0300\u0181\2\u0cbb"+
		"\u0cb9\3\2\2\2\u0cbb\u0cba\3\2\2\2\u0cbc\u02ff\3\2\2\2\u0cbd\u0cc4\5\u02b4"+
		"\u015b\2\u0cbe\u0cc4\5\u0302\u0182\2\u0cbf\u0cc4\5\u0304\u0183\2\u0cc0"+
		"\u0cc4\5\u0306\u0184\2\u0cc1\u0cc4\5\u0308\u0185\2\u0cc2\u0cc4\5\u0310"+
		"\u0189\2\u0cc3\u0cbd\3\2\2\2\u0cc3\u0cbe\3\2\2\2\u0cc3\u0cbf\3\2\2\2\u0cc3"+
		"\u0cc0\3\2\2\2\u0cc3\u0cc1\3\2\2\2\u0cc3\u0cc2\3\2\2\2\u0cc4\u0301\3\2"+
		"\2\2\u0cc5\u0cc6\7\u00dc\2\2\u0cc6\u0cd0\7\u0165\2\2\u0cc7\u0cc9\5\u03ae"+
		"\u01d8\2\u0cc8\u0cc7\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0cc8\3\2\2\2\u0cca"+
		"\u0ccb\3\2\2\2\u0ccb\u0ccc\3\2\2\2\u0ccc\u0ccd\7\u0165\2\2\u0ccd\u0ccf"+
		"\3\2\2\2\u0cce\u0cc8\3\2\2\2\u0ccf\u0cd2\3\2\2\2\u0cd0\u0cce\3\2\2\2\u0cd0"+
		"\u0cd1\3\2\2\2\u0cd1\u0303\3\2\2\2\u0cd2\u0cd0\3\2\2\2\u0cd3\u0cd4\7\64"+
		"\2\2\u0cd4\u0cde\7\u0163\2\2\u0cd5\u0cd7\5\u03ae\u01d8\2\u0cd6\u0cd5\3"+
		"\2\2\2\u0cd7\u0cd8\3\2\2\2\u0cd8\u0cd6\3\2\2\2\u0cd8\u0cd9\3\2\2\2\u0cd9"+
		"\u0cda\3\2\2\2\u0cda\u0cdb\7\u0163\2\2\u0cdb\u0cdd\3\2\2\2\u0cdc\u0cd6"+
		"\3\2\2\2\u0cdd\u0ce0\3\2\2\2\u0cde\u0cdc\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf"+
		"\u0305\3\2\2\2\u0ce0\u0cde\3\2\2\2\u0ce1\u0ce2\7\u0155\2\2\u0ce2\u0cec"+
		"\7\u0164\2\2\u0ce3\u0ce5\5\u03ae\u01d8\2\u0ce4\u0ce3\3\2\2\2\u0ce5\u0ce6"+
		"\3\2\2\2\u0ce6\u0ce4\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8"+
		"\u0ce9\7\u0164\2\2\u0ce9\u0ceb\3\2\2\2\u0cea\u0ce4\3\2\2\2\u0ceb\u0cee"+
		"\3\2\2\2\u0cec\u0cea\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0307\3\2\2\2\u0cee"+
		"\u0cec\3\2\2\2\u0cef\u0cf3\5\u030a\u0186\2\u0cf0\u0cf3\5\u030c\u0187\2"+
		"\u0cf1\u0cf3\5\u030e\u0188\2\u0cf2\u0cef\3\2\2\2\u0cf2\u0cf0\3\2\2\2\u0cf2"+
		"\u0cf1\3\2\2\2\u0cf3\u0309\3\2\2\2\u0cf4\u0cf5\7r\2\2\u0cf5\u0cf6\7\u015d"+
		"\2\2\u0cf6\u030b\3\2\2\2\u0cf7\u0cf8\7\u0133\2\2\u0cf8\u0cf9\7\u015f\2"+
		"\2\u0cf9\u030d\3\2\2\2\u0cfa\u0cfb\7\u0134\2\2\u0cfb\u0cfc\7\u015c\2\2"+
		"\u0cfc\u030f\3\2\2\2\u0cfd\u0cff\7\u00be\2\2\u0cfe\u0d00\5\u03ac\u01d7"+
		"\2\u0cff\u0cfe\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0d02"+
		"\7\u0161\2\2\u0d02\u0d03\5\u0336\u019c\2\u0d03\u0311\3\2\2\2\u0d04\u0d08"+
		"\5\u0314\u018b\2\u0d05\u0d08\5\u0316\u018c\2\u0d06\u0d08\5\u0318\u018d"+
		"\2\u0d07\u0d04\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d07\u0d06\3\2\2\2\u0d08\u0313"+
		"\3\2\2\2\u0d09\u0d0a\7k\2\2\u0d0a\u0315\3\2\2\2\u0d0b\u0d10\7l\2\2\u0d0c"+
		"\u0d0d\7\16\2\2\u0d0d\u0d0e\5\u0330\u0199\2\u0d0e\u0d0f\7\17\2\2\u0d0f"+
		"\u0d11\3\2\2\2\u0d10\u0d0c\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0317\3\2"+
		"\2\2\u0d12\u0d17\7m\2\2\u0d13\u0d14\7\16\2\2\u0d14\u0d15\5\u0332\u019a"+
		"\2\u0d15\u0d16\7\17\2\2\u0d16\u0d18\3\2\2\2\u0d17\u0d13\3\2\2\2\u0d17"+
		"\u0d18\3\2\2\2\u0d18\u0319\3\2\2\2\u0d19\u0d1a\5\u02a4\u0153\2\u0d1a\u031b"+
		"\3\2\2\2\u0d1b\u0d20\5\u031a\u018e\2\u0d1c\u0d1d\7\21\2\2\u0d1d\u0d1f"+
		"\5\u031a\u018e\2\u0d1e\u0d1c\3\2\2\2\u0d1f\u0d22\3\2\2\2\u0d20\u0d1e\3"+
		"\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u031d\3\2\2\2\u0d22\u0d20\3\2\2\2\u0d23"+
		"\u0d27\5\u0320\u0191\2\u0d24\u0d25\7D\2\2\u0d25\u0d26\7\u011c\2\2\u0d26"+
		"\u0d28\5\u02b8\u015d\2\u0d27\u0d24\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d2f"+
		"\3\2\2\2\u0d29\u0d2f\5\u0322\u0192\2\u0d2a\u0d2f\5\u0324\u0193\2\u0d2b"+
		"\u0d2f\5\u0326\u0194\2\u0d2c\u0d2f\5\u032c\u0197\2\u0d2d\u0d2f\5\u0334"+
		"\u019b\2\u0d2e\u0d23\3\2\2\2\u0d2e\u0d29\3\2\2\2\u0d2e\u0d2a\3\2\2\2\u0d2e"+
		"\u0d2b\3\2\2\2\u0d2e\u0d2c\3\2\2\2\u0d2e\u0d2d\3\2\2\2\u0d2f\u031f\3\2"+
		"\2\2\u0d30\u0d32\t\30\2\2\u0d31\u0d33\7\u014c\2\2\u0d32\u0d31\3\2\2\2"+
		"\u0d32\u0d33\3\2\2\2\u0d33\u0d36\3\2\2\2\u0d34\u0d36\7\u014b\2\2\u0d35"+
		"\u0d30\3\2\2\2\u0d35\u0d34\3\2\2\2\u0d36\u0d3b\3\2\2\2\u0d37\u0d38\7\16"+
		"\2\2\u0d38\u0d39\5\u0388\u01c5\2\u0d39\u0d3a\7\17\2\2\u0d3a\u0d3c\3\2"+
		"\2\2\u0d3b\u0d37\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0321\3\2\2\2\u0d3d"+
		"\u0d43\7\u00df\2\2\u0d3e\u0d40\t\30\2\2\u0d3f\u0d41\7\u014c\2\2\u0d40"+
		"\u0d3f\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d44\3\2\2\2\u0d42\u0d44\7\u014b"+
		"\2\2\u0d43\u0d3e\3\2\2\2\u0d43\u0d42\3\2\2\2\u0d44\u0d4a\3\2\2\2\u0d45"+
		"\u0d47\7\u00e1\2\2\u0d46\u0d48\7\u014c\2\2\u0d47\u0d46\3\2\2\2\u0d47\u0d48"+
		"\3\2\2\2\u0d48\u0d4a\3\2\2\2\u0d49\u0d3d\3\2\2\2\u0d49\u0d45\3\2\2\2\u0d4a"+
		"\u0d4f\3\2\2\2\u0d4b\u0d4c\7\16\2\2\u0d4c\u0d4d\5\u0388\u01c5\2\u0d4d"+
		"\u0d4e\7\17\2\2\u0d4e\u0d50\3\2\2\2\u0d4f\u0d4b\3\2\2\2\u0d4f\u0d50\3"+
		"\2\2\2\u0d50\u0323\3\2\2\2\u0d51\u0d53\7\67\2\2\u0d52\u0d54\7\u014c\2"+
		"\2\u0d53\u0d52\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d59\3\2\2\2\u0d55\u0d56"+
		"\7\16\2\2\u0d56\u0d57\5\u0388\u01c5\2\u0d57\u0d58\7\17\2\2\u0d58\u0d5a"+
		"\3\2\2\2\u0d59\u0d55\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u0325\3\2\2\2\u0d5b"+
		"\u0d5e\5\u0328\u0195\2\u0d5c\u0d5e\5\u032a\u0196\2\u0d5d\u0d5b\3\2\2\2"+
		"\u0d5d\u0d5c\3\2\2\2\u0d5e\u0327\3\2\2\2\u0d5f\u0d68\t\31\2\2\u0d60\u0d61"+
		"\7\16\2\2\u0d61\u0d64\5\u038a\u01c6\2\u0d62\u0d63\7\21\2\2\u0d63\u0d65"+
		"\5\u038c\u01c7\2\u0d64\u0d62\3\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d66\3"+
		"\2\2\2\u0d66\u0d67\7\17\2\2\u0d67\u0d69\3\2\2\2\u0d68\u0d60\3\2\2\2\u0d68"+
		"\u0d69\3\2\2\2\u0d69\u0d6e\3\2\2\2\u0d6a\u0d6e\7\u00b9\2\2\u0d6b\u0d6e"+
		"\7\u00b8\2\2\u0d6c\u0d6e\7\u011f\2\2\u0d6d\u0d5f\3\2\2\2\u0d6d\u0d6a\3"+
		"\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6d\u0d6c\3\2\2\2\u0d6e\u0329\3\2\2\2\u0d6f"+
		"\u0d74\7\u009d\2\2\u0d70\u0d71\7\16\2\2\u0d71\u0d72\5\u038a\u01c6\2\u0d72"+
		"\u0d73\7\17\2\2\u0d73\u0d75\3\2\2\2\u0d74\u0d70\3\2\2\2\u0d74\u0d75\3"+
		"\2\2\2\u0d75\u0d7a\3\2\2\2\u0d76\u0d7a\7\u0104\2\2\u0d77\u0d78\7\u0085"+
		"\2\2\u0d78\u0d7a\7\u00fb\2\2\u0d79\u0d6f\3\2\2\2\u0d79\u0d76\3\2\2\2\u0d79"+
		"\u0d77\3\2\2\2\u0d7a\u032b\3\2\2\2\u0d7b\u0d92\7r\2\2\u0d7c\u0d81\7\u0133"+
		"\2\2\u0d7d\u0d7e\7\16\2\2\u0d7e\u0d7f\5\u0330\u0199\2\u0d7f\u0d80\7\17"+
		"\2\2\u0d80\u0d82\3\2\2\2\u0d81\u0d7d\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82"+
		"\u0d8b\3\2\2\2\u0d83\u0d88\7\u0134\2\2\u0d84\u0d85\7\16\2\2\u0d85\u0d86"+
		"\5\u0332\u019a\2\u0d86\u0d87\7\17\2\2\u0d87\u0d89\3\2\2\2\u0d88\u0d84"+
		"\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u0d8b\3\2\2\2\u0d8a\u0d7c\3\2\2\2\u0d8a"+
		"\u0d83\3\2\2\2\u0d8b\u0d8f\3\2\2\2\u0d8c\u0d8d\7\u0152\2\2\u0d8d\u0d8e"+
		"\7\u0133\2\2\u0d8e\u0d90\7\u0157\2\2\u0d8f\u0d8c\3\2\2\2\u0d8f\u0d90\3"+
		"\2\2\2\u0d90\u0d92\3\2\2\2\u0d91\u0d7b\3\2\2\2\u0d91\u0d8a\3\2\2\2\u0d92"+
		"\u032d\3\2\2\2\u0d93\u0d94\7\u0159\2\2\u0d94\u032f\3\2\2\2\u0d95\u0d96"+
		"\5\u032e\u0198\2\u0d96\u0331\3\2\2\2\u0d97\u0d98\5\u032e\u0198\2\u0d98"+
		"\u0333\3\2\2\2\u0d99\u0d9a\7\u00be\2\2\u0d9a\u0d9b\5\u0336\u019c\2\u0d9b"+
		"\u0335\3\2\2\2\u0d9c\u0d9d\5\u0338\u019d\2\u0d9d\u0d9e\7\u0137\2\2\u0d9e"+
		"\u0d9f\5\u033e\u01a0\2\u0d9f\u0da2\3\2\2\2\u0da0\u0da2\5\u0342\u01a2\2"+
		"\u0da1\u0d9c\3\2\2\2\u0da1\u0da0\3\2\2\2\u0da2\u0337\3\2\2\2\u0da3\u0da8"+
		"\5\u033a\u019e\2\u0da4\u0da5\7\16\2\2\u0da5\u0da6\5\u033c\u019f\2\u0da6"+
		"\u0da7\7\17\2\2\u0da7\u0da9\3\2\2\2\u0da8\u0da4\3\2\2\2\u0da8\u0da9\3"+
		"\2\2\2\u0da9\u0339\3\2\2\2\u0daa\u0dab\t\32\2\2\u0dab\u033b\3\2\2\2\u0dac"+
		"\u0dad\7\u0159\2\2\u0dad\u033d\3\2\2\2\u0dae\u0db5\5\u033a\u019e\2\u0daf"+
		"\u0db0\7\u0115\2\2\u0db0\u0db1\7\16\2\2\u0db1\u0db2\5\u0340\u01a1\2\u0db2"+
		"\u0db3\7\17\2\2\u0db3\u0db5\3\2\2\2\u0db4\u0dae\3\2\2\2\u0db4\u0daf\3"+
		"\2\2\2\u0db5\u033f\3\2\2\2\u0db6\u0db7\7\u0159\2\2\u0db7\u0341\3\2\2\2"+
		"\u0db8\u0dbd\5\u033a\u019e\2\u0db9\u0dba\7\16\2\2\u0dba\u0dbb\5\u033c"+
		"\u019f\2\u0dbb\u0dbc\7\17\2\2\u0dbc\u0dbe\3\2\2\2\u0dbd\u0db9\3\2\2\2"+
		"\u0dbd\u0dbe\3\2\2\2\u0dbe\u0dce\3\2\2\2\u0dbf\u0dcb\7\u0115\2\2\u0dc0"+
		"\u0dc1\7\16\2\2\u0dc1\u0dc7\5\u033c\u019f\2\u0dc2\u0dc3\7\21\2\2\u0dc3"+
		"\u0dc4\7\16\2\2\u0dc4\u0dc5\5\u0340\u01a1\2\u0dc5\u0dc6\7\17\2\2\u0dc6"+
		"\u0dc8\3\2\2\2\u0dc7\u0dc2\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dc9\3\2"+
		"\2\2\u0dc9\u0dca\7\17\2\2\u0dca\u0dcc\3\2\2\2\u0dcb\u0dc0\3\2\2\2\u0dcb"+
		"\u0dcc\3\2\2\2\u0dcc\u0dce\3\2\2\2\u0dcd\u0db8\3\2\2\2\u0dcd\u0dbf\3\2"+
		"\2\2\u0dce\u0343\3\2\2\2\u0dcf\u0dd8\5\u0346\u01a4\2\u0dd0\u0dd8\5\u034a"+
		"\u01a6\2\u0dd1\u0dd8\5\u034c\u01a7\2\u0dd2\u0dd8\7\u0147\2\2\u0dd3\u0dd8"+
		"\7n\2\2\u0dd4\u0dd8\7\u011b\2\2\u0dd5\u0dd8\7\u012e\2\2\u0dd6\u0dd8\7"+
		"\u0149\2\2\u0dd7\u0dcf\3\2\2\2\u0dd7\u0dd0\3\2\2\2\u0dd7\u0dd1\3\2\2\2"+
		"\u0dd7\u0dd2\3\2\2\2\u0dd7\u0dd3\3\2\2\2\u0dd7\u0dd4\3\2\2\2\u0dd7\u0dd5"+
		"\3\2\2\2\u0dd7\u0dd6\3\2\2\2\u0dd8\u0345\3\2\2\2\u0dd9\u0ddb\5\u03a2\u01d2"+
		"\2\u0dda\u0ddc\5\u0348\u01a5\2\u0ddb\u0dda\3\2\2\2\u0ddb\u0ddc\3\2\2\2"+
		"\u0ddc\u0347\3\2\2\2\u0ddd\u0dde\7\u00b1\2\2\u0dde\u0ddf\5\u03a2\u01d2"+
		"\2\u0ddf\u0349\3\2\2\2\u0de0\u0de1\7\34\2\2\u0de1\u034b\3\2\2\2\u0de2"+
		"\u0de4\5\u0350\u01a9\2\u0de3\u0de5\5\u034e\u01a8\2\u0de4\u0de3\3\2\2\2"+
		"\u0de4\u0de5\3\2\2\2\u0de5\u034d\3\2\2\2\u0de6\u0de8\7\u00b1\2\2\u0de7"+
		"\u0de6\3\2\2\2\u0de7\u0de8\3\2\2\2\u0de8\u0de9\3\2\2\2\u0de9\u0dea\5\u0350"+
		"\u01a9\2\u0dea\u034f\3\2\2\2\u0deb\u0dec\7\24\2\2\u0dec\u0ded\5\u0352"+
		"\u01aa\2\u0ded\u0351\3\2\2\2\u0dee\u0df6\5\u0356\u01ac\2\u0def\u0df6\5"+
		"\u0358\u01ad\2\u0df0\u0df6\5\u035a\u01ae\2\u0df1\u0df6\5\u035c\u01af\2"+
		"\u0df2\u0df6\5\u035e\u01b0\2\u0df3\u0df6\5\u0360\u01b1\2\u0df4\u0df6\5"+
		"\u0362\u01b2\2\u0df5\u0dee\3\2\2\2\u0df5\u0def\3\2\2\2\u0df5\u0df0\3\2"+
		"\2\2\u0df5\u0df1\3\2\2\2\u0df5\u0df2\3\2\2\2\u0df5\u0df3\3\2\2\2\u0df5"+
		"\u0df4\3\2\2\2\u0df6\u0353\3\2\2\2\u0df7\u0df8\5\u03b2\u01da\2\u0df8\u0355"+
		"\3\2\2\2\u0df9\u0dfa\5\u0354\u01ab\2\u0dfa\u0357\3\2\2\2\u0dfb\u0dfc\5"+
		"\u0354\u01ab\2\u0dfc\u0359\3\2\2\2\u0dfd\u0dfe\5\u0354\u01ab\2\u0dfe\u035b"+
		"\3\2\2\2\u0dff\u0e00\5\u0354\u01ab\2\u0e00\u035d\3\2\2\2\u0e01\u0e02\5"+
		"\u0354\u01ab\2\u0e02\u035f\3\2\2\2\u0e03\u0e04\5\u0354\u01ab\2\u0e04\u0361"+
		"\3\2\2\2\u0e05\u0e06\5\u0354\u01ab\2\u0e06\u0363\3\2\2\2\u0e07\u0e0a\5"+
		"\u03a2\u01d2\2\u0e08\u0e0a\5\u0350\u01a9\2\u0e09\u0e07\3\2\2\2\u0e09\u0e08"+
		"\3\2\2\2\u0e0a\u0365\3\2\2\2\u0e0b\u0e0e\5\u02fe\u0180\2\u0e0c\u0e0e\5"+
		"\u0344\u01a3\2\u0e0d\u0e0b\3\2\2\2\u0e0d\u0e0c\3\2\2\2\u0e0e\u0367\3\2"+
		"\2\2\u0e0f\u0e10\7\u00c5\2\2\u0e10\u0e11\5\u036a\u01b6\2\u0e11\u0369\3"+
		"\2\2\2\u0e12\u0e13\t\33\2\2\u0e13\u036b\3\2\2\2\u0e14\u0e17\5\u036e\u01b8"+
		"\2\u0e15\u0e17\5\u0370\u01b9\2\u0e16\u0e14\3\2\2\2\u0e16\u0e15\3\2\2\2"+
		"\u0e17\u036d\3\2\2\2\u0e18\u0e1b\5\u033a\u019e\2\u0e19\u0e1b\7\u0115\2"+
		"\2\u0e1a\u0e18\3\2\2\2\u0e1a\u0e19\3\2\2\2\u0e1b\u036f\3\2\2\2\u0e1c\u0e1d"+
		"\t\34\2\2\u0e1d\u0371\3\2\2\2\u0e1e\u0e21\5\u039e\u01d0\2\u0e1f\u0e21"+
		"\5\u031e\u0190\2\u0e20\u0e1e\3\2\2\2\u0e20\u0e1f\3\2\2\2\u0e21\u0373\3"+
		"\2\2\2\u0e22\u0e23\t\35\2\2\u0e23\u0375\3\2\2\2\u0e24\u0e25\t\36\2\2\u0e25"+
		"\u0377\3\2\2\2\u0e26\u0e27\7\u00e5\2\2\u0e27\u0379\3\2\2\2\u0e28\u0e29"+
		"\7z\2\2\u0e29\u037b\3\2\2\2\u0e2a\u0e2b\t\37\2\2\u0e2b\u037d\3\2\2\2\u0e2c"+
		"\u0e2d\t \2\2\u0e2d\u037f\3\2\2\2\u0e2e\u0e2f\t!\2\2\u0e2f\u0381\3\2\2"+
		"\2\u0e30\u0e33\5\u0384\u01c3\2\u0e31\u0e33\5\u0386\u01c4\2\u0e32\u0e30"+
		"\3\2\2\2\u0e32\u0e31\3\2\2\2\u0e33\u0383\3\2\2\2\u0e34\u0e35\7\'\2\2\u0e35"+
		"\u0385\3\2\2\2\u0e36\u0e37\t\"\2\2\u0e37\u0387\3\2\2\2\u0e38\u0e39\7\u0159"+
		"\2\2\u0e39\u0389\3\2\2\2\u0e3a\u0e3b\7\u0159\2\2\u0e3b\u038b\3\2\2\2\u0e3c"+
		"\u0e3d\7\u0159\2\2\u0e3d\u038d\3\2\2\2\u0e3e\u0e3f\5\u02a4\u0153\2\u0e3f"+
		"\u038f\3\2\2\2\u0e40\u0e41\5\u02a4\u0153\2\u0e41\u0391\3\2\2\2\u0e42\u0e43"+
		"\5\u02a4\u0153\2\u0e43\u0393\3\2\2\2\u0e44\u0e45\5\u02a4\u0153\2\u0e45"+
		"\u0395\3\2\2\2\u0e46\u0e47\5\u02a4\u0153\2\u0e47\u0397\3\2\2\2\u0e48\u0e49"+
		"\5\u0396\u01cc\2\u0e49\u0399\3\2\2\2\u0e4a\u0e4b\7\u00d8\2\2\u0e4b\u0e4c"+
		"\7\22\2\2\u0e4c\u0e4d\5\u0398\u01cd\2\u0e4d\u039b\3\2\2\2\u0e4e\u0e4f"+
		"\5\u02bc\u015f\2\u0e4f\u0e50\7\22\2\2\u0e50\u0e52\3\2\2\2\u0e51\u0e4e"+
		"\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53\u0e54\5\u031a\u018e"+
		"\2\u0e54\u039d\3\2\2\2\u0e55\u0e56\5\u03a0\u01d1\2\u0e56\u039f\3\2\2\2"+
		"\u0e57\u0e58\5\u02b2\u015a\2\u0e58\u0e59\7\22\2\2\u0e59\u0e5b\3\2\2\2"+
		"\u0e5a\u0e57\3\2\2\2\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e5f\3\2\2\2\u0e5c\u0e5d"+
		"\5\u02b0\u0159\2\u0e5d\u0e5e\7\22\2\2\u0e5e\u0e60\3\2\2\2\u0e5f\u0e5c"+
		"\3\2\2\2\u0e5f\u0e60\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e62\5\u0396\u01cc"+
		"\2\u0e62\u03a1\3\2\2\2\u0e63\u0e64\7\24\2\2\u0e64\u0e65\5\u02a4\u0153"+
		"\2\u0e65\u03a3\3\2\2\2\u0e66\u0e67\5\u03a0\u01d1\2\u0e67\u03a5\3\2\2\2"+
		"\u0e68\u0e69\5\u03a0\u01d1\2\u0e69\u03a7\3\2\2\2\u0e6a\u0e6b\7\4\2\2\u0e6b"+
		"\u03a9\3\2\2\2\u0e6c\u0e6d\7\3\2\2\u0e6d\u03ab\3\2\2\2\u0e6e\u0e6f\t\21"+
		"\2\2\u0e6f\u03ad\3\2\2\2\u0e70\u0e71\t#\2\2\u0e71\u03af\3\2\2\2\u0e72"+
		"\u0e73\t$\2\2\u0e73\u03b1\3\2\2\2\u0e74\u0e77\5\u03b0\u01d9\2\u0e75\u0e77"+
		"\7\u0166\2\2\u0e76\u0e74\3\2\2\2\u0e76\u0e75\3\2\2\2\u0e77\u03b3\3\2\2"+
		"\2\u0150\u03b8\u03c1\u03c8\u03cf\u03d5\u03de\u03e7\u03f0\u0401\u040c\u0412"+
		"\u0417\u041c\u0424\u042a\u043d\u0442\u044b\u0454\u045a\u045e\u0467\u046b"+
		"\u046e\u0471\u0474\u047e\u048a\u048f\u0496\u04a2\u04a8\u04ad\u04b4\u04be"+
		"\u04c1\u04c6\u04d2\u04d6\u04e0\u04e4\u04ee\u04f9\u0506\u0510\u0525\u0530"+
		"\u0543\u054a\u055b\u055f\u0568\u056f\u0579\u0591\u059c\u05c0\u05d5\u05dc"+
		"\u05df\u05eb\u05f0\u05f7\u05fc\u0603\u060c\u0610\u0617\u061f\u0623\u062a"+
		"\u062f\u0632\u0635\u063d\u0642\u0646\u064b\u0653\u065b\u065e\u0663\u0665"+
		"\u0667\u066b\u0672\u067b\u067e\u0684\u069b\u06aa\u06b5\u06ba\u06cc\u06d8"+
		"\u06e0\u06e5\u06ee\u06f4\u06ff\u0715\u0718\u071c\u0720\u0725\u072e\u0732"+
		"\u0735\u0743\u074b\u0752\u075a\u0770\u0779\u077f\u0787\u07a1\u07a4\u07cf"+
		"\u07e0\u07e3\u07f8\u07fb\u0807\u081b\u081e\u0826\u082e\u083d\u0842\u0845"+
		"\u084c\u0853\u0857\u085e\u0861\u0875\u0885\u088c\u089c\u08ad\u08bd\u08c5"+
		"\u08ca\u08cd\u08d5\u08da\u08e2\u08e7\u08ea\u08f2\u08f9\u08fd\u0912\u091d"+
		"\u0920\u0925\u0929\u092c\u0930\u0937\u093f\u0943\u0948\u0954\u0957\u0959"+
		"\u0961\u0963\u096f\u0977\u0980\u098a\u0991\u0996\u099c\u09a6\u09b7\u09ba"+
		"\u09c8\u09cd\u09d4\u09dd\u09e7\u09f2\u09f6\u09fc\u0a04\u0a0b\u0a10\u0a19"+
		"\u0a24\u0a2c\u0a33\u0a3f\u0a46\u0a4d\u0a51\u0a5a\u0a62\u0a69\u0a6d\u0a73"+
		"\u0a83\u0a88\u0a8c\u0a93\u0a96\u0a9e\u0aa1\u0ab3\u0abe\u0ac3\u0ad5\u0ada"+
		"\u0af3\u0af8\u0afc\u0b00\u0b07\u0b12\u0b2c\u0b2f\u0b3e\u0b4a\u0b51\u0b62"+
		"\u0b6b\u0b76\u0b7e\u0b84\u0b89\u0b99\u0ba9\u0bae\u0bb1\u0bb9\u0bbc\u0bc1"+
		"\u0bc4\u0bcc\u0bd2\u0bdd\u0be1\u0be9\u0bef\u0bf5\u0bfb\u0c00\u0c0a\u0c14"+
		"\u0c1a\u0c1d\u0c24\u0c2c\u0c30\u0c32\u0c41\u0c45\u0c48\u0c4b\u0c4f\u0c51"+
		"\u0c77\u0c7c\u0c87\u0c8c\u0c8f\u0c94\u0c98\u0ca2\u0ca4\u0cb0\u0cb3\u0cb7"+
		"\u0cbb\u0cc3\u0cca\u0cd0\u0cd8\u0cde\u0ce6\u0cec\u0cf2\u0cff\u0d07\u0d10"+
		"\u0d17\u0d20\u0d27\u0d2e\u0d32\u0d35\u0d3b\u0d40\u0d43\u0d47\u0d49\u0d4f"+
		"\u0d53\u0d59\u0d5d\u0d64\u0d68\u0d6d\u0d74\u0d79\u0d81\u0d88\u0d8a\u0d8f"+
		"\u0d91\u0da1\u0da8\u0db4\u0dbd\u0dc7\u0dcb\u0dcd\u0dd7\u0ddb\u0de4\u0de7"+
		"\u0df5\u0e09\u0e0d\u0e16\u0e1a\u0e20\u0e32\u0e51\u0e5a\u0e5f\u0e76";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}